/*

Highcharts Editor v0.3.0

Copyright (c) 2016-2017, Highsoft

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

highed.meta.optionsAdvanced = {
  "meta": {
    "types": {},
    "excludes": {}
  },
  "subtree": {
    "accessibility": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "accessibility",
        "excludes": {},
        "description": "Options for configuring accessibility for the chart. Requires the\n[accessibility module](https://code.highcharts.com/modules/accessibility.js)\nto be loaded. For a description of the module and information\non its features, see\n[Highcharts Accessibility](http://www.highcharts.com/docs/chart-concepts/accessibility)."
      },
      "subtree": {
        "addTableShortcut": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "addTableShortcut",
            "excludes": {},
            "default": true,
            "description": "Whether or not to add a shortcut button in the screen reader\ninformation region to show the data table."
          },
          "subtree": {}
        },
        "announceNewData": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "announceNewData",
            "excludes": {},
            "description": "Options for announcing new data to screen reader users. Useful\nfor dynamic data applications and drilldown.\n\nKeep in mind that frequent announcements will not be useful to\nusers, as they won't have time to explore the new data. For these\napplications, consider making snapshots of the data accessible, and\ndo the announcements in batches."
          },
          "subtree": {
            "announcementFormatter": {
              "meta": {
                "types": {
                  "function": 1
                },
                "name": "announcementFormatter",
                "excludes": {},
                "default": "undefined",
                "description": "Optional formatter callback for the announcement. Receives\nup to three arguments. The first argument is always an array\nof all series that received updates. If an announcement is\nalready queued, the series that received updates for that\nannouncement are also included in this array. The second\nargument is provided if `chart.addSeries` was called, and\nthere is a new series. In that case, this argument is a\nreference to the new series. The third argument, similarly,\nis provided if `series.addPoint` was called, and there is a\nnew point. In that case, this argument is a reference to the\nnew point.\n\nThe function should return a string with the text to announce\nto the user. Return empty string to not announce anything.\nReturn `false` to use the default announcement format."
              },
              "subtree": {}
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": false,
                "description": "Enable announcing new data to screen reader users"
              },
              "subtree": {}
            },
            "interruptUser": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "interruptUser",
                "excludes": {},
                "default": false,
                "description": "Choose whether or not the announcements should interrupt the\nscreen reader. If not enabled, the user will be notified once\nidle. It is recommended not to enable this setting unless\nthere is a specific reason to do so."
              },
              "subtree": {}
            },
            "minAnnounceInterval": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "minAnnounceInterval",
                "excludes": {},
                "default": 5000,
                "description": "Minimum interval between announcements in milliseconds. If\nnew data arrives before this amount of time has passed, it is\nqueued for announcement. If another new data event happens\nwhile an announcement is queued, the queued announcement is\ndropped, and the latest announcement is queued instead. Set\nto 0 to allow all announcements, but be warned that frequent\nannouncements are disturbing to users."
              },
              "subtree": {}
            }
          }
        },
        "axisRangeDateFormat": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "axisRangeDateFormat",
            "excludes": {},
            "default": "%Y-%m-%d %H:%M:%S",
            "description": "Date format to use to describe range of datetime axes.\n\nFor an overview of the replacement codes, see\n[dateFormat](/class-reference/Highcharts#dateFormat)."
          },
          "subtree": {}
        },
        "customComponents": {
          "meta": {
            "types": {
              "object": 1
            },
            "name": "customComponents",
            "excludes": {},
            "description": "A hook for adding custom components to the accessibility module.\nShould be an object mapping component names to instances of classes\ninheriting from the Highcharts.AccessibilityComponent base class.\nRemember to add the component to the\n[keyboardNavigation.order](#accessibility.keyboardNavigation.order)\nfor the keyboard navigation to be usable."
          },
          "subtree": {}
        },
        "describeSingleSeries": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "describeSingleSeries",
            "excludes": {},
            "default": false,
            "description": "Whether or not to add series descriptions to charts with a single\nseries."
          },
          "subtree": {}
        },
        "description": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "description",
            "excludes": {},
            "description": "A text description of the chart.\n\n**Note: Prefer using [caption](#caption.text) instead.**\n\nIf the Accessibility module is loaded, this option is included by\ndefault as a long description of the chart in the hidden screen\nreader information region.\n\nNote: Since Highcharts now supports captions, it is preferred to\ndefine the description there, as the caption benefits all users. The\ncaption will be available to screen reader users. If this option is\ndefined instead, the caption is hidden from screen reader users."
          },
          "subtree": {}
        },
        "enabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enabled",
            "excludes": {},
            "default": true,
            "description": "Enable accessibility functionality for the chart."
          },
          "subtree": {}
        },
        "highContrastTheme": {
          "meta": {
            "types": {
              "object": 1
            },
            "name": "highContrastTheme",
            "excludes": {},
            "description": "Theme to apply to the chart when Windows High Contrast Mode is\ndetected."
          },
          "subtree": {}
        },
        "keyboardNavigation": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "keyboardNavigation",
            "excludes": {},
            "description": "Options for keyboard navigation."
          },
          "subtree": {
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": true,
                "description": "Enable keyboard navigation for the chart."
              },
              "subtree": {}
            },
            "focusBorder": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "focusBorder",
                "excludes": {},
                "description": "Options for the focus border drawn around elements while\nnavigating through them."
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true,
                    "description": "Enable/disable focus border for chart."
                  },
                  "subtree": {}
                },
                "hideBrowserFocusOutline": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "hideBrowserFocusOutline",
                    "excludes": {},
                    "default": true,
                    "description": "Hide the browser's default focus indicator."
                  },
                  "subtree": {}
                },
                "margin": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "margin",
                    "excludes": {},
                    "default": 2,
                    "description": "Focus border margin around the elements."
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "highcharts.cssobject": 1
                    },
                    "name": "style",
                    "excludes": {},
                    "default": "{\"color\": \"#335cad\", \"lineWidth\": 2, \"borderRadius\": 3}",
                    "description": "Style options for the focus border drawn around elements\nwhile navigating through them. Note that some browsers in\naddition draw their own borders for focused elements. These\nautomatic borders can not be styled by Highcharts.\n\nIn styled mode, the border is given the\n`.highcharts-focus-border` class."
                  },
                  "subtree": {}
                }
              }
            },
            "mode": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "mode",
                "excludes": {},
                "default": "normal",
                "description": "Set the keyboard navigation mode for the chart. Can be \"normal\"\nor \"serialize\". In normal mode, left/right arrow keys move\nbetween points in a series, while up/down arrow keys move between\nseries. Up/down navigation acts intelligently to figure out which\nseries makes sense to move to from any given point.\n\nIn \"serialize\" mode, points are instead navigated as a single\nlist. Left/right behaves as in \"normal\" mode. Up/down arrow keys\nwill behave like left/right. This can be useful for unifying\nnavigation behavior with/without screen readers enabled."
              },
              "subtree": {}
            },
            "order": {
              "meta": {
                "types": {
                  "array": "string"
                },
                "name": "order",
                "excludes": {},
                "description": "Order of tab navigation in the chart. Determines which elements\nare tabbed to first. Available elements are: `series`, `zoom`,\n`rangeSelector`, `chartMenu`, `legend`. In addition, any custom\ncomponents can be added here."
              },
              "subtree": {}
            },
            "skipNullPoints": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "skipNullPoints",
                "excludes": {},
                "default": true,
                "description": "Skip null points when navigating through points with the\nkeyboard."
              },
              "subtree": {}
            },
            "wrapAround": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "wrapAround",
                "excludes": {},
                "default": true,
                "description": "Whether or not to wrap around when reaching the end of arrow-key\nnavigation for an element in the chart."
              },
              "subtree": {}
            }
          }
        },
        "landmarkVerbosity": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "landmarkVerbosity",
            "excludes": {},
            "default": "all",
            "description": "Amount of landmarks/regions to create for screen reader users. More\nlandmarks can make navigation with screen readers easier, but can\nbe distracting if there are lots of charts on the page. Three modes\nare available:\n - `all`: Adds regions for all series, legend, menu, information\n     region.\n - `one`: Adds a single landmark per chart.\n - `disabled`: No landmarks are added."
          },
          "subtree": {}
        },
        "onTableAnchorClick": {
          "meta": {
            "types": {
              "highcharts.screenreaderclickcallbackfunction": 1
            },
            "name": "onTableAnchorClick",
            "excludes": {},
            "description": "Function to run upon clicking the \"View as Data Table\" link in the\nscreen reader region.\n\nBy default Highcharts will insert and set focus to a data table\nrepresentation of the chart."
          },
          "subtree": {}
        },
        "pointDateFormat": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "pointDateFormat",
            "excludes": {},
            "description": "Date format to use for points on datetime axes when describing them\nto screen reader users.\n\nDefaults to the same format as in tooltip.\n\nFor an overview of the replacement codes, see\n[dateFormat](/class-reference/Highcharts#dateFormat)."
          },
          "subtree": {}
        },
        "pointDateFormatter": {
          "meta": {
            "types": {
              "highcharts.screenreaderformattercallbackfunction.<highcharts.point>": 1
            },
            "name": "pointDateFormatter",
            "excludes": {},
            "description": "Formatter function to determine the date/time format used with\npoints on datetime axes when describing them to screen reader users.\nReceives one argument, `point`, referring to the point to describe.\nShould return a date format string compatible with\n[dateFormat](/class-reference/Highcharts#dateFormat)."
          },
          "subtree": {}
        },
        "pointDescriptionFormatter": {
          "meta": {
            "types": {
              "highcharts.screenreaderformattercallbackfunction.<highcharts.point>": 1
            },
            "name": "pointDescriptionFormatter",
            "excludes": {},
            "description": "Formatter function to use instead of the default for point\ndescriptions.\nReceives one argument, `point`, referring to the point to describe.\nShould return a string with the description of the point for a screen\nreader user. If `false` is returned, the default formatter will be\nused for that point."
          },
          "subtree": {}
        },
        "pointDescriptionThreshold": {
          "meta": {
            "types": {
              "boolean": 1,
              "number": 1
            },
            "name": "pointDescriptionThreshold",
            "excludes": {},
            "default": 200,
            "description": "When a series contains more points than this, we no longer expose\ninformation about individual points to screen readers.\n\nSet to `false` to disable."
          },
          "subtree": {}
        },
        "pointNavigationThreshold": {
          "meta": {
            "types": {
              "boolean": 1,
              "number": 1
            },
            "name": "pointNavigationThreshold",
            "excludes": {},
            "default": false,
            "description": "When a series contains more points than this, we no longer allow\nkeyboard navigation for it.\n\nSet to `false` to disable."
          },
          "subtree": {}
        },
        "pointValueDecimals": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "pointValueDecimals",
            "excludes": {},
            "description": "Decimals to use for the values in the point descriptions. Uses\n[tooltip.valueDecimals](#tooltip.valueDecimals) if not defined."
          },
          "subtree": {}
        },
        "pointValuePrefix": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "pointValuePrefix",
            "excludes": {},
            "description": "Prefix to add to the values in the point descriptions. Uses\n[tooltip.valuePrefix](#tooltip.valuePrefix) if not defined."
          },
          "subtree": {}
        },
        "pointValueSuffix": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "pointValueSuffix",
            "excludes": {},
            "description": "Suffix to add to the values in the point descriptions. Uses\n[tooltip.valueSuffix](#tooltip.valueSuffix) if not defined."
          },
          "subtree": {}
        },
        "screenReaderSectionFormatter": {
          "meta": {
            "types": {
              "highcharts.screenreaderformattercallbackfunction.<highcharts.chart>": 1
            },
            "name": "screenReaderSectionFormatter",
            "excludes": {},
            "default": "undefined",
            "description": "A formatter function to create the HTML contents of the hidden screen\nreader information region. Receives one argument, `chart`, referring\nto the chart object. Should return a string with the HTML content\nof the region. By default this returns an automatic description of\nthe chart.\n\nThe button to view the chart as a data table will be added\nautomatically after the custom HTML content if enabled."
          },
          "subtree": {}
        },
        "seriesDescriptionFormatter": {
          "meta": {
            "types": {
              "highcharts.screenreaderformattercallbackfunction.<highcharts.series>": 1
            },
            "name": "seriesDescriptionFormatter",
            "excludes": {},
            "description": "Formatter function to use instead of the default for series\ndescriptions. Receives one argument, `series`, referring to the\nseries to describe. Should return a string with the description of\nthe series for a screen reader user. If `false` is returned, the\ndefault formatter will be used for that series."
          },
          "subtree": {}
        },
        "typeDescription": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "typeDescription",
            "excludes": {},
            "description": "A text description of the chart type.\n\nIf the Accessibility module is loaded, this will be included in the\ndescription of the chart in the screen reader information region.\n\nHighcharts will by default attempt to guess the chart type, but for\nmore complex charts it is recommended to specify this property for\nclarity."
          },
          "subtree": {}
        }
      }
    },
    "annotations": {
      "meta": {
        "types": {
          "array": "*"
        },
        "name": "annotations",
        "excludes": {},
        "description": "A basic type of an annotation. It allows to add custom labels\nor shapes. The items  can be tied to points, axis coordinates\nor chart pixel coordinates."
      },
      "subtree": {
        "controlPointOptions": {
          "meta": {
            "types": {
              "annotation.controlpoint.options": 1
            },
            "name": "controlPointOptions",
            "excludes": {},
            "description": "Options for annotation's control points. Each control point\ninherits options from controlPointOptions object.\nOptions from the controlPointOptions can be overwritten\nby options in a specific control point."
          },
          "subtree": {
            "height": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "height",
                "excludes": {},
                "default": 10
              },
              "subtree": {}
            },
            "positioner": {
              "meta": {
                "types": {},
                "name": "positioner",
                "excludes": {}
              },
              "subtree": {}
            },
            "style": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "style",
                "excludes": {}
              },
              "subtree": {
                "fill": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "fill",
                    "excludes": {},
                    "default": "white"
                  },
                  "subtree": {}
                },
                "stroke": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "stroke",
                    "excludes": {},
                    "default": "black"
                  },
                  "subtree": {}
                },
                "stroke-width": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "stroke-width",
                    "excludes": {},
                    "default": 2
                  },
                  "subtree": {}
                }
              }
            },
            "symbol": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "symbol",
                "excludes": {},
                "default": "circle"
              },
              "subtree": {}
            },
            "visible": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "visible",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "width": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "width",
                "excludes": {},
                "default": 10
              },
              "subtree": {}
            }
          }
        },
        "crookedLine": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "crookedLine",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A crooked line annotation."
          },
          "subtree": {
            "controlPointOptions": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "controlPointOptions",
                "excludes": {}
              },
              "subtree": {
                "events": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "events",
                    "excludes": {}
                  },
                  "subtree": {}
                }
              }
            },
            "labelOptions": {
              "meta": {
                "types": {},
                "name": "labelOptions",
                "excludes": {},
                "extends": "annotations.labelOptions"
              },
              "subtree": {}
            },
            "shapeOptions": {
              "meta": {
                "types": {},
                "name": "shapeOptions",
                "excludes": {},
                "extends": "annotations.shapeOptions"
              },
              "subtree": {}
            },
            "typeOptions": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "typeOptions",
                "excludes": {},
                "description": "Additional options for an annotation with the type."
              },
              "subtree": {
                "line": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "line",
                    "excludes": {},
                    "description": "Line options."
                  },
                  "subtree": {
                    "fill": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "fill",
                        "excludes": {},
                        "default": "none"
                      },
                      "subtree": {}
                    }
                  }
                },
                "points": {
                  "meta": {
                    "types": {
                      "array": "*"
                    },
                    "name": "points",
                    "excludes": {}
                  },
                  "subtree": {
                    "controlPoint": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "controlPoint",
                        "excludes": {}
                      },
                      "subtree": {}
                    },
                    "x": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "x",
                        "excludes": {},
                        "description": "The x position of the point."
                      },
                      "subtree": {}
                    },
                    "y": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "y",
                        "excludes": {},
                        "description": "The y position of the point."
                      },
                      "subtree": {}
                    }
                  }
                },
                "xAxis": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "xAxis",
                    "excludes": {},
                    "default": 0,
                    "description": "This number defines which xAxis the point is connected to.\nIt refers to either the axis id or the index of the axis\nin the xAxis array."
                  },
                  "subtree": {}
                },
                "yAxis": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "yAxis",
                    "excludes": {},
                    "default": 0,
                    "description": "This number defines which yAxis the point is connected to.\nIt refers to either the axis id or the index of the axis\nin the xAxis array."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "draggable": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "draggable",
            "excludes": {},
            "default": "xy",
            "description": "Allow an annotation to be draggable by a user. Possible\nvalues are `\"x\"`, `\"xy\"`, `\"y\"` and `\"\"` (disabled)."
          },
          "subtree": {}
        },
        "elliottWave": {
          "meta": {
            "types": {},
            "name": "elliottWave",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "An elliott wave annotation.",
            "extends": "annotations.crookedLine"
          },
          "subtree": {
            "labelOptions": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "labelOptions",
                "excludes": {}
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "default": "center"
                  },
                  "subtree": {}
                },
                "allowOverlap": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "allowOverlap",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "backgroundColor": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "backgroundColor",
                    "excludes": {},
                    "default": "none"
                  },
                  "subtree": {}
                },
                "borderWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderWidth",
                    "excludes": {},
                    "default": 0
                  },
                  "subtree": {}
                },
                "crop": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "crop",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "overflow": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "overflow",
                    "excludes": {},
                    "default": "none"
                  },
                  "subtree": {}
                },
                "type": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "type",
                    "excludes": {},
                    "default": "rect"
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": -5
                  },
                  "subtree": {}
                }
              }
            },
            "typeOptions": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "typeOptions",
                "excludes": {}
              },
              "subtree": {
                "line": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "line",
                    "excludes": {}
                  },
                  "subtree": {
                    "strokeWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "strokeWidth",
                        "excludes": {},
                        "default": 1
                      },
                      "subtree": {}
                    }
                  }
                },
                "points": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "points",
                    "excludes": {}
                  },
                  "subtree": {
                    "label": {
                      "meta": {
                        "types": {},
                        "name": "label",
                        "excludes": {},
                        "extends": "annotations.crookedLine.labelOptions"
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            }
          }
        },
        "events": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "events",
            "excludes": {},
            "description": "Events available in annotations."
          },
          "subtree": {
            "add": {
              "meta": {
                "types": {
                  "highcharts.eventcallbackfunction.<highcharts.annotation>": 1
                },
                "name": "add",
                "excludes": {},
                "description": "Event callback when annotation is added to the chart."
              },
              "subtree": {}
            },
            "afterUpdate": {
              "meta": {
                "types": {
                  "highcharts.eventcallbackfunction.<highcharts.annotation>": 1
                },
                "name": "afterUpdate",
                "excludes": {},
                "description": "Event callback when annotation is updated (e.g. drag and\ndroppped or resized by control points)."
              },
              "subtree": {}
            },
            "remove": {
              "meta": {
                "types": {
                  "highcharts.eventcallbackfunction.<highcharts.annotation>": 1
                },
                "name": "remove",
                "excludes": {},
                "description": "Event callback when annotation is removed from the chart."
              },
              "subtree": {}
            }
          }
        },
        "fibonacci": {
          "meta": {
            "types": {},
            "name": "fibonacci",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A fibonacci annotation.",
            "extends": "annotations.crookedLine"
          },
          "subtree": {
            "labelOptions": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "labelOptions",
                "excludes": {}
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "default": "right"
                  },
                  "subtree": {}
                },
                "allowOverlap": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "allowOverlap",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "backgroundColor": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "backgroundColor",
                    "excludes": {},
                    "default": "none"
                  },
                  "subtree": {}
                },
                "borderWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderWidth",
                    "excludes": {},
                    "default": 0
                  },
                  "subtree": {}
                },
                "crop": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "crop",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "overflow": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "overflow",
                    "excludes": {},
                    "default": "none"
                  },
                  "subtree": {}
                },
                "shape": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "shape",
                    "excludes": {},
                    "default": "rect"
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "style",
                    "excludes": {}
                  },
                  "subtree": {
                    "color": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "color",
                        "excludes": {},
                        "default": "grey"
                      },
                      "subtree": {}
                    }
                  }
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "middle"
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": 0
                  },
                  "subtree": {}
                }
              }
            },
            "typeOptions": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "typeOptions",
                "excludes": {}
              },
              "subtree": {
                "backgroundColors": {
                  "meta": {
                    "types": {},
                    "name": "backgroundColors",
                    "excludes": {},
                    "description": "An array of background colors:\nDefault to:\n```\n[\n'rgba(130, 170, 255, 0.4)',\n'rgba(139, 191, 216, 0.4)',\n'rgba(150, 216, 192, 0.4)',\n'rgba(156, 229, 161, 0.4)',\n'rgba(162, 241, 130, 0.4)',\n'rgba(169, 255, 101, 0.4)'\n]\n```"
                  },
                  "subtree": {}
                },
                "height": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "height",
                    "excludes": {},
                    "default": 2,
                    "description": "The height of the fibonacci in terms of yAxis."
                  },
                  "subtree": {}
                },
                "labels": {
                  "meta": {
                    "types": {
                      "array": "object"
                    },
                    "name": "labels",
                    "excludes": {},
                    "description": "An array with options for the labels.",
                    "extends": "annotations.crookedLine.labelOptions"
                  },
                  "subtree": {}
                },
                "lineColor": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "lineColor",
                    "excludes": {},
                    "default": "grey",
                    "description": "The color of line."
                  },
                  "subtree": {}
                },
                "lineColors": {
                  "meta": {
                    "types": {},
                    "name": "lineColors",
                    "excludes": {},
                    "description": "An array of colors for the lines."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "id": {
          "meta": {
            "types": {
              "string": 1,
              "number": 1
            },
            "name": "id",
            "excludes": {},
            "description": "Sets an ID for an annotation. Can be user later when removing an\nannotation in [Chart#removeAnnotation(id)](/class-reference/Highcharts.Chart#removeAnnotation) method."
          },
          "subtree": {}
        },
        "infinityLine": {
          "meta": {
            "types": {},
            "name": "infinityLine",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "An infinity line annotation.",
            "extends": "annotations.crookedLine"
          },
          "subtree": {}
        },
        "labelOptions": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "labelOptions",
            "excludes": {},
            "description": "Options for annotation's labels. Each label inherits options\nfrom the labelOptions object. An option from the labelOptions\ncan be overwritten by config for a specific label."
          },
          "subtree": {
            "align": {
              "meta": {
                "types": {
                  "highcharts.alignvalue": 1
                },
                "name": "align",
                "excludes": {},
                "default": "center",
                "description": "The alignment of the annotation's label. If right,\nthe right side of the label should be touching the point."
              },
              "subtree": {}
            },
            "allowOverlap": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "allowOverlap",
                "excludes": {},
                "default": false,
                "description": "Whether to allow the annotation's labels to overlap.\nTo make the labels less sensitive for overlapping,\nthe can be set to 0."
              },
              "subtree": {}
            },
            "backgroundColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "backgroundColor",
                "excludes": {},
                "default": "rgba(0, 0, 0, 0.75)",
                "description": "The background color or gradient for the annotation's label."
              },
              "subtree": {}
            },
            "borderColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "borderColor",
                "excludes": {},
                "default": "black",
                "description": "The border color for the annotation's label."
              },
              "subtree": {}
            },
            "borderRadius": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderRadius",
                "excludes": {},
                "default": 3,
                "description": "The border radius in pixels for the annotaiton's label."
              },
              "subtree": {}
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": 1,
                "description": "The border width in pixels for the annotation's label"
              },
              "subtree": {}
            },
            "className": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "className",
                "excludes": {},
                "default": "",
                "description": "A class name for styling by CSS."
              },
              "subtree": {}
            },
            "crop": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "crop",
                "excludes": {},
                "default": false,
                "description": "Whether to hide the annotation's label\nthat is outside the plot area."
              },
              "subtree": {}
            },
            "distance": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "distance",
                "excludes": {},
                "description": "The label's pixel distance from the point."
              },
              "subtree": {}
            },
            "format": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "format",
                "excludes": {},
                "description": "A\n[format](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\nstring for the data label."
              },
              "subtree": {}
            },
            "formatter": {
              "meta": {
                "types": {
                  "highcharts.formattercallbackfunction.<highcharts.point>": 1
                },
                "name": "formatter",
                "excludes": {},
                "default": "function () { return defined(this.y) ? this.y : 'Annotation label'; }",
                "description": "Callback JavaScript function to format the annotation's\nlabel. Note that if a `format` or `text` are defined, the\nformat or text take precedence and the formatter is ignored.\n`This` refers to a point object."
              },
              "subtree": {}
            },
            "overflow": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "overflow",
                "excludes": {},
                "default": "justify",
                "description": "How to handle the annotation's label that flow outside the\nplot area. The justify option aligns the label inside the\nplot area."
              },
              "subtree": {}
            },
            "padding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "padding",
                "excludes": {},
                "default": 5,
                "description": "When either the borderWidth or the backgroundColor is set,\nthis    is the padding within the box."
              },
              "subtree": {}
            },
            "shadow": {
              "meta": {
                "types": {
                  "boolean": 1,
                  "highcharts.shadowoptionsobject": 1
                },
                "name": "shadow",
                "excludes": {},
                "default": false,
                "description": "The shadow of the box. The shadow can be an object\nconfiguration containing `color`, `offsetX`, `offsetY`,\n`opacity` and `width`."
              },
              "subtree": {}
            },
            "shape": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "shape",
                "excludes": {},
                "default": "callout",
                "description": "The name of a symbol to use for the border around the label.\nSymbols are predefined functions on the Renderer object."
              },
              "subtree": {}
            },
            "style": {
              "meta": {
                "types": {
                  "highcharts.cssobject": 1
                },
                "name": "style",
                "excludes": {},
                "description": "Styles for the annotation's label."
              },
              "subtree": {}
            },
            "text": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "text",
                "excludes": {},
                "description": "Alias for the format option."
              },
              "subtree": {}
            },
            "useHTML": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "useHTML",
                "excludes": {},
                "default": false,
                "description": "Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\nto render the annotation's label."
              },
              "subtree": {}
            },
            "verticalAlign": {
              "meta": {
                "types": {
                  "highcharts.verticalalignvalue": 1
                },
                "name": "verticalAlign",
                "excludes": {},
                "default": "bottom",
                "description": "The vertical alignment of the annotation's label."
              },
              "subtree": {}
            },
            "x": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "x",
                "excludes": {},
                "default": 0,
                "description": "The x position offset of the label relative to the point.\nNote that if a `distance` is defined, the distance takes\nprecedence over `x` and `y` options."
              },
              "subtree": {}
            },
            "y": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "y",
                "excludes": {},
                "default": -16,
                "description": "The y position offset of the label relative to the point.\nNote that if a `distance` is defined, the distance takes\nprecedence over `x` and `y` options."
              },
              "subtree": {}
            }
          }
        },
        "labels": {
          "meta": {
            "types": {
              "array": "*"
            },
            "name": "labels",
            "excludes": {},
            "description": "An array of labels for the annotation. For options that apply to\nmultiple labels, they can be added to the\n[labelOptions](annotations.labelOptions.html).",
            "extends": "annotations.labelOptions"
          },
          "subtree": {
            "point": {
              "meta": {
                "types": {
                  "string": 1,
                  "highcharts.mockpointoptionsobject": 1
                },
                "name": "point",
                "excludes": {},
                "description": "This option defines the point to which the label will be\nconnected. It can be either the point which exists in the\nseries - it is referenced by the point's id - or a new point with\ndefined x, y properties and optionally axes."
              },
              "subtree": {
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "description": "The x position of the point. Units can be either in axis\nor chart pixel coordinates."
                  },
                  "subtree": {}
                },
                "xAxis": {
                  "meta": {
                    "types": {
                      "number": 1,
                      "string": 1
                    },
                    "name": "xAxis",
                    "excludes": {},
                    "description": "This number defines which xAxis the point is connected to. It\nrefers to either the axis id or the index of the axis in the\nxAxis array. If the option is not configured or the axis is not\nfound the point's x coordinate refers to the chart pixels."
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "description": "The y position of the point. Units can be either in axis\nor chart pixel coordinates."
                  },
                  "subtree": {}
                },
                "yAxis": {
                  "meta": {
                    "types": {
                      "number": 1,
                      "string": 1
                    },
                    "name": "yAxis",
                    "excludes": {},
                    "description": "This number defines which yAxis the point is connected to. It\nrefers to either the axis id or the index of the axis in the\nyAxis array. If the option is not configured or the axis is not\nfound the point's y coordinate refers to the chart pixels."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "measure": {
          "meta": {
            "types": {},
            "name": "measure",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A measure annotation.",
            "extends": "annotations.crookedLine"
          },
          "subtree": {
            "controlPointOptions": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "controlPointOptions",
                "excludes": {}
              },
              "subtree": {
                "events": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "events",
                    "excludes": {}
                  },
                  "subtree": {}
                }
              }
            },
            "typeOptions": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "typeOptions",
                "excludes": {}
              },
              "subtree": {
                "background": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "background",
                    "excludes": {}
                  },
                  "subtree": {
                    "fill": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "fill",
                        "excludes": {},
                        "default": "rgba(130, 170, 255, 0.4)",
                        "description": "The color of the rectangle."
                      },
                      "subtree": {}
                    },
                    "stroke": {
                      "meta": {
                        "types": {},
                        "name": "stroke",
                        "excludes": {},
                        "description": "The color of border."
                      },
                      "subtree": {}
                    },
                    "strokeWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "strokeWidth",
                        "excludes": {},
                        "default": 0,
                        "description": "The width of border."
                      },
                      "subtree": {}
                    }
                  }
                },
                "crosshairX": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "crosshairX",
                    "excludes": {},
                    "description": "Configure a crosshair that is horizontally placed in middle of\nrectangle."
                  },
                  "subtree": {
                    "dashStyle": {
                      "meta": {
                        "types": {
                          "highcharts.dashstylevalue": 1
                        },
                        "name": "dashStyle",
                        "excludes": {},
                        "default": "Dash",
                        "description": "The dash or dot style of the crosshair's line. For possible\nvalues, see\n[this demonstration](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/)."
                      },
                      "subtree": {}
                    },
                    "enabled": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "enabled",
                        "excludes": {},
                        "default": true,
                        "description": "Enable or disable the horizontal crosshair."
                      },
                      "subtree": {}
                    },
                    "markerEnd": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "markerEnd",
                        "excludes": {},
                        "default": "arrow",
                        "description": "The marker-end defines the arrowhead that will be drawn\nat the final vertex of the given crosshair's path."
                      },
                      "subtree": {}
                    },
                    "zIndex": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "zIndex",
                        "excludes": {},
                        "default": 6,
                        "description": "The Z index of the crosshair in annotation."
                      },
                      "subtree": {}
                    }
                  }
                },
                "crosshairY": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "crosshairY",
                    "excludes": {},
                    "description": "Configure a crosshair that is vertically placed in middle of\nrectangle."
                  },
                  "subtree": {
                    "dashStyle": {
                      "meta": {
                        "types": {
                          "highcharts.dashstylevalue": 1
                        },
                        "name": "dashStyle",
                        "excludes": {},
                        "default": "Dash",
                        "description": "The dash or dot style of the crosshair's line. For possible\nvalues, see [this demonstration](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/)."
                      },
                      "subtree": {}
                    },
                    "enabled": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "enabled",
                        "excludes": {},
                        "default": true,
                        "description": "Enable or disable the vertical crosshair."
                      },
                      "subtree": {}
                    },
                    "markerEnd": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "markerEnd",
                        "excludes": {},
                        "default": "arrow",
                        "description": "The marker-end defines the arrowhead that will be drawn\nat the final vertex of the given crosshair's path."
                      },
                      "subtree": {}
                    },
                    "zIndex": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "zIndex",
                        "excludes": {},
                        "default": 6,
                        "description": "The Z index of the crosshair in annotation."
                      },
                      "subtree": {}
                    }
                  }
                },
                "label": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "label",
                    "excludes": {}
                  },
                  "subtree": {
                    "enabled": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "enabled",
                        "excludes": {},
                        "default": true,
                        "description": "Enable or disable the label text (min, max, average,\nbins values).\n\nDefaults to true."
                      },
                      "subtree": {}
                    },
                    "formatter": {
                      "meta": {
                        "types": {
                          "function": 1
                        },
                        "name": "formatter",
                        "excludes": {},
                        "description": "Formatter function for the label text.\n\nAvailable data are:\n\n<table>\n\n<tbody>\n\n<tr>\n\n<td>`this.min`</td>\n\n<td>The mininimum value of the points in the selected\nrange.</td>\n\n</tr>\n\n<tr>\n\n<td>`this.max`</td>\n\n<td>The maximum value of the points in the selected\nrange.</td>\n\n</tr>\n\n<tr>\n\n<td>`this.average`</td>\n\n<td>The average value of the points in the selected\nrange.</td>\n\n</tr>\n\n<tr>\n\n<td>`this.bins`</td>\n\n<td>The amount of the points in the selected range.</td>\n\n</tr>\n\n</table>"
                      },
                      "subtree": {}
                    },
                    "style": {
                      "meta": {
                        "types": {
                          "highcharts.cssobject": 1
                        },
                        "name": "style",
                        "excludes": {},
                        "default": "{\"color\": \"#666666\", \"fontSize\": \"11px\"}",
                        "description": "CSS styles for the measure label."
                      },
                      "subtree": {
                        "color": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "color",
                            "excludes": {},
                            "default": "#666666"
                          },
                          "subtree": {}
                        },
                        "fontSize": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "fontSize",
                            "excludes": {},
                            "default": "11px"
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                },
                "selectType": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "selectType",
                    "excludes": {},
                    "default": "xy",
                    "description": "Decides in what dimensions the user can resize by dragging the\nmouse. Can be one of x, y or xy."
                  },
                  "subtree": {}
                },
                "xAxis": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "xAxis",
                    "excludes": {},
                    "default": 0,
                    "description": "This number defines which xAxis the point is connected to.\nIt refers to either the axis id or the index of the axis\nin the xAxis array."
                  },
                  "subtree": {}
                },
                "yAxis": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "yAxis",
                    "excludes": {},
                    "default": 0,
                    "description": "This number defines which yAxis the point is connected to.\nIt refers to either the axis id or the index of the axis\nin the yAxis array."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "pitchfork": {
          "meta": {
            "types": {},
            "name": "pitchfork",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A pitchfork annotation.",
            "extends": "annotations.infinityLine"
          },
          "subtree": {
            "typeOptions": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "typeOptions",
                "excludes": {}
              },
              "subtree": {
                "innerBackground": {
                  "meta": {
                    "types": {},
                    "name": "innerBackground",
                    "excludes": {},
                    "description": "Inner background options.",
                    "extends": "annotations.crookedLine.shapeOptions"
                  },
                  "subtree": {
                    "fill": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "fill",
                        "excludes": {},
                        "default": "rgba(130, 170, 255, 0.4)"
                      },
                      "subtree": {}
                    },
                    "strokeWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "strokeWidth",
                        "excludes": {},
                        "default": 0
                      },
                      "subtree": {}
                    }
                  }
                },
                "outerBackground": {
                  "meta": {
                    "types": {},
                    "name": "outerBackground",
                    "excludes": {},
                    "description": "Outer background options.",
                    "extends": "annotations.crookedLine.shapeOptions"
                  },
                  "subtree": {
                    "fill": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "fill",
                        "excludes": {},
                        "default": "rgba(156, 229, 161, 0.4)"
                      },
                      "subtree": {}
                    },
                    "strokeWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "strokeWidth",
                        "excludes": {},
                        "default": 0
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            }
          }
        },
        "shapeOptions": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "shapeOptions",
            "excludes": {},
            "description": "Options for annotation's shapes. Each shape inherits options from\nthe shapeOptions object. An option from the shapeOptions can be\noverwritten by config for a specific shape."
          },
          "subtree": {
            "fill": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "fill",
                "excludes": {},
                "default": "rgba(0, 0, 0, 0.75)",
                "description": "The color of the shape's fill."
              },
              "subtree": {}
            },
            "height": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "height",
                "excludes": {},
                "description": "The height of the shape."
              },
              "subtree": {}
            },
            "r": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "r",
                "excludes": {},
                "default": 0,
                "description": "The radius of the shape."
              },
              "subtree": {}
            },
            "snap": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "snap",
                "excludes": {},
                "default": 2,
                "description": "Defines additional snapping area around an annotation\nmaking this annotation to focus. Defined in pixels."
              },
              "subtree": {}
            },
            "stroke": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "stroke",
                "excludes": {},
                "default": "rgba(0, 0, 0, 0.75)",
                "description": "The color of the shape's stroke."
              },
              "subtree": {}
            },
            "strokeWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "strokeWidth",
                "excludes": {},
                "default": 1,
                "description": "The pixel stroke width of the shape."
              },
              "subtree": {}
            },
            "type": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "type",
                "excludes": {},
                "default": "'rect'",
                "description": "The type of the shape, e.g. circle or rectangle."
              },
              "subtree": {}
            },
            "width": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "width",
                "excludes": {},
                "description": "The width of the shape."
              },
              "subtree": {}
            }
          }
        },
        "shapes": {
          "meta": {
            "types": {
              "array": "*"
            },
            "name": "shapes",
            "excludes": {},
            "description": "An array of shapes for the annotation. For options that apply to\nmultiple shapes, then can be added to the\n[shapeOptions](annotations.shapeOptions.html).",
            "extends": "annotations.shapeOptions"
          },
          "subtree": {
            "markerEnd": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "markerEnd",
                "excludes": {},
                "description": "Id of the marker which will be drawn at the final vertex of the\npath. Custom markers can be defined in defs property."
              },
              "subtree": {}
            },
            "markerStart": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "markerStart",
                "excludes": {},
                "description": "Id of the marker which will be drawn at the first vertex of the\npath. Custom markers can be defined in defs property."
              },
              "subtree": {}
            },
            "point": {
              "meta": {
                "types": {
                  "string": 1,
                  "highcharts.mockpointoptionsobject": 1
                },
                "name": "point",
                "excludes": {},
                "description": "This option defines the point to which the shape will be\nconnected. It can be either the point which exists in the\nseries - it is referenced by the point's id - or a new point with\ndefined x, y properties and optionally axes.",
                "extends": "annotations.labels.point"
              },
              "subtree": {}
            },
            "points": {
              "meta": {
                "types": {
                  "array": "(string|Highcharts.MockPointOptionsObject)"
                },
                "name": "points",
                "excludes": {},
                "description": "An array of points for the shape. This option is available for\nshapes which can use multiple points such as path. A point can be\neither a point object or a point's id.",
                "extends": "annotations.labels.point"
              },
              "subtree": {}
            }
          }
        },
        "tunnel": {
          "meta": {
            "types": {},
            "name": "tunnel",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A tunnel annotation.",
            "extends": "annotations.crookedLine"
          },
          "subtree": {
            "controlPointOptions": {
              "meta": {
                "types": {},
                "name": "controlPointOptions",
                "excludes": {},
                "extends": "annotations.crookedLine.controlPointOptions"
              },
              "subtree": {
                "events": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "events",
                    "excludes": {}
                  },
                  "subtree": {}
                }
              }
            },
            "typeOptions": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "typeOptions",
                "excludes": {}
              },
              "subtree": {
                "background": {
                  "meta": {
                    "types": {
                      "object": 1
                    },
                    "name": "background",
                    "excludes": {},
                    "description": "Background options."
                  },
                  "subtree": {
                    "fill": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "fill",
                        "excludes": {},
                        "default": "rgba(130, 170, 255, 0.4)"
                      },
                      "subtree": {}
                    },
                    "strokeWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "strokeWidth",
                        "excludes": {},
                        "default": 0
                      },
                      "subtree": {}
                    }
                  }
                },
                "height": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "height",
                    "excludes": {},
                    "default": -2,
                    "description": "The height of the annotation in terms of yAxis."
                  },
                  "subtree": {}
                },
                "heightControlPoint": {
                  "meta": {
                    "types": {},
                    "name": "heightControlPoint",
                    "excludes": {},
                    "description": "Options for the control point which controls\nthe annotation's height.",
                    "extends": "annotations.crookedLine.controlPointOptions"
                  },
                  "subtree": {
                    "events": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "events",
                        "excludes": {}
                      },
                      "subtree": {}
                    }
                  }
                },
                "line": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "line",
                    "excludes": {}
                  },
                  "subtree": {
                    "strokeWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "strokeWidth",
                        "excludes": {},
                        "default": 1
                      },
                      "subtree": {}
                    }
                  }
                },
                "xAxis": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "xAxis",
                    "excludes": {},
                    "default": 0
                  },
                  "subtree": {}
                },
                "yAxis": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "yAxis",
                    "excludes": {},
                    "default": 0
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "verticalLine": {
          "meta": {
            "types": {},
            "name": "verticalLine",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A vertical line annotation.",
            "extends": "annotations.crookedLine"
          },
          "subtree": {
            "typeOptions": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "typeOptions",
                "excludes": {}
              },
              "subtree": {
                "connector": {
                  "meta": {
                    "types": {},
                    "name": "connector",
                    "excludes": {},
                    "description": "Connector options.",
                    "extends": "annotations.crookedLine.shapeOptions"
                  },
                  "subtree": {
                    "markerEnd": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "markerEnd",
                        "excludes": {},
                        "default": "arrow"
                      },
                      "subtree": {}
                    },
                    "strokeWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "strokeWidth",
                        "excludes": {},
                        "default": 1
                      },
                      "subtree": {}
                    }
                  }
                },
                "label": {
                  "meta": {
                    "types": {},
                    "name": "label",
                    "excludes": {},
                    "description": "Label options.",
                    "extends": "annotations.crookedLine.labelOptions"
                  },
                  "subtree": {
                    "allowOverlap": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "allowOverlap",
                        "excludes": {},
                        "default": true
                      },
                      "subtree": {}
                    },
                    "backgroundColor": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "backgroundColor",
                        "excludes": {},
                        "default": "none"
                      },
                      "subtree": {}
                    },
                    "borderWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "borderWidth",
                        "excludes": {},
                        "default": 0
                      },
                      "subtree": {}
                    },
                    "crop": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "crop",
                        "excludes": {},
                        "default": true
                      },
                      "subtree": {}
                    },
                    "offset": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "offset",
                        "excludes": {},
                        "default": -40
                      },
                      "subtree": {}
                    },
                    "overflow": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "overflow",
                        "excludes": {},
                        "default": "none"
                      },
                      "subtree": {}
                    },
                    "shape": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "shape",
                        "excludes": {},
                        "default": "rect"
                      },
                      "subtree": {}
                    },
                    "text": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "text",
                        "excludes": {},
                        "default": "{y:.2f}"
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            }
          }
        },
        "visible": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "visible",
            "excludes": {},
            "default": true,
            "description": "Whether the annotation is visible."
          },
          "subtree": {}
        },
        "zIndex": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "zIndex",
            "excludes": {},
            "default": 6,
            "description": "The Z index of the annotation."
          },
          "subtree": {}
        }
      }
    },
    "boost": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "boost",
        "excludes": {}
      },
      "subtree": {
        "allowForce": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "allowForce",
            "excludes": {},
            "default": "true",
            "description": "If set to true, the whole chart will be boosted if one of the series\ncrosses its threshold, and all the series can be boosted."
          },
          "subtree": {}
        },
        "debug": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "debug",
            "excludes": {},
            "description": "Debugging options for boost.\nUseful for benchmarking, and general timing."
          },
          "subtree": {
            "showSkipSummary": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showSkipSummary",
                "excludes": {},
                "default": "false",
                "description": "Show the number of points skipped through culling.\n\nWhen set to true, the number of points skipped in series processing\nis outputted. Points are skipped if they are closer than 1 pixel from\neach other."
              },
              "subtree": {}
            },
            "timeBufferCopy": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "timeBufferCopy",
                "excludes": {},
                "default": "false",
                "description": "Time the WebGL to SVG buffer copy\n\nAfter rendering, the result is copied to an image which is injected\ninto the SVG.\n\nIf this property is set to true, the time it takes for the buffer copy\nto complete is outputted."
              },
              "subtree": {}
            },
            "timeKDTree": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "timeKDTree",
                "excludes": {},
                "default": "false",
                "description": "Time the building of the k-d tree.\n\nThis outputs the time spent building the k-d tree used for\nmarkers etc.\n\nNote that the k-d tree is built async, and runs post-rendering.\nFollowing, it does not affect the performance of the rendering itself."
              },
              "subtree": {}
            },
            "timeRendering": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "timeRendering",
                "excludes": {},
                "default": "false",
                "description": "Time the series rendering.\n\nThis outputs the time spent on actual rendering in the console when\nset to true."
              },
              "subtree": {}
            },
            "timeSeriesProcessing": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "timeSeriesProcessing",
                "excludes": {},
                "default": "false",
                "description": "Time the series processing.\n\nThis outputs the time spent on transforming the series data to\nvertex buffers when set to true."
              },
              "subtree": {}
            },
            "timeSetup": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "timeSetup",
                "excludes": {},
                "default": "false",
                "description": "Time the the WebGL setup.\n\nThis outputs the time spent on setting up the WebGL context,\ncreating shaders, and textures."
              },
              "subtree": {}
            }
          }
        },
        "enabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enabled",
            "excludes": {},
            "default": "true",
            "description": "Enable or disable boost on a chart."
          },
          "subtree": {}
        },
        "seriesThreshold": {
          "meta": {
            "types": {
              "number": 1,
              "null": 1
            },
            "name": "seriesThreshold",
            "excludes": {},
            "default": "null",
            "description": "Set the series threshold for when the boost should kick in globally.\n\nSetting to e.g. 20 will cause the whole chart to enter boost mode\nif there are 20 or more series active. When the chart is in boost mode,\nevery series in it will be rendered to a common canvas. This offers\na significant speed improvment in charts with a very high\namount of series."
          },
          "subtree": {}
        },
        "useGPUTranslations": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "useGPUTranslations",
            "excludes": {},
            "default": "false",
            "description": "Enable or disable GPU translations. GPU translations are faster than doing\nthe translation in JavaScript.\n\nThis option may cause rendering issues with certain datasets.\nNamely, if your dataset has large numbers with small increments (such as\ntimestamps), it won't work correctly. This is due to floating point\nprecission."
          },
          "subtree": {}
        },
        "usePreallocated": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "usePreallocated",
            "excludes": {},
            "default": "false",
            "description": "Enable or disable pre-allocation of vertex buffers.\n\nEnabling this will make it so that the binary data arrays required for\nstoring the series data will be allocated prior to transforming the data\nto a WebGL-compatible format.\n\nThis saves a copy operation on the order of O(n) and so is significantly more\nperformant. However, this is currently an experimental option, and may cause\nvisual artifacts with some datasets.\n\nAs such, care should be taken when using this setting to make sure that\nit doesn't cause any rendering glitches with the given use-case."
          },
          "subtree": {}
        }
      }
    },
    "caption": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "caption",
        "excludes": {},
        "description": "The chart's caption, which will render below the chart and will be part\nof exported charts. The caption can be updated after chart initialization\nthrough the `Chart.update` or `Chart.caption.update` methods."
      },
      "subtree": {
        "align": {
          "meta": {
            "types": {
              "highcharts.alignvalue": 1
            },
            "name": "align",
            "excludes": {},
            "default": "left",
            "description": "The horizontal alignment of the caption. Can be one of \"left\",\n \"center\" and \"right\"."
          },
          "subtree": {}
        },
        "floating": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "floating",
            "excludes": {},
            "default": "false",
            "description": "When the caption is floating, the plot area will not move to make\nspace for it."
          },
          "subtree": {}
        },
        "margin": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "margin",
            "excludes": {},
            "default": 15,
            "description": "The margin between the caption and the plot area."
          },
          "subtree": {}
        },
        "style": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "style",
            "excludes": {},
            "default": "{\"color\": \"#666666\"}",
            "description": "CSS styles for the caption.\n\nIn styled mode, the caption style is given in the\n`.highcharts-caption` class."
          },
          "subtree": {}
        },
        "text": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "text",
            "excludes": {},
            "default": "",
            "description": "The caption text of the chart."
          },
          "subtree": {}
        },
        "useHTML": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "useHTML",
            "excludes": {},
            "default": "false",
            "description": "Whether to\n[use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\nto render the text."
          },
          "subtree": {}
        },
        "verticalAlign": {
          "meta": {
            "types": {
              "highcharts.verticalalignvalue": 1
            },
            "name": "verticalAlign",
            "excludes": {},
            "default": "bottom",
            "description": "The vertical alignment of the caption. Can be one of `\"top\"`,\n`\"middle\"` and `\"bottom\"`. When middle, the caption behaves as\nfloating."
          },
          "subtree": {}
        },
        "x": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "x",
            "excludes": {},
            "default": "0",
            "description": "The x position of the caption relative to the alignment within\n`chart.spacingLeft` and `chart.spacingRight`."
          },
          "subtree": {}
        },
        "y": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "y",
            "excludes": {},
            "description": "The y position of the caption relative to the alignment within\n`chart.spacingTop` and `chart.spacingBottom`."
          },
          "subtree": {}
        }
      }
    },
    "chart": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "chart",
        "excludes": {},
        "description": "General options for the chart."
      },
      "subtree": {
        "alignTicks": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "alignTicks",
            "excludes": {},
            "default": "true",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "When using multiple axis, the ticks of two or more opposite axes\nwill automatically be aligned by adding ticks to the axis or axes\nwith the least ticks, as if `tickAmount` were specified.\n\nThis can be prevented by setting `alignTicks` to false. If the grid\nlines look messy, it's a good idea to hide them for the secondary\naxis by setting `gridLineWidth` to 0.\n\nIf `startOnTick` or `endOnTick` in an Axis options are set to false,\nthen the `alignTicks ` will be disabled for the Axis.\n\nDisabled for logarithmic axes."
          },
          "subtree": {}
        },
        "animation": {
          "meta": {
            "types": {
              "boolean": 1,
              "highcharts.animationoptionsobject": 1
            },
            "name": "animation",
            "excludes": {},
            "default": "true",
            "description": "Set the overall animation for all chart updating. Animation can be\ndisabled throughout the chart by setting it to false here. It can\nbe overridden for each individual API method as a function parameter.\nThe only animation not affected by this option is the initial series\nanimation, see [plotOptions.series.animation](#plotOptions.series.animation).\n\nThe animation can either be set as a boolean or a configuration\nobject. If `true`, it will use the 'swing' jQuery easing and a\nduration of 500 ms. If used as a configuration object, the following\nproperties are supported:\n\n<dl>\n\n<dt>duration</dt>\n\n<dd>The duration of the animation in milliseconds.</dd>\n\n<dt>easing</dt>\n\n<dd>A string reference to an easing function set on the `Math`\nobject. See [the easing\ndemo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/).\n</dd>\n\n</dl>"
          },
          "subtree": {}
        },
        "backgroundColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "backgroundColor",
            "excludes": {},
            "default": "#ffffff",
            "description": "The background color or gradient for the outer chart area."
          },
          "subtree": {}
        },
        "borderColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "borderColor",
            "excludes": {},
            "default": "#335cad",
            "description": "The color of the outer chart border."
          },
          "subtree": {}
        },
        "borderRadius": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "borderRadius",
            "excludes": {},
            "default": 0,
            "description": "The corner radius of the outer chart border."
          },
          "subtree": {}
        },
        "borderWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "borderWidth",
            "excludes": {},
            "default": "0",
            "description": "The pixel width of the outer chart border."
          },
          "subtree": {}
        },
        "className": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "className",
            "excludes": {},
            "description": "A CSS class name to apply to the charts container `div`, allowing\nunique CSS styling for each chart."
          },
          "subtree": {}
        },
        "colorCount": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "colorCount",
            "excludes": {},
            "default": 10,
            "description": "In styled mode, this sets how many colors the class names\nshould rotate between. With ten colors, series (or points) are\ngiven class names like `highcharts-color-0`, `highcharts-color-0`\n[...] `highcharts-color-9`. The equivalent in non-styled mode\nis to set colors using the [colors](#colors) setting."
          },
          "subtree": {}
        },
        "defaultSeriesType": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "defaultSeriesType",
            "excludes": {},
            "default": "line",
            "products": {
              "highcharts": 1
            },
            "description": "Alias of `type`."
          },
          "subtree": {}
        },
        "displayErrors": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "displayErrors",
            "excludes": {},
            "default": true,
            "description": "Whether to display errors on the chart. When `false`, the errors will\nbe shown only in the console."
          },
          "subtree": {}
        },
        "events": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "events",
            "excludes": {},
            "description": "Event listeners for the chart."
          },
          "subtree": {
            "addSeries": {
              "meta": {
                "types": {
                  "highcharts.chartaddseriescallbackfunction": 1
                },
                "name": "addSeries",
                "excludes": {},
                "description": "Fires when a series is added to the chart after load time, using the\n`addSeries` method. One parameter, `event`, is passed to the\nfunction, containing common event information. Through\n`event.options` you can access the series options that were passed to\nthe `addSeries` method. Returning false prevents the series from\nbeing added."
              },
              "subtree": {}
            },
            "afterPrint": {
              "meta": {
                "types": {
                  "highcharts.exportingafterprintcallbackfunction": 1
                },
                "name": "afterPrint",
                "excludes": {},
                "description": "Fires after a chart is printed through the context menu item or the\n`Chart.print` method."
              },
              "subtree": {}
            },
            "beforePrint": {
              "meta": {
                "types": {
                  "highcharts.exportingbeforeprintcallbackfunction": 1
                },
                "name": "beforePrint",
                "excludes": {},
                "description": "Fires before a chart is printed through the context menu item or\nthe `Chart.print` method."
              },
              "subtree": {}
            },
            "click": {
              "meta": {
                "types": {
                  "highcharts.chartclickcallbackfunction": 1
                },
                "name": "click",
                "excludes": {},
                "description": "Fires when clicking on the plot background. One parameter, `event`,\nis passed to the function, containing common event information.\n\nInformation on the clicked spot can be found through `event.xAxis`\nand `event.yAxis`, which are arrays containing the axes of each\ndimension and each axis' value at the clicked spot. The primary axes\nare `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\ndatetime axis is milliseconds since 1970-01-01 00:00:00.\n\n<pre>click: function(e) {\n    console.log(\n        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value),\n        e.yAxis[0].value\n    )\n}</pre>"
              },
              "subtree": {}
            },
            "drilldown": {
              "meta": {
                "types": {
                  "highcharts.drilldowncallbackfunction": 1
                },
                "name": "drilldown",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highmaps": 1
                },
                "description": "Fires when a drilldown point is clicked, before the new series is added. This\nevent is also utilized for async drilldown, where the seriesOptions are not\nadded by option, but rather loaded async. Note that when clicking a category\nlabel to trigger multiple series drilldown, one `drilldown` event is\ntriggered per point in the category.\n\nEvent arguments:\n\n- `category`: If a category label was clicked, which index.</dd>\n\n- `originalEvent`: The original browser event (usually click) that triggered\n  the drilldown.\n\n- `point`: The originating point.\n\n- `points`: If a category label was clicked, this array holds all points\n  corresponing to the category.</dd>\n\n- `seriesOptions`: Options for the new series."
              },
              "subtree": {}
            },
            "drillup": {
              "meta": {
                "types": {
                  "highcharts.drillupcallbackfunction": 1
                },
                "name": "drillup",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highmaps": 1
                },
                "description": "Fires when drilling up from a drilldown series."
              },
              "subtree": {}
            },
            "drillupall": {
              "meta": {
                "types": {
                  "highcharts.drillupallcallbackfunction": 1
                },
                "name": "drillupall",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highmaps": 1
                },
                "description": "In a chart with multiple drilldown series, this event fires after all the\nseries have been drilled up."
              },
              "subtree": {}
            },
            "exportData": {
              "meta": {
                "types": {
                  "highcharts.exportdatacallbackfunction": 1
                },
                "name": "exportData",
                "excludes": {},
                "description": "Callback that fires while exporting data. This allows the modification of\ndata rows before processed into the final format."
              },
              "subtree": {}
            },
            "load": {
              "meta": {
                "types": {
                  "highcharts.chartloadcallbackfunction": 1
                },
                "name": "load",
                "excludes": {},
                "description": "Fires when the chart is finished loading. Since v4.2.2, it also waits\nfor images to be loaded, for example from point markers. One\nparameter, `event`, is passed to the function, containing common\nevent information.\n\nThere is also a second parameter to the chart constructor where a\ncallback function can be passed to be executed on chart.load."
              },
              "subtree": {}
            },
            "redraw": {
              "meta": {
                "types": {
                  "highcharts.chartredrawcallbackfunction": 1
                },
                "name": "redraw",
                "excludes": {},
                "description": "Fires when the chart is redrawn, either after a call to\n`chart.redraw()` or after an axis, series or point is modified with\nthe `redraw` option set to `true`. One parameter, `event`, is passed\nto the function, containing common event information."
              },
              "subtree": {}
            },
            "render": {
              "meta": {
                "types": {
                  "highcharts.chartrendercallbackfunction": 1
                },
                "name": "render",
                "excludes": {},
                "description": "Fires after initial load of the chart (directly after the `load`\nevent), and after each redraw (directly after the `redraw` event)."
              },
              "subtree": {}
            },
            "selection": {
              "meta": {
                "types": {
                  "highcharts.chartselectioncallbackfunction": 1
                },
                "name": "selection",
                "excludes": {},
                "description": "Fires when an area of the chart has been selected. Selection is\nenabled by setting the chart's zoomType. One parameter, `event`, is\npassed to the function, containing common event information. The\ndefault action for the selection event is to zoom the chart to the\nselected area. It can be prevented by calling\n`event.preventDefault()` or return false.\n\nInformation on the selected area can be found through `event.xAxis`\nand `event.yAxis`, which are arrays containing the axes of each\ndimension and each axis' min and max values. The primary axes are\n`event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\ndatetime axis is milliseconds since 1970-01-01 00:00:00.\n\n<pre>selection: function(event) {\n    // log the min and max of the primary, datetime x-axis\n    console.log(\n        Highcharts.dateFormat(\n            '%Y-%m-%d %H:%M:%S',\n            event.xAxis[0].min\n        ),\n        Highcharts.dateFormat(\n            '%Y-%m-%d %H:%M:%S',\n            event.xAxis[0].max\n        )\n    );\n    // log the min and max of the y axis\n    console.log(event.yAxis[0].min, event.yAxis[0].max);\n}</pre>"
              },
              "subtree": {}
            }
          }
        },
        "height": {
          "meta": {
            "types": {
              "null": 1,
              "number": 1,
              "string": 1
            },
            "name": "height",
            "excludes": {},
            "default": null,
            "description": "An explicit height for the chart. If a _number_, the height is\ngiven in pixels. If given a _percentage string_ (for example\n`'56%'`), the height is given as the percentage of the actual chart\nwidth. This allows for preserving the aspect ratio across responsive\nsizes.\n\nBy default (when `null`) the height is calculated from the offset\nheight of the containing element, or 400 pixels if the containing\nelement's height is 0."
          },
          "subtree": {}
        },
        "ignoreHiddenSeries": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "ignoreHiddenSeries",
            "excludes": {},
            "default": true,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "If true, the axes will scale to the remaining visible series once\none series is hidden. If false, hiding and showing a series will\nnot affect the axes or the other series. For stacks, once one series\nwithin the stack is hidden, the rest of the stack will close in\naround it even if the axis is not affected."
          },
          "subtree": {}
        },
        "inverted": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "inverted",
            "excludes": {},
            "default": "false",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Whether to invert the axes so that the x axis is vertical and y axis\nis horizontal. When `true`, the x axis is [reversed](#xAxis.reversed)\nby default."
          },
          "subtree": {}
        },
        "map": {
          "meta": {
            "types": {
              "string": 1,
              "array": "*"
            },
            "name": "map",
            "excludes": {},
            "products": {
              "highmaps": 1
            },
            "description": "Default `mapData` for all series. If set to a string, it functions\nas an index into the `Highcharts.maps` array. Otherwise it is\ninterpreted as map data."
          },
          "subtree": {}
        },
        "mapTransforms": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "mapTransforms",
            "excludes": {},
            "products": {
              "highmaps": 1
            },
            "description": "Set lat/lon transformation definitions for the chart. If not defined,\nthese are extracted from the map data."
          },
          "subtree": {}
        },
        "margin": {
          "meta": {
            "types": {
              "number": 1,
              "array": "number"
            },
            "name": "margin",
            "excludes": {},
            "description": "The margin between the outer edge of the chart and the plot area.\nThe numbers in the array designate top, right, bottom and left\nrespectively. Use the options `marginTop`, `marginRight`,\n`marginBottom` and `marginLeft` for shorthand setting of one option.\n\nBy default there is no margin. The actual space is dynamically\ncalculated from the offset of axis labels, axis title, title,\nsubtitle and legend in addition to the `spacingTop`, `spacingRight`,\n`spacingBottom` and `spacingLeft` options."
          },
          "subtree": {}
        },
        "marginBottom": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "marginBottom",
            "excludes": {},
            "description": "The margin between the bottom outer edge of the chart and the plot\narea. Use this to set a fixed pixel value for the margin as opposed\nto the default dynamic margin. See also `spacingBottom`."
          },
          "subtree": {}
        },
        "marginLeft": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "marginLeft",
            "excludes": {},
            "description": "The margin between the left outer edge of the chart and the plot\narea. Use this to set a fixed pixel value for the margin as opposed\nto the default dynamic margin. See also `spacingLeft`."
          },
          "subtree": {}
        },
        "marginRight": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "marginRight",
            "excludes": {},
            "description": "The margin between the right outer edge of the chart and the plot\narea. Use this to set a fixed pixel value for the margin as opposed\nto the default dynamic margin. See also `spacingRight`."
          },
          "subtree": {}
        },
        "marginTop": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "marginTop",
            "excludes": {},
            "description": "The margin between the top outer edge of the chart and the plot area.\nUse this to set a fixed pixel value for the margin as opposed to\nthe default dynamic margin. See also `spacingTop`."
          },
          "subtree": {}
        },
        "options3d": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "options3d",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "Options to render charts in 3 dimensions. This feature requires\n`highcharts-3d.js`, found in the download package or online at\n[code.highcharts.com/highcharts-3d.js](http://code.highcharts.com/highcharts-3d.js)."
          },
          "subtree": {
            "alpha": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "alpha",
                "excludes": {},
                "default": 0,
                "products": {
                  "highcharts": 1
                },
                "description": "One of the two rotation angles for the chart."
              },
              "subtree": {}
            },
            "axisLabelPosition": {
              "meta": {
                "types": {
                  "\"auto\"": 1,
                  "null": 1
                },
                "name": "axisLabelPosition",
                "excludes": {},
                "default": null,
                "products": {
                  "highcharts": 1
                },
                "description": "Set it to `\"auto\"` to automatically move the labels to the best\nedge."
              },
              "subtree": {}
            },
            "beta": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "beta",
                "excludes": {},
                "default": 0,
                "products": {
                  "highcharts": 1
                },
                "description": "One of the two rotation angles for the chart."
              },
              "subtree": {}
            },
            "depth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "depth",
                "excludes": {},
                "default": 100,
                "products": {
                  "highcharts": 1
                },
                "description": "The total depth of the chart."
              },
              "subtree": {}
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1
                },
                "description": "Wether to render the chart using the 3D functionality."
              },
              "subtree": {}
            },
            "fitToPlot": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "fitToPlot",
                "excludes": {},
                "default": true,
                "products": {
                  "highcharts": 1
                },
                "description": "Whether the 3d box should automatically adjust to the chart plot\narea."
              },
              "subtree": {}
            },
            "frame": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "frame",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "Provides the option to draw a frame around the charts by defining\na bottom, front and back panel."
              },
              "subtree": {
                "back": {
                  "meta": {
                    "types": {},
                    "name": "back",
                    "excludes": {},
                    "description": "The back side of the frame around a 3D chart.",
                    "extends": "chart.options3d.frame.bottom"
                  },
                  "subtree": {}
                },
                "bottom": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "bottom",
                    "excludes": {},
                    "description": "The bottom of the frame around a 3D chart."
                  },
                  "subtree": {
                    "color": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "color",
                        "excludes": {},
                        "default": "transparent",
                        "products": {
                          "highcharts": 1
                        },
                        "description": "The color of the panel."
                      },
                      "subtree": {}
                    },
                    "size": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "size",
                        "excludes": {},
                        "default": "1",
                        "products": {
                          "highcharts": 1
                        },
                        "description": "The thickness of the panel."
                      },
                      "subtree": {}
                    },
                    "visible": {
                      "meta": {
                        "types": {
                          "boolean": 1,
                          "\"default\"": 1,
                          "\"auto\"": 1
                        },
                        "name": "visible",
                        "excludes": {},
                        "default": "default",
                        "products": {
                          "highcharts": 1
                        },
                        "description": "Whether to display the frame. Possible values are `true`,\n`false`, `\"auto\"` to display only the frames behind the data,\nand `\"default\"` to display faces behind the data based on the\naxis layout, ignoring the point of view."
                      },
                      "subtree": {}
                    }
                  }
                },
                "front": {
                  "meta": {
                    "types": {},
                    "name": "front",
                    "excludes": {},
                    "description": "The front of the frame around a 3D chart.",
                    "extends": "chart.options3d.frame.bottom"
                  },
                  "subtree": {}
                },
                "left": {
                  "meta": {
                    "types": {},
                    "name": "left",
                    "excludes": {},
                    "description": "The left side of the frame around a 3D chart.",
                    "extends": "chart.options3d.frame.bottom"
                  },
                  "subtree": {}
                },
                "right": {
                  "meta": {
                    "types": {},
                    "name": "right",
                    "excludes": {},
                    "description": "The right of the frame around a 3D chart.",
                    "extends": "chart.options3d.frame.bottom"
                  },
                  "subtree": {}
                },
                "side": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "side",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "description": "Note: As of v5.0.12, `frame.left` or `frame.right` should be used instead.\n\nThe side for the frame around a 3D chart."
                  },
                  "subtree": {
                    "color": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "color",
                        "excludes": {},
                        "default": "transparent",
                        "products": {
                          "highcharts": 1
                        },
                        "description": "The color of the panel."
                      },
                      "subtree": {}
                    },
                    "size": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "size",
                        "excludes": {},
                        "default": "1",
                        "products": {
                          "highcharts": 1
                        },
                        "description": "The thickness of the panel."
                      },
                      "subtree": {}
                    }
                  }
                },
                "size": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "size",
                    "excludes": {},
                    "default": 1,
                    "description": "General pixel thickness for the frame faces."
                  },
                  "subtree": {}
                },
                "top": {
                  "meta": {
                    "types": {},
                    "name": "top",
                    "excludes": {},
                    "description": "The top of the frame around a 3D chart.",
                    "extends": "chart.options3d.frame.bottom"
                  },
                  "subtree": {}
                },
                "visible": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "visible",
                    "excludes": {},
                    "default": "default",
                    "description": "Whether the frames are visible."
                  },
                  "subtree": {}
                }
              }
            },
            "viewDistance": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "viewDistance",
                "excludes": {},
                "default": 25,
                "products": {
                  "highcharts": 1
                },
                "description": "Defines the distance the viewer is standing in front of the\nchart, this setting is important to calculate the perspective\neffect in column and scatter charts. It is not used for 3D pie\ncharts."
              },
              "subtree": {}
            }
          }
        },
        "panKey": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "panKey",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "gantt": 1
            },
            "description": "Allows setting a key to switch between zooming and panning. Can be\none of `alt`, `ctrl`, `meta` (the command key on Mac and Windows\nkey on Windows) or `shift`. The keys are mapped directly to the key\nproperties of the click event argument (`event.altKey`,\n`event.ctrlKey`, `event.metaKey` and `event.shiftKey`)."
          },
          "subtree": {}
        },
        "panning": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "panning",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Allow panning in a chart. Best used with [panKey](#chart.panKey)\nto combine zooming and panning.\n\nOn touch devices, when the [tooltip.followTouchMove](#tooltip.followTouchMove) option is `true` (default), panning\nrequires two fingers. To allow panning with one finger, set\n`followTouchMove` to `false`."
          },
          "subtree": {}
        },
        "parallelAxes": {
          "meta": {
            "types": {},
            "name": "parallelAxes",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "Common options for all yAxes rendered in a parallel coordinates plot.\nThis feature requires `modules/parallel-coordinates.js`.\n\nThe default options are:\n<pre>\nparallelAxes: {\n   lineWidth: 1,       // classic mode only\n   gridlinesWidth: 0,  // classic mode only\n   title: {\n       text: '',\n       reserveSpace: false\n   },\n   labels: {\n       x: 0,\n       y: 0,\n       align: 'center',\n       reserveSpace: false\n   },\n   offset: 0\n}</pre>",
            "extends": "yAxis"
          },
          "subtree": {
            "labels": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "labels",
                "excludes": {}
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "default": "center"
                  },
                  "subtree": {}
                },
                "reserveSpace": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "reserveSpace",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "default": 0
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": 4
                  },
                  "subtree": {}
                }
              }
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 1
              },
              "subtree": {}
            },
            "offset": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "offset",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "title": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "title",
                "excludes": {},
                "description": "Titles for yAxes are taken from\n[xAxis.categories](#xAxis.categories). All options for `xAxis.labels`\napplies to parallel coordinates titles. For example, to style\ncategories, use [xAxis.labels.style](#xAxis.labels.style)."
              },
              "subtree": {
                "reserveSpace": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "reserveSpace",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "text": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "text",
                    "excludes": {},
                    "default": ""
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "parallelCoordinates": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "parallelCoordinates",
            "excludes": {},
            "default": false,
            "products": {
              "highcharts": 1
            },
            "description": "Flag to render charts as a parallel coordinates plot. In a parallel\ncoordinates plot (||-coords) by default all required yAxes are generated\nand the legend is disabled. This feature requires\n`modules/parallel-coordinates.js`."
          },
          "subtree": {}
        },
        "pinchType": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "pinchType",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Equivalent to [zoomType](#chart.zoomType), but for multitouch\ngestures only. By default, the `pinchType` is the same as the\n`zoomType` setting. However, pinching can be enabled separately in\nsome cases, for example in stock charts where a mouse drag pans the\nchart, while pinching is enabled. When [tooltip.followTouchMove](#tooltip.followTouchMove) is true, pinchType only applies to\ntwo-finger touches."
          },
          "subtree": {}
        },
        "plotBackgroundColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "plotBackgroundColor",
            "excludes": {},
            "description": "The background color or gradient for the plot area."
          },
          "subtree": {}
        },
        "plotBackgroundImage": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "plotBackgroundImage",
            "excludes": {},
            "description": "The URL for an image to use as the plot background. To set an image\nas the background for the entire chart, set a CSS background image\nto the container element. Note that for the image to be applied to\nexported charts, its URL needs to be accessible by the export server."
          },
          "subtree": {}
        },
        "plotBorderColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "plotBorderColor",
            "excludes": {},
            "default": "#cccccc",
            "description": "The color of the inner chart or plot area border."
          },
          "subtree": {}
        },
        "plotBorderWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "plotBorderWidth",
            "excludes": {},
            "default": "0",
            "description": "The pixel width of the plot area border."
          },
          "subtree": {}
        },
        "plotShadow": {
          "meta": {
            "types": {
              "boolean": 1,
              "highcharts.cssobject": 1
            },
            "name": "plotShadow",
            "excludes": {},
            "default": "false",
            "description": "Whether to apply a drop shadow to the plot area. Requires that\nplotBackgroundColor be set. The shadow can be an object configuration\ncontaining `color`, `offsetX`, `offsetY`, `opacity` and `width`."
          },
          "subtree": {}
        },
        "polar": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "polar",
            "excludes": {},
            "default": "false",
            "products": {
              "highcharts": 1
            },
            "description": "When true, cartesian charts like line, spline, area and column are\ntransformed into the polar coordinate system. This produces _polar\ncharts_, also known as _radar charts_."
          },
          "subtree": {}
        },
        "reflow": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "reflow",
            "excludes": {},
            "default": "true",
            "description": "Whether to reflow the chart to fit the width of the container div\non resizing the window."
          },
          "subtree": {}
        },
        "renderTo": {
          "meta": {
            "types": {
              "string": 1,
              "highcharts.htmldomelement": 1
            },
            "name": "renderTo",
            "excludes": {},
            "description": "The HTML element where the chart will be rendered. If it is a string,\nthe element by that id is used. The HTML element can also be passed\nby direct reference, or as the first argument of the chart\nconstructor, in which case the option is not needed."
          },
          "subtree": {}
        },
        "resetZoomButton": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "resetZoomButton",
            "excludes": {},
            "description": "The button that appears after a selection zoom, allowing the user\nto reset zoom."
          },
          "subtree": {
            "position": {
              "meta": {
                "types": {
                  "highcharts.alignobject": 1
                },
                "name": "position",
                "excludes": {},
                "description": "The position of the button."
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "default": "right",
                    "description": "The horizontal alignment of the button."
                  },
                  "subtree": {}
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "highcharts.verticalalignvalue": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "top",
                    "description": "The vertical alignment of the button."
                  },
                  "subtree": {}
                },
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "default": -10,
                    "description": "The horizontal offset of the button."
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": 10,
                    "description": "The vertical offset of the button."
                  },
                  "subtree": {}
                }
              }
            },
            "relativeTo": {
              "meta": {
                "types": {
                  "highcharts.buttonrelativetovalue": 1
                },
                "name": "relativeTo",
                "excludes": {},
                "default": "plot",
                "description": "What frame the button placement should be related to. Can be\neither `plotBox` or `spacingBox`."
              },
              "subtree": {}
            },
            "theme": {
              "meta": {
                "types": {
                  "highcharts.svgattributes": 1
                },
                "name": "theme",
                "excludes": {},
                "description": "A collection of attributes for the button. The object takes SVG\nattributes like `fill`, `stroke`, `stroke-width` or `r`, the\nborder radius. The theme also supports `style`, a collection of\nCSS properties for the text. Equivalent attributes for the hover\nstate are given in `theme.states.hover`."
              },
              "subtree": {
                "zIndex": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "zIndex",
                    "excludes": {},
                    "default": 6
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "scrollablePlotArea": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "scrollablePlotArea",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "gantt": 1
            },
            "description": "Options for a scrollable plot area. This feature provides a minimum size for\nthe plot area of the chart. If the size gets smaller than this, typically\non mobile devices, a native browser scrollbar is presented. This scrollbar\nprovides smooth scrolling for the contents of the plot area, whereas the\ntitle, legend and unaffected axes are fixed.\n\nSince v7.1.2, a scrollable plot area can be defined for either horizontal or\nvertical scrolling, depending on whether the `minWidth` or `minHeight`\noption is set."
          },
          "subtree": {
            "minHeight": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "minHeight",
                "excludes": {},
                "description": "The minimum height for the plot area. If it gets smaller than this, the plot\narea will become scrollable."
              },
              "subtree": {}
            },
            "minWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "minWidth",
                "excludes": {},
                "description": "The minimum width for the plot area. If it gets smaller than this, the plot\narea will become scrollable."
              },
              "subtree": {}
            },
            "opacity": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "opacity",
                "excludes": {},
                "default": "0.85",
                "description": "The opacity of mask applied on one of the sides of the plot\narea."
              },
              "subtree": {}
            },
            "scrollPositionX": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "scrollPositionX",
                "excludes": {},
                "description": "The initial scrolling position of the scrollable plot area. Ranges from 0 to\n1, where 0 aligns the plot area to the left and 1 aligns it to the right.\nTypically we would use 1 if the chart has right aligned Y axes."
              },
              "subtree": {}
            },
            "scrollPositionY": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "scrollPositionY",
                "excludes": {},
                "description": "The initial scrolling position of the scrollable plot area. Ranges from 0 to\n1, where 0 aligns the plot area to the top and 1 aligns it to the bottom."
              },
              "subtree": {}
            }
          }
        },
        "selectionMarkerFill": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "selectionMarkerFill",
            "excludes": {},
            "default": "rgba(51,92,173,0.25)",
            "description": "The background color of the marker square when selecting (zooming\nin on) an area of the chart."
          },
          "subtree": {}
        },
        "shadow": {
          "meta": {
            "types": {
              "boolean": 1,
              "highcharts.cssobject": 1
            },
            "name": "shadow",
            "excludes": {},
            "default": "false",
            "description": "Whether to apply a drop shadow to the outer chart area. Requires\nthat backgroundColor be set. The shadow can be an object\nconfiguration containing `color`, `offsetX`, `offsetY`, `opacity` and\n`width`."
          },
          "subtree": {}
        },
        "showAxes": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "showAxes",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "gantt": 1
            },
            "description": "Whether to show the axes initially. This only applies to empty charts\nwhere series are added dynamically, as axes are automatically added\nto cartesian series."
          },
          "subtree": {}
        },
        "spacing": {
          "meta": {
            "types": {
              "array": "number"
            },
            "name": "spacing",
            "excludes": {},
            "default": "[10, 10, 15, 10]",
            "description": "The distance between the outer edge of the chart and the content,\nlike title or legend, or axis title and labels if present. The\nnumbers in the array designate top, right, bottom and left\nrespectively. Use the options spacingTop, spacingRight, spacingBottom\nand spacingLeft options for shorthand setting of one option."
          },
          "subtree": {}
        },
        "spacingBottom": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "spacingBottom",
            "excludes": {},
            "default": "15",
            "description": "The space between the bottom edge of the chart and the content (plot\narea, axis title and labels, title, subtitle or legend in top\nposition)."
          },
          "subtree": {}
        },
        "spacingLeft": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "spacingLeft",
            "excludes": {},
            "default": "10",
            "description": "The space between the left edge of the chart and the content (plot\narea, axis title and labels, title, subtitle or legend in top\nposition)."
          },
          "subtree": {}
        },
        "spacingRight": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "spacingRight",
            "excludes": {},
            "default": "10",
            "description": "The space between the right edge of the chart and the content (plot\narea, axis title and labels, title, subtitle or legend in top\nposition)."
          },
          "subtree": {}
        },
        "spacingTop": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "spacingTop",
            "excludes": {},
            "default": "10",
            "description": "The space between the top edge of the chart and the content (plot\narea, axis title and labels, title, subtitle or legend in top\nposition)."
          },
          "subtree": {}
        },
        "style": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "style",
            "excludes": {},
            "default": "{\"fontFamily\": \"\\\"Lucida Grande\\\", \\\"Lucida Sans Unicode\\\", Verdana, Arial, Helvetica, sans-serif\",\"fontSize\":\"12px\"}",
            "description": "Additional CSS styles to apply inline to the container `div`. Note\nthat since the default font styles are applied in the renderer, it\nis ignorant of the individual chart options and must be set globally."
          },
          "subtree": {}
        },
        "styledMode": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "styledMode",
            "excludes": {},
            "default": "false",
            "description": "Whether to apply styled mode. When in styled mode, no presentational\nattributes or CSS are applied to the chart SVG. Instead, CSS rules\nare required to style the chart. The default style sheet is\navailable from `https://code.highcharts.com/css/highcharts.css`."
          },
          "subtree": {}
        },
        "type": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "type",
            "excludes": {},
            "description": "The default series type for the chart. Can be any of the chart types\nlisted under [plotOptions](#plotOptions) and [series](#series) or can\nbe a series provided by an additional module.\n\nIn TypeScript this option has no effect in sense of typing and\ninstead the `type` option must always be set in the series."
          },
          "subtree": {}
        },
        "width": {
          "meta": {
            "types": {
              "null": 1,
              "number": 1,
              "string": 1
            },
            "name": "width",
            "excludes": {},
            "default": null,
            "description": "An explicit width for the chart. By default (when `null`) the width\nis calculated from the offset width of the containing element."
          },
          "subtree": {}
        },
        "zoomKey": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "zoomKey",
            "excludes": {},
            "description": "Set a key to hold when dragging to zoom the chart. This is useful to avoid\nzooming while moving points. Should be set different than\n[chart.panKey](#chart.panKey)."
          },
          "subtree": {}
        },
        "zoomType": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "zoomType",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Decides in what dimensions the user can zoom by dragging the mouse.\nCan be one of `x`, `y` or `xy`."
          },
          "subtree": {}
        }
      }
    },
    "colorAxis": {
      "meta": {
        "types": {
          "*": 1,
          "array": "*"
        },
        "name": "colorAxis",
        "excludes": {},
        "products": {
          "highcharts": 1,
          "highstock": 1,
          "highmaps": 1
        },
        "description": "A color axis for series. Visually, the color\naxis will appear as a gradient or as separate items inside the\nlegend, depending on whether the axis is scalar or based on data\nclasses.\n\nFor supported color formats, see the\n[docs article about colors](https://www.highcharts.com/docs/chart-design-and-style/colors).\n\nA scalar color axis is represented by a gradient. The colors either\nrange between the [minColor](#colorAxis.minColor) and the\n[maxColor](#colorAxis.maxColor), or for more fine grained control the\ncolors can be defined in [stops](#colorAxis.stops). Often times, the\ncolor axis needs to be adjusted to get the right color spread for the\ndata. In addition to stops, consider using a logarithmic\n[axis type](#colorAxis.type), or setting [min](#colorAxis.min) and\n[max](#colorAxis.max) to avoid the colors being determined by\noutliers.\n\nWhen [dataClasses](#colorAxis.dataClasses) are used, the ranges are\nsubdivided into separate classes like categories based on their\nvalues. This can be used for ranges between two values, but also for\na true category. However, when your data is categorized, it may be as\nconvenient to add each category to a separate series.\n\nColor axis does not work with: `sankey`, `sunburst`, `dependencywheel`,\n`networkgraph`, `wordcloud`, `venn`, `gauge` and `solidgauge` series\ntypes.\n\nSince v7.2.0 `colorAxis` can also be an array of options objects.\n\nSee [the Axis object](/class-reference/Highcharts.Axis) for\nprogrammatic access to the axis.",
        "extends": "xAxis"
      },
      "subtree": {
        "allowDecimals": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "allowDecimals",
            "excludes": {},
            "default": "true",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "Whether to allow decimals on the color axis."
          },
          "subtree": {}
        },
        "dataClassColor": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "dataClassColor",
            "excludes": {},
            "default": "tween",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "Determines how to set each data class' color if no individual\ncolor is set. The default value, `tween`, computes intermediate\ncolors between `minColor` and `maxColor`. The other possible\nvalue, `category`, pulls colors from the global or chart specific\n[colors](#colors) array."
          },
          "subtree": {}
        },
        "dataClasses": {
          "meta": {
            "types": {
              "array": "*"
            },
            "name": "dataClasses",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "An array of data classes or ranges for the choropleth map. If\nnone given, the color axis is scalar and values are distributed\nas a gradient between the minimum and maximum colors."
          },
          "subtree": {
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "color",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "highmaps": 1
                },
                "description": "The color of each data class. If not set, the color is pulled\nfrom the global or chart-specific [colors](#colors) array. In\nstyled mode, this option is ignored. Instead, use colors defined\nin CSS."
              },
              "subtree": {}
            },
            "from": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "from",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "highmaps": 1
                },
                "description": "The start of the value range that the data class represents,\nrelating to the point value.\n\nThe range of each `dataClass` is closed in both ends, but can be\noverridden by the next `dataClass`."
              },
              "subtree": {}
            },
            "name": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "name",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "highmaps": 1
                },
                "description": "The name of the data class as it appears in the legend.\nIf no name is given, it is automatically created based on the\n`from` and `to` values. For full programmatic control,\n[legend.labelFormatter](#legend.labelFormatter) can be used.\nIn the formatter, `this.from` and `this.to` can be accessed."
              },
              "subtree": {}
            },
            "to": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "to",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "highmaps": 1
                },
                "description": "The end of the value range that the data class represents,\nrelating to the point value.\n\nThe range of each `dataClass` is closed in both ends, but can be\noverridden by the next `dataClass`."
              },
              "subtree": {}
            }
          }
        },
        "endOnTick": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "endOnTick",
            "excludes": {},
            "default": true,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "Whether to force the axis to end on a tick. Use this option with\nthe [maxPadding](#colorAxis.maxPadding) option to control the\naxis end."
          },
          "subtree": {}
        },
        "events": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "events",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            }
          },
          "subtree": {
            "legendItemClick": {
              "meta": {
                "types": {
                  "function": 1
                },
                "name": "legendItemClick",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "highmaps": 1
                },
                "description": "Fires when the legend item belonging to the colorAxis is clicked.\nOne parameter, `event`, is passed to the function."
              },
              "subtree": {}
            }
          }
        },
        "gridLineColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "gridLineColor",
            "excludes": {},
            "default": "#e6e6e6",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "Color of the grid lines extending from the axis across the\ngradient."
          },
          "subtree": {}
        },
        "gridLineWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "gridLineWidth",
            "excludes": {},
            "default": 1,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "The width of the grid lines extending from the axis across the\ngradient of a scalar color axis."
          },
          "subtree": {}
        },
        "labels": {
          "meta": {
            "types": {},
            "name": "labels",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "The axis labels show the number for each tick.\n\nFor more live examples on label options, see [xAxis.labels in the\nHighcharts API.](/highcharts#xAxis.labels)",
            "extends": "xAxis.labels"
          },
          "subtree": {
            "overflow": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "overflow",
                "excludes": {},
                "default": "justify",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "highmaps": 1
                },
                "description": "How to handle overflowing labels on horizontal color axis.\nCan be undefined or \"justify\". If \"justify\", labels will not\nrender outside the legend area. If there is room to move it,\nit will be aligned to the edge, else it will be removed."
              },
              "subtree": {}
            },
            "rotation": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "rotation",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            }
          }
        },
        "layout": {
          "meta": {
            "types": {
              "string": 1,
              "undefined": 1
            },
            "name": "layout",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "The layout of the color axis. Can be `'horizontal'` or `'vertical'`.\nIf none given, the color axis has the same layout as the legend."
          },
          "subtree": {}
        },
        "marker": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "marker",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "The triangular marker on a scalar color axis that points to the\nvalue of the hovered area. To disable the marker, set\n`marker: null`."
          },
          "subtree": {
            "animation": {
              "meta": {
                "types": {
                  "boolean": 1,
                  "highcharts.animationoptionsobject": 1
                },
                "name": "animation",
                "excludes": {},
                "default": "{\"duration\": 50}",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "highmaps": 1
                },
                "description": "Animation for the marker as it moves between values. Set to\n`false` to disable animation. Defaults to `{ duration: 50 }`."
              },
              "subtree": {}
            },
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "color",
                "excludes": {},
                "default": "#999999",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "highmaps": 1
                },
                "description": "The color of the marker."
              },
              "subtree": {}
            }
          }
        },
        "max": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "max",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "The maximum value of the axis in terms of map point values. If\n`null`, the max value is automatically calculated. If the\n`endOnTick` option is true, the max value might be rounded up."
          },
          "subtree": {}
        },
        "maxColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "maxColor",
            "excludes": {},
            "default": "#003399",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "The color to represent the maximum of the color axis. Unless\n[dataClasses](#colorAxis.dataClasses) or\n[stops](#colorAxis.stops) are set, the gradient ends at this\nvalue.\n\nIf dataClasses are set, the color is based on minColor and\nmaxColor unless a color is set for each data class, or the\n[dataClassColor](#colorAxis.dataClassColor) is set."
          },
          "subtree": {}
        },
        "maxPadding": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "maxPadding",
            "excludes": {},
            "default": 0,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "Padding of the max value relative to the length of the axis. A\npadding of 0.05 will make a 100px axis 5px longer."
          },
          "subtree": {}
        },
        "min": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "min",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "The minimum value of the axis in terms of map point values. If\n`null`, the min value is automatically calculated. If the\n`startOnTick` option is true, the min value might be rounded\ndown."
          },
          "subtree": {}
        },
        "minColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "minColor",
            "excludes": {},
            "default": "#e6ebf5",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "The color to represent the minimum of the color axis. Unless\n[dataClasses](#colorAxis.dataClasses) or\n[stops](#colorAxis.stops) are set, the gradient starts at this\nvalue.\n\nIf dataClasses are set, the color is based on minColor and\nmaxColor unless a color is set for each data class, or the\n[dataClassColor](#colorAxis.dataClassColor) is set."
          },
          "subtree": {}
        },
        "minPadding": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "minPadding",
            "excludes": {},
            "default": 0,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "Padding of the min value relative to the length of the axis. A\npadding of 0.05 will make a 100px axis 5px longer."
          },
          "subtree": {}
        },
        "reversed": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "reversed",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "Whether to reverse the axis so that the highest number is closest\nto the origin. Defaults to `false` in a horizontal legend and\n`true` in a vertical legend, where the smallest value starts on\ntop."
          },
          "subtree": {}
        },
        "showInLegend": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "showInLegend",
            "excludes": {},
            "default": true,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "Whether to display the colorAxis in the legend."
          },
          "subtree": {}
        },
        "startOnTick": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "startOnTick",
            "excludes": {},
            "default": true,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "Whether to force the axis to start on a tick. Use this option\nwith the `maxPadding` option to control the axis start."
          },
          "subtree": {}
        },
        "stops": {
          "meta": {
            "types": {
              "array": "Array.<number, Highcharts.ColorString"
            },
            "name": "stops",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "Color stops for the gradient of a scalar color axis. Use this in\ncases where a linear gradient between a `minColor` and `maxColor`\nis not sufficient. The stops is an array of tuples, where the\nfirst item is a float between 0 and 1 assigning the relative\nposition in the gradient, and the second item is the color."
          },
          "subtree": {}
        },
        "tickInterval": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "tickInterval",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "The interval of the tick marks in axis units. When `null`, the\ntick interval is computed to approximately follow the\n`tickPixelInterval`."
          },
          "subtree": {}
        },
        "tickLength": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "tickLength",
            "excludes": {},
            "default": 5,
            "description": "The pixel length of the main tick marks on the color axis."
          },
          "subtree": {}
        },
        "tickPixelInterval": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "tickPixelInterval",
            "excludes": {},
            "default": 72,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "If [tickInterval](#colorAxis.tickInterval) is `null` this option\nsets the approximate pixel interval of the tick marks."
          },
          "subtree": {}
        },
        "type": {
          "meta": {
            "types": {
              "highcharts.coloraxistypevalue": 1
            },
            "name": "type",
            "excludes": {},
            "default": "linear",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "The type of interpolation to use for the color axis. Can be\n`linear` or `logarithmic`."
          },
          "subtree": {}
        }
      }
    },
    "colors": {
      "meta": {
        "types": {
          "array": "Highcharts.ColorString"
        },
        "name": "colors",
        "excludes": {},
        "default": "[\"#7cb5ec\", \"#434348\", \"#90ed7d\", \"#f7a35c\", \"#8085e9\",\n         \"#f15c80\", \"#e4d354\", \"#2b908f\", \"#f45b5b\", \"#91e8e1\"]",
        "description": "An array containing the default colors for the chart's series. When\nall colors are used, new colors are pulled from the start again.\n\nDefault colors can also be set on a series or series.type basis,\nsee [column.colors](#plotOptions.column.colors),\n[pie.colors](#plotOptions.pie.colors).\n\nIn styled mode, the colors option doesn't exist. Instead, colors\nare defined in CSS and applied either through series or point class\nnames, or through the [chart.colorCount](#chart.colorCount) option.\n\n\n### Legacy\n\nIn Highcharts 3.x, the default colors were:\n\n<pre>colors: ['#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce',\n    '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a']</pre>\n\nIn Highcharts 2.x, the default colors were:\n\n<pre>colors: ['#4572A7', '#AA4643', '#89A54E', '#80699B', '#3D96AE',\n   '#DB843D', '#92A8CD', '#A47D7C', '#B5CA92']</pre>"
      },
      "subtree": {}
    },
    "connectors": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "connectors",
        "excludes": {},
        "products": {
          "gantt": 1
        },
        "description": "The Pathfinder module allows you to define connections between any two\npoints, represented as lines - optionally with markers for the start\nand/or end points. Multiple algorithms are available for calculating how\nthe connecting lines are drawn.\n\nConnector functionality requires Highcharts Gantt to be loaded. In Gantt\ncharts, the connectors are used to draw dependencies between tasks."
      },
      "subtree": {
        "algorithmMargin": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "algorithmMargin",
            "excludes": {},
            "description": "Set the default pathfinder margin to use, in pixels. Some Pathfinder\nalgorithms attempt to avoid obstacles, such as other points in the\nchart. These algorithms use this margin to determine how close lines\ncan be to an obstacle. The default is to compute this automatically\nfrom the size of the obstacles in the chart.\n\nTo draw connecting lines close to existing points, set this to a low\nnumber. For more space around existing points, set this number\nhigher."
          },
          "subtree": {}
        },
        "dashStyle": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "dashStyle",
            "excludes": {},
            "default": "solid",
            "description": "Set the default dash style for this chart's connecting lines."
          },
          "subtree": {}
        },
        "enabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enabled",
            "excludes": {},
            "default": "true",
            "description": "Enable connectors for this chart. Requires Highcharts Gantt."
          },
          "subtree": {}
        },
        "endMarker": {
          "meta": {
            "types": {},
            "name": "endMarker",
            "excludes": {},
            "description": "Marker options specific to the end markers for this chart's\nPathfinder connectors. Overrides the generic marker options.",
            "extends": "connectors.marker"
          },
          "subtree": {
            "symbol": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "symbol",
                "excludes": {},
                "default": "arrow-filled",
                "description": "Set the symbol of the connector end markers."
              },
              "subtree": {}
            }
          }
        },
        "lineColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1
            },
            "name": "lineColor",
            "excludes": {},
            "description": "Set the default color for this chart's Pathfinder connecting lines.\nDefaults to the color of the point being connected."
          },
          "subtree": {}
        },
        "lineWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "lineWidth",
            "excludes": {},
            "default": 1,
            "description": "Set the default pixel width for this chart's Pathfinder connecting\nlines."
          },
          "subtree": {}
        },
        "marker": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "marker",
            "excludes": {},
            "description": "Marker options for this chart's Pathfinder connectors. Note that\nthis option is overridden by the `startMarker` and `endMarker`\noptions."
          },
          "subtree": {
            "align": {
              "meta": {
                "types": {
                  "highcharts.alignvalue": 1
                },
                "name": "align",
                "excludes": {},
                "default": "center",
                "description": "Horizontal alignment of the markers relative to the points."
              },
              "subtree": {}
            },
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "color",
                "excludes": {},
                "description": "Set the color of the connector markers. By default this is the\nsame as the connector color."
              },
              "subtree": {}
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": false,
                "description": "Enable markers for the connectors."
              },
              "subtree": {}
            },
            "height": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "height",
                "excludes": {},
                "description": "Set the height of the connector markers. If not supplied, this\nis inferred from the marker radius."
              },
              "subtree": {}
            },
            "inside": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "inside",
                "excludes": {},
                "default": false,
                "description": "Whether or not to draw the markers inside the points."
              },
              "subtree": {}
            },
            "lineColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "lineColor",
                "excludes": {},
                "description": "Set the line/border color of the connector markers. By default\nthis is the same as the marker color."
              },
              "subtree": {}
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 1,
                "description": "Set the line/border width of the pathfinder markers."
              },
              "subtree": {}
            },
            "radius": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "radius",
                "excludes": {},
                "description": "Set the radius of the connector markers. The default is\nautomatically computed based on the algorithmMargin setting.\n\nSetting marker.width and marker.height will override this\nsetting."
              },
              "subtree": {}
            },
            "verticalAlign": {
              "meta": {
                "types": {
                  "highcharts.verticalalignvalue": 1
                },
                "name": "verticalAlign",
                "excludes": {},
                "default": "middle",
                "description": "Vertical alignment of the markers relative to the points."
              },
              "subtree": {}
            },
            "width": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "width",
                "excludes": {},
                "description": "Set the width of the connector markers. If not supplied, this\nis inferred from the marker radius."
              },
              "subtree": {}
            }
          }
        },
        "startMarker": {
          "meta": {
            "types": {},
            "name": "startMarker",
            "excludes": {},
            "description": "Marker options specific to the start markers for this chart's\nPathfinder connectors. Overrides the generic marker options.",
            "extends": "connectors.marker"
          },
          "subtree": {
            "symbol": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "symbol",
                "excludes": {},
                "default": "diamond",
                "description": "Set the symbol of the connector start markers."
              },
              "subtree": {}
            }
          }
        },
        "type": {
          "meta": {
            "types": {
              "highcharts.pathfindertypevalue": 1
            },
            "name": "type",
            "excludes": {},
            "default": "undefined",
            "description": "Set the default pathfinder algorithm to use for this chart. It is\npossible to define your own algorithms by adding them to the\nHighcharts.Pathfinder.prototype.algorithms object before the chart\nhas been created.\n\nThe default algorithms are as follows:\n\n`straight`:      Draws a straight line between the connecting\n                 points. Does not avoid other points when drawing.\n\n`simpleConnect`: Finds a path between the points using right angles\n                 only. Takes only starting/ending points into\n                 account, and will not avoid other points.\n\n`fastAvoid`:     Finds a path between the points using right angles\n                 only. Will attempt to avoid other points, but its\n                 focus is performance over accuracy. Works well with\n                 less dense datasets.\n\nDefault value: `straight` is used as default for most series types,\nwhile `simpleConnect` is used as default for Gantt series, to show\ndependencies between points."
          },
          "subtree": {}
        }
      }
    },
    "credits": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "credits",
        "excludes": {},
        "description": "Highchart by default puts a credits label in the lower right corner\nof the chart. This can be changed using these options."
      },
      "subtree": {
        "enabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enabled",
            "excludes": {},
            "default": true,
            "description": "Whether to show the credits text."
          },
          "subtree": {}
        },
        "href": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "href",
            "excludes": {},
            "default": "https://www.highcharts.com?credits",
            "description": "The URL for the credits label."
          },
          "subtree": {}
        },
        "mapText": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "mapText",
            "excludes": {},
            "default": "\\u00a9 <a href=\"{geojson.copyrightUrl}\">{geojson.copyrightShort}</a>",
            "products": {
              "highmaps": 1
            },
            "description": "Credits for map source to be concatenated with conventional credit\ntext. By default this is a format string that collects copyright\ninformation from the map if available."
          },
          "subtree": {}
        },
        "mapTextFull": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "mapTextFull",
            "excludes": {},
            "default": "{geojson.copyright}",
            "products": {
              "highmaps": 1
            },
            "description": "Detailed credits for map source to be displayed on hover of credits\ntext. By default this is a format string that collects copyright\ninformation from the map if available."
          },
          "subtree": {}
        },
        "position": {
          "meta": {
            "types": {
              "highcharts.alignobject": 1
            },
            "name": "position",
            "excludes": {},
            "description": "Position configuration for the credits label."
          },
          "subtree": {
            "align": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "align",
                "excludes": {},
                "default": "right"
              },
              "subtree": {}
            },
            "verticalAlign": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "verticalAlign",
                "excludes": {},
                "default": "bottom"
              },
              "subtree": {}
            },
            "x": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "x",
                "excludes": {},
                "default": -10
              },
              "subtree": {}
            },
            "y": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "y",
                "excludes": {},
                "default": -5
              },
              "subtree": {}
            }
          }
        },
        "style": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "style",
            "excludes": {},
            "default": "{\"cursor\": \"pointer\", \"color\": \"#999999\", \"fontSize\": \"10px\"}",
            "description": "CSS styles for the credits label."
          },
          "subtree": {}
        },
        "text": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "text",
            "excludes": {},
            "default": "Highcharts.com",
            "description": "The text for the credits label."
          },
          "subtree": {}
        }
      }
    },
    "defs": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "defs",
        "excludes": {},
        "description": "Styled mode only. Configuration object for adding SVG definitions for\nreusable elements. See [gradients, shadows and\npatterns](https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns)\nfor more information and code examples."
      },
      "subtree": {}
    },
    "drilldown": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "drilldown",
        "excludes": {},
        "products": {
          "highcharts": 1,
          "highmaps": 1
        },
        "description": "Options for drill down, the concept of inspecting increasingly high\nresolution data through clicking on chart items like columns or pie slices.\n\nThe drilldown feature requires the drilldown.js file to be loaded,\nfound in the modules directory of the download package, or online at\n[code.highcharts.com/modules/drilldown.js](code.highcharts.com/modules/drilldown.js)."
      },
      "subtree": {
        "activeAxisLabelStyle": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "activeAxisLabelStyle",
            "excludes": {},
            "default": "{ \"cursor\": \"pointer\", \"color\": \"#003399\", \"fontWeight\": \"bold\", \"textDecoration\": \"underline\" }",
            "products": {
              "highcharts": 1,
              "highmaps": 1
            },
            "description": "Additional styles to apply to the X axis label for a point that\nhas drilldown data. By default it is underlined and blue to invite\nto interaction.\n\nIn styled mode, active label styles can be set with the\n`.highcharts-drilldown-axis-label` class."
          },
          "subtree": {}
        },
        "activeDataLabelStyle": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "activeDataLabelStyle",
            "excludes": {},
            "default": "{ \"cursor\": \"pointer\", \"color\": \"#003399\", \"fontWeight\": \"bold\", \"textDecoration\": \"underline\" }",
            "products": {
              "highcharts": 1,
              "highmaps": 1
            },
            "description": "Additional styles to apply to the data label of a point that has\ndrilldown data. By default it is underlined and blue to invite to\ninteraction.\n\nIn styled mode, active data label styles can be applied with the\n`.highcharts-drilldown-data-label` class."
          },
          "subtree": {
            "color": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "color",
                "excludes": {},
                "default": "#003399"
              },
              "subtree": {}
            },
            "cursor": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "cursor",
                "excludes": {},
                "default": "pointer"
              },
              "subtree": {}
            },
            "fontWeight": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "fontWeight",
                "excludes": {},
                "default": "bold"
              },
              "subtree": {}
            },
            "textDecoration": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "textDecoration",
                "excludes": {},
                "default": "underline"
              },
              "subtree": {}
            }
          }
        },
        "allowPointDrilldown": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "allowPointDrilldown",
            "excludes": {},
            "default": "true",
            "products": {
              "highcharts": 1
            },
            "description": "When this option is false, clicking a single point will drill down\nall points in the same category, equivalent to clicking the X axis\nlabel."
          },
          "subtree": {}
        },
        "animation": {
          "meta": {
            "types": {
              "boolean": 1,
              "highcharts.animationoptionsobject": 1
            },
            "name": "animation",
            "excludes": {},
            "default": "{ \"duration\": 500 }",
            "products": {
              "highcharts": 1,
              "highmaps": 1
            },
            "description": "Set the animation for all drilldown animations. Animation of a drilldown\noccurs when drilling between a column point and a column series,\nor a pie slice and a full pie series. Drilldown can still be used\nbetween series and points of different types, but animation will\nnot occur.\n\nThe animation can either be set as a boolean or a configuration\nobject. If `true`, it will use the 'swing' jQuery easing and a duration\nof 500 ms. If used as a configuration object, the following properties\nare supported:\n\n- `duration`: The duration of the animation in milliseconds.\n\n- `easing`: A string reference to an easing function set on the `Math`\n  object. See\n  [the easing demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/)."
          },
          "subtree": {}
        },
        "drillUpButton": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "drillUpButton",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highmaps": 1
            },
            "description": "Options for the drill up button that appears when drilling down on a\nseries. The text for the button is defined in\n[lang.drillUpText](#lang.drillUpText)."
          },
          "subtree": {
            "position": {
              "meta": {
                "types": {
                  "highcharts.alignobject": 1
                },
                "name": "position",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highmaps": 1
                },
                "description": "Positioning options for the button within the `relativeTo` box.\nAvailable properties are `x`, `y`, `align` and `verticalAlign`."
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "highcharts.alignvalue": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "default": "right",
                    "description": "Horizontal alignment."
                  },
                  "subtree": {}
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "highcharts.verticalalignvalue": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "top",
                    "products": {
                      "highcharts": 1,
                      "highmaps": 1
                    },
                    "description": "Vertical alignment of the button."
                  },
                  "subtree": {}
                },
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "default": -10,
                    "description": "The X offset of the button."
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": 10,
                    "description": "The Y offset of the button."
                  },
                  "subtree": {}
                }
              }
            },
            "relativeTo": {
              "meta": {
                "types": {
                  "highcharts.buttonrelativetovalue": 1
                },
                "name": "relativeTo",
                "excludes": {},
                "default": "plotBox",
                "products": {
                  "highcharts": 1,
                  "highmaps": 1
                },
                "description": "What box to align the button to. Can be either `plotBox` or\n`spacingBox`."
              },
              "subtree": {}
            },
            "theme": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "theme",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highmaps": 1
                },
                "description": "A collection of attributes for the button. The object takes SVG\nattributes like `fill`, `stroke`, `stroke-width` or `r`, the border\nradius. The theme also supports `style`, a collection of CSS\nproperties for the text. Equivalent attributes for the hover state\nare given in `theme.states.hover`.\n\nIn styled mode, drill-up button styles can be applied with the\n`.highcharts-drillup-button` class."
              },
              "subtree": {}
            }
          }
        },
        "series": {
          "meta": {
            "types": {
              "array": "Highcharts.SeriesOptionsType"
            },
            "name": "series",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highmaps": 1
            },
            "description": "An array of series configurations for the drill down. Each series\nconfiguration uses the same syntax as the [series](#series) option set.\nThese drilldown series are hidden by default. The drilldown series is\nlinked to the parent series' point by its `id`."
          },
          "subtree": {}
        }
      }
    },
    "exporting": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "exporting",
        "excludes": {},
        "description": "Options for the exporting module. For an overview on the matter, see\n[the docs](https://www.highcharts.com/docs/export-module/export-module-overview)."
      },
      "subtree": {
        "accessibility": {
          "meta": {
            "types": {
              "object": 1
            },
            "name": "accessibility",
            "excludes": {},
            "description": "Accessibility options for the exporting menu. Requires the\nAccessibility module."
          },
          "subtree": {
            "enabled": {
              "meta": {
                "types": {},
                "name": "enabled",
                "excludes": {},
                "description": "Enable accessibility support for the export menu."
              },
              "subtree": {}
            }
          }
        },
        "allowHTML": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "allowHTML",
            "excludes": {},
            "default": "false",
            "description": "Experimental setting to allow HTML inside the chart (added through\nthe `useHTML` options), directly in the exported image. This allows\nyou to preserve complicated HTML structures like tables or bi-directional\ntext in exported charts.\n\nDisclaimer: The HTML is rendered in a `foreignObject` tag in the\ngenerated SVG. The official export server is based on PhantomJS,\nwhich supports this, but other SVG clients, like Batik, does not\nsupport it. This also applies to downloaded SVG that you want to\nopen in a desktop client."
          },
          "subtree": {}
        },
        "buttons": {
          "meta": {
            "types": {
              "highcharts.dictionary.<highcharts.exportingbuttonscontextbuttonoptions>": 1
            },
            "name": "buttons",
            "excludes": {},
            "description": "Options for the export related buttons, print and export. In addition\nto the default buttons listed here, custom buttons can be added.\nSee [navigation.buttonOptions](#navigation.buttonOptions) for general\noptions."
          },
          "subtree": {
            "contextButton": {
              "meta": {
                "types": {},
                "name": "contextButton",
                "excludes": {},
                "description": "Options for the export button.\n\nIn styled mode, export button styles can be applied with the\n`.highcharts-contextbutton` class.",
                "extends": "navigation.buttonOptions"
              },
              "subtree": {
                "_titleKey": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "_titleKey",
                    "excludes": {},
                    "description": "This option is deprecated, use\n[titleKey](#exporting.buttons.contextButton.titleKey) instead."
                  },
                  "subtree": {}
                },
                "className": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "className",
                    "excludes": {},
                    "default": "highcharts-contextbutton",
                    "description": "The class name of the context button."
                  },
                  "subtree": {}
                },
                "menuClassName": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "menuClassName",
                    "excludes": {},
                    "default": "highcharts-contextmenu",
                    "description": "The class name of the menu appearing from the button."
                  },
                  "subtree": {}
                },
                "menuItems": {
                  "meta": {
                    "types": {
                      "array": "string"
                    },
                    "name": "menuItems",
                    "excludes": {},
                    "default": "[\"viewFullscreen\", \"printChart\", \"separator\", \"downloadPNG\", \"downloadJPEG\", \"downloadPDF\", \"downloadSVG\"]",
                    "description": "A collection of strings pointing to config options for the menu\nitems. The config options are defined in the\n`menuItemDefinitions` option.\n\nBy default, there is the \"View in full screen\" and \"Print\" menu\nitems, plus one menu item for each of the available export types."
                  },
                  "subtree": {}
                },
                "onclick": {
                  "meta": {
                    "types": {
                      "function": 1
                    },
                    "name": "onclick",
                    "excludes": {},
                    "description": "A click handler callback to use on the button directly instead of\nthe popup menu."
                  },
                  "subtree": {}
                },
                "symbol": {
                  "meta": {
                    "types": {
                      "highcharts.symbolkeyvalue": 1,
                      "\"exporticon\"": 1,
                      "\"menu\"": 1,
                      "\"menuball\"": 1,
                      "string": 1
                    },
                    "name": "symbol",
                    "excludes": {},
                    "default": "menu",
                    "description": "The symbol for the button. Points to a definition function in\nthe `Highcharts.Renderer.symbols` collection. The default\n`exportIcon` function is part of the exporting module. Possible\nvalues are \"circle\", \"square\", \"diamond\", \"triangle\",\n\"triangle-down\", \"menu\", \"menuball\" or custom shape."
                  },
                  "subtree": {}
                },
                "symbolFill": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1
                    },
                    "name": "symbolFill",
                    "excludes": {},
                    "default": "#666666",
                    "description": "See [navigation.buttonOptions.symbolFill](#navigation.buttonOptions.symbolFill)."
                  },
                  "subtree": {}
                },
                "titleKey": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "titleKey",
                    "excludes": {},
                    "default": "contextButtonTitle",
                    "description": "The key to a [lang](#lang) option setting that is used for the\nbutton's title tooltip. When the key is `contextButtonTitle`, it\nrefers to [lang.contextButtonTitle](#lang.contextButtonTitle)\nthat defaults to \"Chart context menu\"."
                  },
                  "subtree": {}
                },
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "default": "-10",
                    "description": "The horizontal position of the button relative to the `align`\noption."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "chartOptions": {
          "meta": {
            "types": {
              "highcharts.options": 1
            },
            "name": "chartOptions",
            "excludes": {},
            "description": "Additional chart options to be merged into the chart before exporting to\nan image format. This does not apply to printing the chart via the export\nmenu.\n\nFor example, a common use case is to add data labels to improve\nreadability of the exported chart, or to add a printer-friendly color\nscheme to exported PDFs."
          },
          "subtree": {}
        },
        "csv": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "csv",
            "excludes": {},
            "description": "Options for exporting data to CSV or ExCel, or displaying the data\nin a HTML table or a JavaScript structure.\n\nThis module adds data export options to the export menu and provides\nfunctions like `Chart.getCSV`, `Chart.getTable`, `Chart.getDataRows`\nand `Chart.viewData`.\n\nThe XLS converter is limited and only creates a HTML string that is\npassed for download, which works but creates a warning before\nopening. The workaround for this is to use a third party XLSX\nconverter, as demonstrated in the sample below."
          },
          "subtree": {
            "columnHeaderFormatter": {
              "meta": {
                "types": {
                  "function": 1,
                  "null": 1
                },
                "name": "columnHeaderFormatter",
                "excludes": {},
                "default": null,
                "description": "Formatter callback for the column headers. Parameters are:\n- `item` - The series or axis object)\n- `key` -  The point key, for example y or z\n- `keyLength` - The amount of value keys for this item, for\n  example a range series has the keys `low` and `high` so the\n  key length is 2.\n\nIf [useMultiLevelHeaders](#exporting.useMultiLevelHeaders) is\ntrue, columnHeaderFormatter by default returns an object with\ncolumnTitle and topLevelColumnTitle for each key. Columns with\nthe same topLevelColumnTitle have their titles merged into a\nsingle cell with colspan for table/Excel export.\n\nIf `useMultiLevelHeaders` is false, or for CSV export, it returns\nthe series name, followed by the key if there is more than one\nkey.\n\nFor the axis it returns the axis title or \"Category\" or\n\"DateTime\" by default.\n\nReturn `false` to use Highcharts' proposed header."
              },
              "subtree": {}
            },
            "dateFormat": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "dateFormat",
                "excludes": {},
                "default": "%Y-%m-%d %H:%M:%S",
                "description": "Which date format to use for exported dates on a datetime X axis.\nSee `Highcharts.dateFormat`."
              },
              "subtree": {}
            },
            "decimalPoint": {
              "meta": {
                "types": {
                  "string": 1,
                  "null": 1
                },
                "name": "decimalPoint",
                "excludes": {},
                "default": null,
                "description": "Which decimal point to use for exported CSV. Defaults to the same\nas the browser locale, typically `.` (English) or `,` (German,\nFrench etc)."
              },
              "subtree": {}
            },
            "itemDelimiter": {
              "meta": {
                "types": {
                  "string": 1,
                  "null": 1
                },
                "name": "itemDelimiter",
                "excludes": {},
                "default": null,
                "description": "The item delimiter in the exported data. Use `;` for direct\nexporting to Excel. Defaults to a best guess based on the browser\nlocale. If the locale _decimal point_ is `,`, the `itemDelimiter`\ndefaults to `;`, otherwise the `itemDelimiter` defaults to `,`."
              },
              "subtree": {}
            },
            "lineDelimiter": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "lineDelimiter",
                "excludes": {},
                "default": "\n",
                "description": "The line delimiter in the exported data, defaults to a newline."
              },
              "subtree": {}
            }
          }
        },
        "enabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enabled",
            "excludes": {},
            "default": "true",
            "description": "Whether to enable the exporting module. Disabling the module will\nhide the context button, but API methods will still be available."
          },
          "subtree": {}
        },
        "error": {
          "meta": {
            "types": {
              "highcharts.exportingerrorcallbackfunction": 1
            },
            "name": "error",
            "excludes": {},
            "description": "Function to call if the offline-exporting module fails to export\na chart on the client side, and [fallbackToExportServer](#exporting.fallbackToExportServer) is disabled. If left undefined, an\nexception is thrown instead. Receives two parameters, the exporting\noptions, and the error from the module."
          },
          "subtree": {}
        },
        "fallbackToExportServer": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "fallbackToExportServer",
            "excludes": {},
            "default": "true",
            "description": "Whether or not to fall back to the export server if the offline-exporting\nmodule is unable to export the chart on the client side. This happens for\ncertain browsers, and certain features (e.g.\n[allowHTML](#exporting.allowHTML)), depending on the image type exporting\nto. For very complex charts, it is possible that export can fail in\nbrowsers that don't support Blob objects, due to data URL length limits.\nIt is recommended to define the [exporting.error](#exporting.error)\nhandler if disabling fallback, in order to notify users in case export\nfails."
          },
          "subtree": {}
        },
        "filename": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "filename",
            "excludes": {},
            "default": "chart",
            "description": "The filename, without extension, to use for the exported chart."
          },
          "subtree": {}
        },
        "formAttributes": {
          "meta": {
            "types": {
              "highcharts.htmlattributes": 1
            },
            "name": "formAttributes",
            "excludes": {},
            "description": "An object containing additional key value data for the POST form that\nsends the SVG to the export server. For example, a `target` can be set to\nmake sure the generated image is received in another frame, or a custom\n`enctype` or `encoding` can be set."
          },
          "subtree": {}
        },
        "libURL": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "libURL",
            "excludes": {},
            "description": "Path where Highcharts will look for export module dependencies to\nload on demand if they don't already exist on `window`. Should currently\npoint to location of [CanVG](https://github.com/canvg/canvg) library,\n[RGBColor.js](https://github.com/canvg/canvg),\n[jsPDF](https://github.com/yWorks/jsPDF) and\n[svg2pdf.js](https://github.com/yWorks/svg2pdf.js), required for client\nside export in certain browsers."
          },
          "subtree": {}
        },
        "menuItemDefinitions": {
          "meta": {
            "types": {
              "highcharts.dictionary.<highcharts.exportingmenuobject>": 1
            },
            "name": "menuItemDefinitions",
            "excludes": {},
            "default": "{\"viewFullscreen\": {}, \"printChart\": {}, \"separator\": {}, \"downloadPNG\": {}, \"downloadJPEG\": {}, \"downloadPDF\": {}, \"downloadSVG\": {}}",
            "description": "An object consisting of definitions for the menu items in the context\nmenu. Each key value pair has a `key` that is referenced in the\n[menuItems](#exporting.buttons.contextButton.menuItems) setting,\nand a `value`, which is an object with the following properties:\n\n- **onclick:** The click handler for the menu item\n\n- **text:** The text for the menu item\n\n- **textKey:** If internationalization is required, the key to a language\n  string"
          },
          "subtree": {}
        },
        "printMaxWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "printMaxWidth",
            "excludes": {},
            "default": 780,
            "description": "When printing the chart from the menu item in the burger menu, if\nthe on-screen chart exceeds this width, it is resized. After printing\nor cancelled, it is restored. The default width makes the chart\nfit into typical paper format. Note that this does not affect the\nchart when printing the web page as a whole."
          },
          "subtree": {}
        },
        "scale": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "scale",
            "excludes": {},
            "default": 2,
            "description": "Defines the scale or zoom factor for the exported image compared\nto the on-screen display. While for instance a 600px wide chart\nmay look good on a website, it will look bad in print. The default\nscale of 2 makes this chart export to a 1200px PNG or JPG."
          },
          "subtree": {}
        },
        "showTable": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "showTable",
            "excludes": {},
            "default": false,
            "description": "Show a HTML table below the chart with the chart's current data."
          },
          "subtree": {}
        },
        "sourceHeight": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "sourceHeight",
            "excludes": {},
            "description": "Analogous to [sourceWidth](#exporting.sourceWidth)."
          },
          "subtree": {}
        },
        "sourceWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "sourceWidth",
            "excludes": {},
            "description": "The width of the original chart when exported, unless an explicit\n[chart.width](#chart.width) is set, or a pixel width is set on the\ncontainer. The width exported raster image is then multiplied by\n[scale](#exporting.scale)."
          },
          "subtree": {}
        },
        "tableCaption": {
          "meta": {
            "types": {
              "boolean": 1,
              "string": 1
            },
            "name": "tableCaption",
            "excludes": {},
            "description": "Caption for the data table. Same as chart title by default. Set to\n`false` to disable."
          },
          "subtree": {}
        },
        "type": {
          "meta": {
            "types": {
              "highcharts.exportingmimetypevalue": 1
            },
            "name": "type",
            "excludes": {},
            "default": "image/png",
            "description": "Default MIME type for exporting if `chart.exportChart()` is called\nwithout specifying a `type` option. Possible values are `image/png`,\n `image/jpeg`, `application/pdf` and `image/svg+xml`."
          },
          "subtree": {}
        },
        "url": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "url",
            "excludes": {},
            "default": "https://export.highcharts.com/",
            "description": "The URL for the server module converting the SVG string to an image\nformat. By default this points to Highchart's free web service."
          },
          "subtree": {}
        },
        "useMultiLevelHeaders": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "useMultiLevelHeaders",
            "excludes": {},
            "default": true,
            "description": "Use multi level headers in data table. If [csv.columnHeaderFormatter](#exporting.csv.columnHeaderFormatter) is defined, it has to return\nobjects in order for multi level headers to work."
          },
          "subtree": {}
        },
        "useRowspanHeaders": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "useRowspanHeaders",
            "excludes": {},
            "default": true,
            "description": "If using multi level table headers, use rowspans for headers that\nhave only one level."
          },
          "subtree": {}
        },
        "width": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "width",
            "excludes": {},
            "description": "The pixel width of charts exported to PNG or JPG. As of Highcharts\n3.0, the default pixel width is a function of the [chart.width](#chart.width) or [exporting.sourceWidth](#exporting.sourceWidth) and the\n[exporting.scale](#exporting.scale)."
          },
          "subtree": {}
        }
      }
    },
    "global": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "global",
        "excludes": {}
      },
      "subtree": {
        "Date": {
          "meta": {
            "types": {
              "function": 1
            },
            "name": "Date",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "This option is deprecated since v6.0.5. Instead, use\n[time.Date](#time.Date) that supports individual time settings\nper chart."
          },
          "subtree": {}
        },
        "VMLRadialGradientURL": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "VMLRadialGradientURL",
            "excludes": {},
            "description": "Path to the pattern image required by VML browsers in order to\ndraw radial gradients."
          },
          "subtree": {}
        },
        "canvasToolsURL": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "canvasToolsURL",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highmaps": 1
            },
            "description": "_Canvg rendering for Android 2.x is removed as of Highcharts 5.0\\.\nUse the [libURL](#exporting.libURL) option to configure exporting._\n\nThe URL to the additional file to lazy load for Android 2.x devices.\nThese devices don't support SVG, so we download a helper file that\ncontains [canvg](http://code.google.com/p/canvg/), its dependency\nrbcolor, and our own CanVG Renderer class. To avoid hotlinking to\nour site, you can install canvas-tools.js on your own server and\nchange this option accordingly."
          },
          "subtree": {}
        },
        "getTimezoneOffset": {
          "meta": {
            "types": {
              "function": 1
            },
            "name": "getTimezoneOffset",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "This option is deprecated since v6.0.5. Instead, use\n[time.getTimezoneOffset](#time.getTimezoneOffset) that supports\nindividual time settings per chart."
          },
          "subtree": {}
        },
        "timezone": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "timezone",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "This option is deprecated since v6.0.5. Instead, use\n[time.timezone](#time.timezone) that supports individual time\nsettings per chart."
          },
          "subtree": {}
        },
        "timezoneOffset": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "timezoneOffset",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "This option is deprecated since v6.0.5. Instead, use\n[time.timezoneOffset](#time.timezoneOffset) that supports individual\ntime settings per chart."
          },
          "subtree": {}
        },
        "useUTC": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "useUTC",
            "excludes": {},
            "description": "This option is deprecated since v6.0.5. Instead, use\n[time.useUTC](#time.useUTC) that supports individual time settings\nper chart."
          },
          "subtree": {}
        }
      }
    },
    "labels": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "labels",
        "excludes": {},
        "products": {
          "highcharts": 1,
          "highstock": 1
        },
        "description": "HTML labels that can be positioned anywhere in the chart area.\n\nThis option is deprecated since v7.1.2. Instead, use\n[annotations](#annotations) that support labels."
      },
      "subtree": {
        "items": {
          "meta": {
            "types": {
              "array": "*"
            },
            "name": "items",
            "excludes": {},
            "description": "An HTML label that can be positioned anywhere in the chart area."
          },
          "subtree": {
            "html": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "html",
                "excludes": {},
                "description": "Inner HTML or text for the label."
              },
              "subtree": {}
            },
            "style": {
              "meta": {
                "types": {
                  "highcharts.cssobject": 1
                },
                "name": "style",
                "excludes": {},
                "description": "CSS styles for each label. To position the label, use left and top\nlike this:\n\n<pre>style: {\n    left: '100px',\n    top: '100px'\n}</pre>"
              },
              "subtree": {}
            }
          }
        },
        "style": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "style",
            "excludes": {},
            "default": "{\"color\": \"#333333\", \"position\": \"absolute\"}",
            "description": "Shared CSS styles for all labels."
          },
          "subtree": {}
        }
      }
    },
    "lang": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "lang",
        "excludes": {},
        "description": "Language object. The language object is global and it can't be set\non each chart initialization. Instead, use `Highcharts.setOptions` to\nset it before any chart is initialized.\n\n<pre>Highcharts.setOptions({\n    lang: {\n        months: [\n            'Janvier', 'Février', 'Mars', 'Avril',\n            'Mai', 'Juin', 'Juillet', 'Août',\n            'Septembre', 'Octobre', 'Novembre', 'Décembre'\n        ],\n        weekdays: [\n            'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n            'Jeudi', 'Vendredi', 'Samedi'\n        ]\n    }\n});</pre>"
      },
      "subtree": {
        "accessibility": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "accessibility",
            "excludes": {},
            "description": "Configure the accessibility strings in the chart. Requires the\n[accessibility module](https://code.highcharts.com/modules/accessibility.js)\nto be loaded. For a description of the module and information on its\nfeatures, see\n[Highcharts Accessibility](https://www.highcharts.com/docs/chart-concepts/accessibility).\n\nFor more dynamic control over the accessibility functionality, see\n[accessibility.pointDescriptionFormatter](#accessibility.pointDescriptionFormatter),\n[accessibility.seriesDescriptionFormatter](#accessibility.seriesDescriptionFormatter),\nand\n[accessibility.screenReaderSectionFormatter](#accessibility.screenReaderSectionFormatter)."
          },
          "subtree": {
            "announceNewData": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "announceNewData",
                "excludes": {},
                "description": "Default announcement for new data in charts. If addPoint or\naddSeries is used, and only one series/point is added, the\n`newPointAnnounce` and `newSeriesAnnounce` strings are used.\nThe `...Single` versions will be used if there is only one chart\non the page, and the `...Multiple` versions will be used if there\nare multiple charts on the page. For all other new data events,\nthe `newDataAnnounce` string will be used."
              },
              "subtree": {
                "newDataAnnounce": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "newDataAnnounce",
                    "excludes": {},
                    "default": "Updated data for chart {chartTitle}"
                  },
                  "subtree": {}
                },
                "newPointAnnounceMultiple": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "newPointAnnounceMultiple",
                    "excludes": {},
                    "default": "New data point in chart {chartTitle}: {pointDesc}"
                  },
                  "subtree": {}
                },
                "newPointAnnounceSingle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "newPointAnnounceSingle",
                    "excludes": {},
                    "default": "New data point: {pointDesc}"
                  },
                  "subtree": {}
                },
                "newSeriesAnnounceMultiple": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "newSeriesAnnounceMultiple",
                    "excludes": {},
                    "default": "New data series in chart {chartTitle}: {seriesDesc}"
                  },
                  "subtree": {}
                },
                "newSeriesAnnounceSingle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "newSeriesAnnounceSingle",
                    "excludes": {},
                    "default": "New data series: {seriesDesc}"
                  },
                  "subtree": {}
                }
              }
            },
            "axis": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "axis",
                "excludes": {},
                "description": "Axis description format strings."
              },
              "subtree": {
                "rangeCategories": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "rangeCategories",
                    "excludes": {},
                    "default": "Range: {numCategories} categories."
                  },
                  "subtree": {}
                },
                "rangeFromTo": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "rangeFromTo",
                    "excludes": {},
                    "default": "Range: {rangeFrom} to {rangeTo}."
                  },
                  "subtree": {}
                },
                "timeRangeDays": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "timeRangeDays",
                    "excludes": {},
                    "default": "Range: {range} days."
                  },
                  "subtree": {}
                },
                "timeRangeHours": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "timeRangeHours",
                    "excludes": {},
                    "default": "Range: {range} hours."
                  },
                  "subtree": {}
                },
                "timeRangeMinutes": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "timeRangeMinutes",
                    "excludes": {},
                    "default": "Range: {range} minutes."
                  },
                  "subtree": {}
                },
                "timeRangeSeconds": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "timeRangeSeconds",
                    "excludes": {},
                    "default": "Range: {range} seconds."
                  },
                  "subtree": {}
                },
                "xAxisDescriptionPlural": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "xAxisDescriptionPlural",
                    "excludes": {},
                    "default": "The chart has {numAxes} X axes displaying {#each(names, -1), }and {names[-1]}."
                  },
                  "subtree": {}
                },
                "xAxisDescriptionSingular": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "xAxisDescriptionSingular",
                    "excludes": {},
                    "default": "The chart has 1 X axis displaying {names[0]}. {ranges[0]}"
                  },
                  "subtree": {}
                },
                "yAxisDescriptionPlural": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "yAxisDescriptionPlural",
                    "excludes": {},
                    "default": "The chart has {numAxes} Y axes displaying {#each(names, -1), }and {names[-1]}."
                  },
                  "subtree": {}
                },
                "yAxisDescriptionSingular": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "yAxisDescriptionSingular",
                    "excludes": {},
                    "default": "The chart has 1 Y axis displaying {names[0]}. {ranges[0]}"
                  },
                  "subtree": {}
                }
              }
            },
            "chartContainerLabel": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "chartContainerLabel",
                "excludes": {},
                "default": "{title}. Highcharts interactive chart."
              },
              "subtree": {}
            },
            "chartHeading": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "chartHeading",
                "excludes": {},
                "default": "Chart graphic."
              },
              "subtree": {}
            },
            "chartTypes": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "chartTypes",
                "excludes": {},
                "description": "Chart type description strings. This is added to the chart\ninformation region.\n\nIf there is only a single series type used in the chart, we use\nthe format string for the series type, or default if missing.\nThere is one format string for cases where there is only a single\nseries in the chart, and one for multiple series of the same\ntype."
              },
              "subtree": {
                "barMultiple": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "barMultiple",
                    "excludes": {},
                    "default": "Bar chart with {numSeries} data series."
                  },
                  "subtree": {}
                },
                "barSingle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "barSingle",
                    "excludes": {},
                    "default": "Bar chart with {numPoints} {#plural(numPoints, bars, bar)}."
                  },
                  "subtree": {}
                },
                "boxplotMultiple": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "boxplotMultiple",
                    "excludes": {},
                    "default": "Boxplot with {numSeries} data series."
                  },
                  "subtree": {}
                },
                "boxplotSingle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "boxplotSingle",
                    "excludes": {},
                    "default": "Boxplot with {numPoints} {#plural(numPoints, boxes, box)}."
                  },
                  "subtree": {}
                },
                "bubbleMultiple": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "bubbleMultiple",
                    "excludes": {},
                    "default": "Bubble chart with {numSeries} data series."
                  },
                  "subtree": {}
                },
                "bubbleSingle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "bubbleSingle",
                    "excludes": {},
                    "default": "Bubble chart with {numPoints} {#plural(numPoints, bubbles, bubble)}."
                  },
                  "subtree": {}
                },
                "columnMultiple": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "columnMultiple",
                    "excludes": {},
                    "default": "Bar chart with {numSeries} data series."
                  },
                  "subtree": {}
                },
                "columnSingle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "columnSingle",
                    "excludes": {},
                    "default": "Bar chart with {numPoints} {#plural(numPoints, bars, bar)}."
                  },
                  "subtree": {}
                },
                "combinationChart": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "combinationChart",
                    "excludes": {},
                    "default": "Combination chart with {numSeries} data series."
                  },
                  "subtree": {}
                },
                "defaultMultiple": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "defaultMultiple",
                    "excludes": {},
                    "default": "Chart with {numSeries} data series."
                  },
                  "subtree": {}
                },
                "defaultSingle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "defaultSingle",
                    "excludes": {},
                    "default": "Chart with {numPoints} data {#plural(numPoints, points, point)}."
                  },
                  "subtree": {}
                },
                "emptyChart": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "emptyChart",
                    "excludes": {},
                    "default": "Empty chart"
                  },
                  "subtree": {}
                },
                "lineMultiple": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "lineMultiple",
                    "excludes": {},
                    "default": "Line chart with {numSeries} lines."
                  },
                  "subtree": {}
                },
                "lineSingle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "lineSingle",
                    "excludes": {},
                    "default": "Line chart with {numPoints} data {#plural(numPoints, points, point)}."
                  },
                  "subtree": {}
                },
                "mapTypeDescription": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "mapTypeDescription",
                    "excludes": {},
                    "default": "Map of {mapTitle} with {numSeries} data series."
                  },
                  "subtree": {}
                },
                "pieMultiple": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pieMultiple",
                    "excludes": {},
                    "default": "Pie chart with {numSeries} pies."
                  },
                  "subtree": {}
                },
                "pieSingle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pieSingle",
                    "excludes": {},
                    "default": "Pie chart with {numPoints} {#plural(numPoints, slices, slice)}."
                  },
                  "subtree": {}
                },
                "scatterMultiple": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "scatterMultiple",
                    "excludes": {},
                    "default": "Scatter chart with {numSeries} data series."
                  },
                  "subtree": {}
                },
                "scatterSingle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "scatterSingle",
                    "excludes": {},
                    "default": "Scatter chart with {numPoints} {#plural(numPoints, points, point)}."
                  },
                  "subtree": {}
                },
                "splineMultiple": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "splineMultiple",
                    "excludes": {},
                    "default": "Line chart with {numSeries} lines."
                  },
                  "subtree": {}
                },
                "splineSingle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "splineSingle",
                    "excludes": {},
                    "default": "Line chart with {numPoints} data {#plural(numPoints, points, point)}."
                  },
                  "subtree": {}
                },
                "unknownMap": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "unknownMap",
                    "excludes": {},
                    "default": "Map of unspecified region with {numSeries} data series."
                  },
                  "subtree": {}
                }
              }
            },
            "credits": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "credits",
                "excludes": {},
                "default": "Chart credits: {creditsStr}"
              },
              "subtree": {}
            },
            "defaultChartTitle": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "defaultChartTitle",
                "excludes": {},
                "default": "Chart"
              },
              "subtree": {}
            },
            "drillUpButton": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "drillUpButton",
                "excludes": {},
                "default": "{buttonText}"
              },
              "subtree": {}
            },
            "exporting": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "exporting",
                "excludes": {},
                "description": "Exporting menu format strings for accessibility module."
              },
              "subtree": {
                "chartMenuLabel": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "chartMenuLabel",
                    "excludes": {},
                    "default": "Chart menu"
                  },
                  "subtree": {}
                },
                "exportRegionLabel": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "exportRegionLabel",
                    "excludes": {},
                    "default": "Chart menu"
                  },
                  "subtree": {}
                },
                "menuButtonLabel": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "menuButtonLabel",
                    "excludes": {},
                    "default": "View chart menu"
                  },
                  "subtree": {}
                }
              }
            },
            "legendItem": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "legendItem",
                "excludes": {},
                "default": "Toggle visibility of {itemName}"
              },
              "subtree": {}
            },
            "legendLabel": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "legendLabel",
                "excludes": {},
                "default": "Toggle series visibility"
              },
              "subtree": {}
            },
            "mapZoomIn": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "mapZoomIn",
                "excludes": {},
                "default": "Zoom chart"
              },
              "subtree": {}
            },
            "mapZoomOut": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "mapZoomOut",
                "excludes": {},
                "default": "Zoom out chart"
              },
              "subtree": {}
            },
            "rangeSelectorButton": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "rangeSelectorButton",
                "excludes": {},
                "default": "Select range {buttonText}"
              },
              "subtree": {}
            },
            "rangeSelectorMaxInput": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "rangeSelectorMaxInput",
                "excludes": {},
                "default": "Select end date."
              },
              "subtree": {}
            },
            "rangeSelectorMinInput": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "rangeSelectorMinInput",
                "excludes": {},
                "default": "Select start date."
              },
              "subtree": {}
            },
            "resetZoomButton": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "resetZoomButton",
                "excludes": {},
                "default": "Reset zoom"
              },
              "subtree": {}
            },
            "screenReaderRegionLabel": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "screenReaderRegionLabel",
                "excludes": {},
                "default": "Chart screen reader information."
              },
              "subtree": {}
            },
            "series": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "series",
                "excludes": {},
                "description": "Lang configuration for different series types. For more dynamic\ncontrol over the series element descriptions, see\n[accessibility.seriesDescriptionFormatter](#accessibility.seriesDescriptionFormatter)."
              },
              "subtree": {
                "description": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "description",
                    "excludes": {},
                    "default": "{description}",
                    "description": "User supplied description text. This is added after the main\nsummary if present."
                  },
                  "subtree": {}
                },
                "summary": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "summary",
                    "excludes": {},
                    "description": "Lang configuration for the series main summary. Each series\ntype has two modes:\n\n1. This series type is the only series type used in the\n   chart\n\n2. This is a combination chart with multiple series types\n\nIf a definition does not exist for the specific series type\nand mode, the 'default' lang definitions are used."
                  },
                  "subtree": {
                    "bar": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "bar",
                        "excludes": {},
                        "default": "{name}, bar series {ix} of {numSeries} with {numPoints} {#plural(numPoints, bars, bar)}."
                      },
                      "subtree": {}
                    },
                    "barCombination": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "barCombination",
                        "excludes": {},
                        "default": "{name}, series {ix} of {numSeries}. Bar series with {numPoints} {#plural(numPoints, bars, bar)}."
                      },
                      "subtree": {}
                    },
                    "boxplot": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "boxplot",
                        "excludes": {},
                        "default": "{name}, boxplot {ix} of {numSeries} with {numPoints} {#plural(numPoints, boxes, box)}."
                      },
                      "subtree": {}
                    },
                    "boxplotCombination": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "boxplotCombination",
                        "excludes": {},
                        "default": "{name}, series {ix} of {numSeries}. Boxplot with {numPoints} {#plural(numPoints, boxes, box)}."
                      },
                      "subtree": {}
                    },
                    "bubble": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "bubble",
                        "excludes": {},
                        "default": "{name}, bubble series {ix} of {numSeries} with {numPoints} {#plural(numPoints, bubbles, bubble)}."
                      },
                      "subtree": {}
                    },
                    "bubbleCombination": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "bubbleCombination",
                        "excludes": {},
                        "default": "{name}, series {ix} of {numSeries}. Bubble series with {numPoints} {#plural(numPoints, bubbles, bubble)}."
                      },
                      "subtree": {}
                    },
                    "column": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "column",
                        "excludes": {},
                        "default": "{name}, bar series {ix} of {numSeries} with {numPoints} {#plural(numPoints, bars, bar)}."
                      },
                      "subtree": {}
                    },
                    "columnCombination": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "columnCombination",
                        "excludes": {},
                        "default": "{name}, series {ix} of {numSeries}. Bar series with {numPoints} {#plural(numPoints, bars, bar)}."
                      },
                      "subtree": {}
                    },
                    "default": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "default",
                        "excludes": {},
                        "default": "{name}, series {ix} of {numSeries} with {numPoints} data {#plural(numPoints, points, point)}."
                      },
                      "subtree": {}
                    },
                    "defaultCombination": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "defaultCombination",
                        "excludes": {},
                        "default": "{name}, series {ix} of {numSeries} with {numPoints} data {#plural(numPoints, points, point)}."
                      },
                      "subtree": {}
                    },
                    "line": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "line",
                        "excludes": {},
                        "default": "{name}, line {ix} of {numSeries} with {numPoints} data {#plural(numPoints, points, point)}."
                      },
                      "subtree": {}
                    },
                    "lineCombination": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "lineCombination",
                        "excludes": {},
                        "default": "{name}, series {ix} of {numSeries}. Line with {numPoints} data {#plural(numPoints, points, point)}."
                      },
                      "subtree": {}
                    },
                    "map": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "map",
                        "excludes": {},
                        "default": "{name}, map {ix} of {numSeries} with {numPoints} {#plural(numPoints, areas, area)}."
                      },
                      "subtree": {}
                    },
                    "mapCombination": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "mapCombination",
                        "excludes": {},
                        "default": "{name}, series {ix} of {numSeries}. Map with {numPoints} {#plural(numPoints, areas, area)}."
                      },
                      "subtree": {}
                    },
                    "mapbubble": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "mapbubble",
                        "excludes": {},
                        "default": "{name}, bubble series {ix} of {numSeries} with {numPoints} {#plural(numPoints, bubbles, bubble)}."
                      },
                      "subtree": {}
                    },
                    "mapbubbleCombination": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "mapbubbleCombination",
                        "excludes": {},
                        "default": "{name}, series {ix} of {numSeries}. Bubble series with {numPoints} {#plural(numPoints, bubbles, bubble)}."
                      },
                      "subtree": {}
                    },
                    "mapline": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "mapline",
                        "excludes": {},
                        "default": "{name}, line {ix} of {numSeries} with {numPoints} data {#plural(numPoints, points, point)}."
                      },
                      "subtree": {}
                    },
                    "maplineCombination": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "maplineCombination",
                        "excludes": {},
                        "default": "{name}, series {ix} of {numSeries}. Line with {numPoints} data {#plural(numPoints, points, point)}."
                      },
                      "subtree": {}
                    },
                    "pie": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "pie",
                        "excludes": {},
                        "default": "{name}, pie {ix} of {numSeries} with {numPoints} {#plural(numPoints, slices, slice)}."
                      },
                      "subtree": {}
                    },
                    "pieCombination": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "pieCombination",
                        "excludes": {},
                        "default": "{name}, series {ix} of {numSeries}. Pie with {numPoints} {#plural(numPoints, slices, slice)}."
                      },
                      "subtree": {}
                    },
                    "scatter": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "scatter",
                        "excludes": {},
                        "default": "{name}, scatter plot {ix} of {numSeries} with {numPoints} {#plural(numPoints, points, point)}."
                      },
                      "subtree": {}
                    },
                    "scatterCombination": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "scatterCombination",
                        "excludes": {},
                        "default": "{name}, series {ix} of {numSeries}, scatter plot with {numPoints} {#plural(numPoints, points, point)}."
                      },
                      "subtree": {}
                    },
                    "spline": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "spline",
                        "excludes": {},
                        "default": "{name}, line {ix} of {numSeries} with {numPoints} data {#plural(numPoints, points, point)}."
                      },
                      "subtree": {}
                    },
                    "splineCombination": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "splineCombination",
                        "excludes": {},
                        "default": "{name}, series {ix} of {numSeries}. Line with {numPoints} data {#plural(numPoints, points, point)}."
                      },
                      "subtree": {}
                    }
                  }
                },
                "xAxisDescription": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "xAxisDescription",
                    "excludes": {},
                    "default": "X axis, {name}",
                    "description": "xAxis description for series if there are multiple xAxes in\nthe chart."
                  },
                  "subtree": {}
                },
                "yAxisDescription": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "yAxisDescription",
                    "excludes": {},
                    "default": "Y axis, {name}",
                    "description": "yAxis description for series if there are multiple yAxes in\nthe chart."
                  },
                  "subtree": {}
                }
              }
            },
            "seriesTypeDescriptions": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "seriesTypeDescriptions",
                "excludes": {},
                "description": "Descriptions of lesser known series types. The relevant\ndescription is added to the screen reader information region\nwhen these series types are used."
              },
              "subtree": {
                "arearange": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "arearange",
                    "excludes": {},
                    "default": "Arearange charts are line charts displaying a range between a lower and higher value for each point."
                  },
                  "subtree": {}
                },
                "areasplinerange": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "areasplinerange",
                    "excludes": {},
                    "default": "These charts are line charts displaying a range between a lower and higher value for each point."
                  },
                  "subtree": {}
                },
                "boxplot": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "boxplot",
                    "excludes": {},
                    "default": "Box plot charts are typically used to display groups of statistical data. Each data point in the chart can have up to 5 values: minimum, lower quartile, median, upper quartile, and maximum."
                  },
                  "subtree": {}
                },
                "bubble": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "bubble",
                    "excludes": {},
                    "default": "Bubble charts are scatter charts where each data point also has a size value."
                  },
                  "subtree": {}
                },
                "columnrange": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "columnrange",
                    "excludes": {},
                    "default": "Columnrange charts are column charts displaying a range between a lower and higher value for each point."
                  },
                  "subtree": {}
                },
                "errorbar": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "errorbar",
                    "excludes": {},
                    "default": "Errorbar series are used to display the variability of the data."
                  },
                  "subtree": {}
                },
                "funnel": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "funnel",
                    "excludes": {},
                    "default": "Funnel charts are used to display reduction of data in stages."
                  },
                  "subtree": {}
                },
                "pyramid": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pyramid",
                    "excludes": {},
                    "default": "Pyramid charts consist of a single pyramid with item heights corresponding to each point value."
                  },
                  "subtree": {}
                },
                "waterfall": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "waterfall",
                    "excludes": {},
                    "default": "A waterfall chart is a column chart where each column contributes towards a total end value."
                  },
                  "subtree": {}
                }
              }
            },
            "svgContainerEnd": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "svgContainerEnd",
                "excludes": {},
                "default": "End of interactive chart",
                "description": "Label for the end of the chart. Announced by screen readers."
              },
              "subtree": {}
            },
            "svgContainerLabel": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "svgContainerLabel",
                "excludes": {},
                "default": "Interactive chart"
              },
              "subtree": {}
            },
            "svgContainerTitle": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "svgContainerTitle",
                "excludes": {},
                "default": "",
                "description": "Title element text for the chart SVG element. Leave this\nempty to disable adding the title element. Browsers will display\nthis content when hovering over elements in the chart. Assistive\ntechnology may use this element to label the chart."
              },
              "subtree": {}
            },
            "tableSummary": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "tableSummary",
                "excludes": {},
                "default": "Table representation of chart."
              },
              "subtree": {}
            },
            "thousandsSep": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "thousandsSep",
                "excludes": {},
                "default": ",",
                "description": "Thousands separator to use when formatting numbers for screen\nreaders. Note that many screen readers will not handle space as a\nthousands separator, and will consider \"11 700\" as two numbers.\n\nSet to `null` to use the separator defined in\n[lang.thousandsSep](lang.thousandsSep)."
              },
              "subtree": {}
            },
            "viewAsDataTable": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "viewAsDataTable",
                "excludes": {},
                "default": "View as data table."
              },
              "subtree": {}
            }
          }
        },
        "contextButtonTitle": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "contextButtonTitle",
            "excludes": {},
            "default": "Chart context menu",
            "description": "Exporting module menu. The tooltip title for the context menu holding\nprint and export menu items."
          },
          "subtree": {}
        },
        "decimalPoint": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "decimalPoint",
            "excludes": {},
            "default": ".",
            "description": "The default decimal point used in the `Highcharts.numberFormat`\nmethod unless otherwise specified in the function arguments."
          },
          "subtree": {}
        },
        "downloadCSV": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "downloadCSV",
            "excludes": {},
            "default": "Download CSV",
            "description": "The text for the menu item."
          },
          "subtree": {}
        },
        "downloadJPEG": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "downloadJPEG",
            "excludes": {},
            "default": "Download JPEG image",
            "description": "Exporting module only. The text for the JPEG download menu item."
          },
          "subtree": {}
        },
        "downloadPDF": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "downloadPDF",
            "excludes": {},
            "default": "Download PDF document",
            "description": "Exporting module only. The text for the PDF download menu item."
          },
          "subtree": {}
        },
        "downloadPNG": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "downloadPNG",
            "excludes": {},
            "default": "Download PNG image",
            "description": "Exporting module only. The text for the PNG download menu item."
          },
          "subtree": {}
        },
        "downloadSVG": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "downloadSVG",
            "excludes": {},
            "default": "Download SVG vector image",
            "description": "Exporting module only. The text for the SVG download menu item."
          },
          "subtree": {}
        },
        "downloadXLS": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "downloadXLS",
            "excludes": {},
            "default": "Download XLS",
            "description": "The text for the menu item."
          },
          "subtree": {}
        },
        "drillUpText": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "drillUpText",
            "excludes": {},
            "default": "◁ Back to {series.name}",
            "products": {
              "highcharts": 1,
              "highmaps": 1
            },
            "description": "The text for the button that appears when drilling down, linking back\nto the parent series. The parent series' name is inserted for\n`{series.name}`."
          },
          "subtree": {}
        },
        "invalidDate": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "invalidDate",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "What to show in a date field for invalid dates. Defaults to an empty\nstring."
          },
          "subtree": {}
        },
        "loading": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "loading",
            "excludes": {},
            "default": "Loading...",
            "description": "The loading text that appears when the chart is set into the loading\nstate following a call to `chart.showLoading`."
          },
          "subtree": {}
        },
        "months": {
          "meta": {
            "types": {
              "array": "string"
            },
            "name": "months",
            "excludes": {},
            "default": "[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n         \"July\", \"August\", \"September\", \"October\", \"November\",\n         \"December\"]",
            "description": "An array containing the months names. Corresponds to the `%B` format\nin `Highcharts.dateFormat()`."
          },
          "subtree": {}
        },
        "navigation": {
          "meta": {
            "types": {
              "object": 1
            },
            "name": "navigation",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "Configure the Popup strings in the chart. Requires the\n`annotations.js` or `annotations-advanced.src.js` module to be\nloaded."
          },
          "subtree": {
            "popup": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "popup",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Translations for all field names used in popup."
              },
              "subtree": {
                "addButton": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "addButton",
                    "excludes": {},
                    "default": "add"
                  },
                  "subtree": {}
                },
                "arrowLine": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "arrowLine",
                    "excludes": {},
                    "default": "Arrow line"
                  },
                  "subtree": {}
                },
                "arrowRay": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "arrowRay",
                    "excludes": {},
                    "default": "Arrow ray"
                  },
                  "subtree": {}
                },
                "arrowSegment": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "arrowSegment",
                    "excludes": {},
                    "default": "Arrow segment"
                  },
                  "subtree": {}
                },
                "background": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "background",
                    "excludes": {},
                    "default": "Background"
                  },
                  "subtree": {}
                },
                "backgroundColor": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "backgroundColor",
                    "excludes": {},
                    "default": "Background color"
                  },
                  "subtree": {}
                },
                "backgroundColors": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "backgroundColors",
                    "excludes": {},
                    "default": "Background colors"
                  },
                  "subtree": {}
                },
                "borderColor": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "borderColor",
                    "excludes": {},
                    "default": "Border color"
                  },
                  "subtree": {}
                },
                "borderRadius": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "borderRadius",
                    "excludes": {},
                    "default": "Border radius"
                  },
                  "subtree": {}
                },
                "borderWidth": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "borderWidth",
                    "excludes": {},
                    "default": "Border width"
                  },
                  "subtree": {}
                },
                "circle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "circle",
                    "excludes": {},
                    "default": "Circle"
                  },
                  "subtree": {}
                },
                "color": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "default": "Color"
                  },
                  "subtree": {}
                },
                "connector": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "connector",
                    "excludes": {},
                    "default": "Connector"
                  },
                  "subtree": {}
                },
                "crooked3": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "crooked3",
                    "excludes": {},
                    "default": "Crooked 3 line"
                  },
                  "subtree": {}
                },
                "crooked5": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "crooked5",
                    "excludes": {},
                    "default": "Crooked 5 line"
                  },
                  "subtree": {}
                },
                "crosshairX": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "crosshairX",
                    "excludes": {},
                    "default": "Crosshair X"
                  },
                  "subtree": {}
                },
                "crosshairY": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "crosshairY",
                    "excludes": {},
                    "default": "Crosshair Y"
                  },
                  "subtree": {}
                },
                "editButton": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "editButton",
                    "excludes": {},
                    "default": "edit"
                  },
                  "subtree": {}
                },
                "elliott3": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "elliott3",
                    "excludes": {},
                    "default": "Elliott 3 line"
                  },
                  "subtree": {}
                },
                "elliott5": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "elliott5",
                    "excludes": {},
                    "default": "Elliott 5 line"
                  },
                  "subtree": {}
                },
                "fibonacci": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "fibonacci",
                    "excludes": {},
                    "default": "Fibonacci"
                  },
                  "subtree": {}
                },
                "fill": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "fill",
                    "excludes": {},
                    "default": "Fill"
                  },
                  "subtree": {}
                },
                "flags": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "flags",
                    "excludes": {},
                    "default": "Flags"
                  },
                  "subtree": {}
                },
                "fontSize": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "fontSize",
                    "excludes": {},
                    "default": "Font size"
                  },
                  "subtree": {}
                },
                "format": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "format",
                    "excludes": {},
                    "default": "Text"
                  },
                  "subtree": {}
                },
                "height": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "height",
                    "excludes": {},
                    "default": "Height"
                  },
                  "subtree": {}
                },
                "horizontalLine": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "horizontalLine",
                    "excludes": {},
                    "default": "Horizontal line"
                  },
                  "subtree": {}
                },
                "infinityLine": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "infinityLine",
                    "excludes": {},
                    "default": "Infinity line"
                  },
                  "subtree": {}
                },
                "innerBackground": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "innerBackground",
                    "excludes": {},
                    "default": "Inner background"
                  },
                  "subtree": {}
                },
                "label": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "label",
                    "excludes": {},
                    "default": "Label"
                  },
                  "subtree": {}
                },
                "labelOptions": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "labelOptions",
                    "excludes": {},
                    "default": "Label options"
                  },
                  "subtree": {}
                },
                "labels": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "labels",
                    "excludes": {},
                    "default": "Labels"
                  },
                  "subtree": {}
                },
                "line": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "line",
                    "excludes": {},
                    "default": "Line"
                  },
                  "subtree": {}
                },
                "lines": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "lines",
                    "excludes": {},
                    "default": "Lines"
                  },
                  "subtree": {}
                },
                "measure": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "measure",
                    "excludes": {},
                    "default": "Measure"
                  },
                  "subtree": {}
                },
                "measureX": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "measureX",
                    "excludes": {},
                    "default": "Measure X"
                  },
                  "subtree": {}
                },
                "measureXY": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "measureXY",
                    "excludes": {},
                    "default": "Measure XY"
                  },
                  "subtree": {}
                },
                "measureY": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "measureY",
                    "excludes": {},
                    "default": "Measure Y"
                  },
                  "subtree": {}
                },
                "name": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "name",
                    "excludes": {},
                    "default": "Name"
                  },
                  "subtree": {}
                },
                "outerBackground": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "outerBackground",
                    "excludes": {},
                    "default": "Outer background"
                  },
                  "subtree": {}
                },
                "padding": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "padding",
                    "excludes": {},
                    "default": "Padding"
                  },
                  "subtree": {}
                },
                "parallelChannel": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "parallelChannel",
                    "excludes": {},
                    "default": "Parallel channel"
                  },
                  "subtree": {}
                },
                "pitchfork": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pitchfork",
                    "excludes": {},
                    "default": "Pitchfork"
                  },
                  "subtree": {}
                },
                "ray": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "ray",
                    "excludes": {},
                    "default": "Ray"
                  },
                  "subtree": {}
                },
                "rectangle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "rectangle",
                    "excludes": {},
                    "default": "Rectangle"
                  },
                  "subtree": {}
                },
                "removeButton": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "removeButton",
                    "excludes": {},
                    "default": "remove"
                  },
                  "subtree": {}
                },
                "saveButton": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "saveButton",
                    "excludes": {},
                    "default": "save"
                  },
                  "subtree": {}
                },
                "segment": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "segment",
                    "excludes": {},
                    "default": "Segment"
                  },
                  "subtree": {}
                },
                "series": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "series",
                    "excludes": {},
                    "default": "Series"
                  },
                  "subtree": {}
                },
                "shapeOptions": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "shapeOptions",
                    "excludes": {},
                    "default": "Shape options"
                  },
                  "subtree": {}
                },
                "shapes": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "shapes",
                    "excludes": {},
                    "default": "Shape options"
                  },
                  "subtree": {}
                },
                "simpleShapes": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "simpleShapes",
                    "excludes": {},
                    "default": "Simple shapes"
                  },
                  "subtree": {}
                },
                "stroke": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "stroke",
                    "excludes": {},
                    "default": "Line color"
                  },
                  "subtree": {}
                },
                "strokeWidth": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "strokeWidth",
                    "excludes": {},
                    "default": "Line width"
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "style",
                    "excludes": {},
                    "default": "Style"
                  },
                  "subtree": {}
                },
                "title": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "title",
                    "excludes": {},
                    "default": "Title"
                  },
                  "subtree": {}
                },
                "tunnel": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "tunnel",
                    "excludes": {},
                    "default": "Tunnel"
                  },
                  "subtree": {}
                },
                "typeOptions": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "typeOptions",
                    "excludes": {},
                    "default": "Details"
                  },
                  "subtree": {}
                },
                "verticalArrow": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalArrow",
                    "excludes": {},
                    "default": "Vertical arrow"
                  },
                  "subtree": {}
                },
                "verticalCounter": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalCounter",
                    "excludes": {},
                    "default": "Vertical counter"
                  },
                  "subtree": {}
                },
                "verticalLabel": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalLabel",
                    "excludes": {},
                    "default": "Vertical label"
                  },
                  "subtree": {}
                },
                "verticalLine": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalLine",
                    "excludes": {},
                    "default": "Vertical line"
                  },
                  "subtree": {}
                },
                "volume": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "volume",
                    "excludes": {},
                    "default": "Volume"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "noData": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "noData",
            "excludes": {},
            "default": "No data to display",
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "The text to display when the chart contains no data."
          },
          "subtree": {}
        },
        "numericSymbolMagnitude": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "numericSymbolMagnitude",
            "excludes": {},
            "default": "1000",
            "description": "The magnitude of [numericSymbols](#lang.numericSymbol) replacements.\nUse 10000 for Japanese, Korean and various Chinese locales, which\nuse symbols for 10^4, 10^8 and 10^12."
          },
          "subtree": {}
        },
        "numericSymbols": {
          "meta": {
            "types": {
              "array": "string"
            },
            "name": "numericSymbols",
            "excludes": {},
            "default": "[\"k\", \"M\", \"G\", \"T\", \"P\", \"E\"]",
            "description": "[Metric prefixes](http://en.wikipedia.org/wiki/Metric_prefix) used\nto shorten high numbers in axis labels. Replacing any of the\npositions with `null` causes the full number to be written. Setting\n`numericSymbols` to `null` disables shortening altogether."
          },
          "subtree": {}
        },
        "openInCloud": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "openInCloud",
            "excludes": {},
            "default": "Open in Highcharts Cloud",
            "description": "The text for the menu item."
          },
          "subtree": {}
        },
        "printChart": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "printChart",
            "excludes": {},
            "default": "Print chart",
            "description": "Exporting module only. The text for the menu item to print the chart."
          },
          "subtree": {}
        },
        "rangeSelectorFrom": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "rangeSelectorFrom",
            "excludes": {},
            "default": "From",
            "products": {
              "highstock": 1,
              "gantt": 1
            },
            "description": "The text for the label for the \"from\" input box in the range\nselector."
          },
          "subtree": {}
        },
        "rangeSelectorTo": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "rangeSelectorTo",
            "excludes": {},
            "default": "To",
            "products": {
              "highstock": 1,
              "gantt": 1
            },
            "description": "The text for the label for the \"to\" input box in the range selector."
          },
          "subtree": {}
        },
        "rangeSelectorZoom": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "rangeSelectorZoom",
            "excludes": {},
            "default": "Zoom",
            "products": {
              "highstock": 1,
              "gantt": 1
            },
            "description": "The text for the label for the range selector buttons."
          },
          "subtree": {}
        },
        "resetZoom": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "resetZoom",
            "excludes": {},
            "default": "Reset zoom",
            "description": "The text for the label appearing when a chart is zoomed."
          },
          "subtree": {}
        },
        "resetZoomTitle": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "resetZoomTitle",
            "excludes": {},
            "default": "Reset zoom level 1:1",
            "description": "The tooltip title for the label appearing when a chart is zoomed."
          },
          "subtree": {}
        },
        "shortMonths": {
          "meta": {
            "types": {
              "array": "string"
            },
            "name": "shortMonths",
            "excludes": {},
            "default": "[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n         \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]",
            "description": "An array containing the months names in abbreviated form. Corresponds\nto the `%b` format in `Highcharts.dateFormat()`."
          },
          "subtree": {}
        },
        "shortWeekdays": {
          "meta": {
            "types": {
              "array": "string"
            },
            "name": "shortWeekdays",
            "excludes": {},
            "description": "Short week days, starting Sunday. If not specified, Highcharts uses\nthe first three letters of the `lang.weekdays` option."
          },
          "subtree": {}
        },
        "stockTools": {
          "meta": {
            "types": {
              "object": 1
            },
            "name": "stockTools",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Configure the stockTools GUI titles(hints) in the chart. Requires\nthe `stock-tools.js` module to be loaded."
          },
          "subtree": {
            "gui": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "gui",
                "excludes": {}
              },
              "subtree": {
                "advanced": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "advanced",
                    "excludes": {},
                    "default": "Advanced"
                  },
                  "subtree": {}
                },
                "arrowLine": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "arrowLine",
                    "excludes": {},
                    "default": "Arrow line"
                  },
                  "subtree": {}
                },
                "arrowRay": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "arrowRay",
                    "excludes": {},
                    "default": "Arrow ray"
                  },
                  "subtree": {}
                },
                "arrowSegment": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "arrowSegment",
                    "excludes": {},
                    "default": "Arrow segment"
                  },
                  "subtree": {}
                },
                "circle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "circle",
                    "excludes": {},
                    "default": "Circle"
                  },
                  "subtree": {}
                },
                "crooked3": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "crooked3",
                    "excludes": {},
                    "default": "Crooked 3 line"
                  },
                  "subtree": {}
                },
                "crooked5": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "crooked5",
                    "excludes": {},
                    "default": "Crooked 5 line"
                  },
                  "subtree": {}
                },
                "crookedLines": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "crookedLines",
                    "excludes": {},
                    "default": "Crooked lines"
                  },
                  "subtree": {}
                },
                "currentPriceIndicator": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "currentPriceIndicator",
                    "excludes": {},
                    "default": "Current Price Indicators"
                  },
                  "subtree": {}
                },
                "elliott3": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "elliott3",
                    "excludes": {},
                    "default": "Elliott 3 line"
                  },
                  "subtree": {}
                },
                "elliott5": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "elliott5",
                    "excludes": {},
                    "default": "Elliott 5 line"
                  },
                  "subtree": {}
                },
                "fibonacci": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "fibonacci",
                    "excludes": {},
                    "default": "Fibonacci"
                  },
                  "subtree": {}
                },
                "flagCirclepin": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "flagCirclepin",
                    "excludes": {},
                    "default": "Flag circle"
                  },
                  "subtree": {}
                },
                "flagDiamondpin": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "flagDiamondpin",
                    "excludes": {},
                    "default": "Flag diamond"
                  },
                  "subtree": {}
                },
                "flagSimplepin": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "flagSimplepin",
                    "excludes": {},
                    "default": "Flag simple"
                  },
                  "subtree": {}
                },
                "flagSquarepin": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "flagSquarepin",
                    "excludes": {},
                    "default": "Flag square"
                  },
                  "subtree": {}
                },
                "flags": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "flags",
                    "excludes": {},
                    "default": "Flags"
                  },
                  "subtree": {}
                },
                "fullScreen": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "fullScreen",
                    "excludes": {},
                    "default": "Fullscreen"
                  },
                  "subtree": {}
                },
                "horizontalLine": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "horizontalLine",
                    "excludes": {},
                    "default": "Horizontal line"
                  },
                  "subtree": {}
                },
                "indicators": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "indicators",
                    "excludes": {},
                    "default": "Indicators"
                  },
                  "subtree": {}
                },
                "infinityLine": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "infinityLine",
                    "excludes": {},
                    "default": "Infinity line"
                  },
                  "subtree": {}
                },
                "label": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "label",
                    "excludes": {},
                    "default": "Label"
                  },
                  "subtree": {}
                },
                "line": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "line",
                    "excludes": {},
                    "default": "Line"
                  },
                  "subtree": {}
                },
                "lines": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "lines",
                    "excludes": {},
                    "default": "Lines"
                  },
                  "subtree": {}
                },
                "measure": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "measure",
                    "excludes": {},
                    "default": "Measure"
                  },
                  "subtree": {}
                },
                "measureX": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "measureX",
                    "excludes": {},
                    "default": "Measure X"
                  },
                  "subtree": {}
                },
                "measureXY": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "measureXY",
                    "excludes": {},
                    "default": "Measure XY"
                  },
                  "subtree": {}
                },
                "measureY": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "measureY",
                    "excludes": {},
                    "default": "Measure Y"
                  },
                  "subtree": {}
                },
                "parallelChannel": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "parallelChannel",
                    "excludes": {},
                    "default": "Parallel channel"
                  },
                  "subtree": {}
                },
                "pitchfork": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pitchfork",
                    "excludes": {},
                    "default": "Pitchfork"
                  },
                  "subtree": {}
                },
                "ray": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "ray",
                    "excludes": {},
                    "default": "Ray"
                  },
                  "subtree": {}
                },
                "rectangle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "rectangle",
                    "excludes": {},
                    "default": "Rectangle"
                  },
                  "subtree": {}
                },
                "saveChart": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "saveChart",
                    "excludes": {},
                    "default": "Save chart"
                  },
                  "subtree": {}
                },
                "segment": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "segment",
                    "excludes": {},
                    "default": "Segment"
                  },
                  "subtree": {}
                },
                "simpleShapes": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "simpleShapes",
                    "excludes": {},
                    "default": "Simple shapes"
                  },
                  "subtree": {}
                },
                "toggleAnnotations": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "toggleAnnotations",
                    "excludes": {},
                    "default": "Toggle annotations"
                  },
                  "subtree": {}
                },
                "typeCandlestick": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "typeCandlestick",
                    "excludes": {},
                    "default": "Candlestick"
                  },
                  "subtree": {}
                },
                "typeChange": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "typeChange",
                    "excludes": {},
                    "default": "Type change"
                  },
                  "subtree": {}
                },
                "typeLine": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "typeLine",
                    "excludes": {},
                    "default": "Line"
                  },
                  "subtree": {}
                },
                "typeOHLC": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "typeOHLC",
                    "excludes": {},
                    "default": "OHLC"
                  },
                  "subtree": {}
                },
                "verticalArrow": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalArrow",
                    "excludes": {},
                    "default": "Vertical arrow"
                  },
                  "subtree": {}
                },
                "verticalCounter": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalCounter",
                    "excludes": {},
                    "default": "Vertical counter"
                  },
                  "subtree": {}
                },
                "verticalLabel": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalLabel",
                    "excludes": {},
                    "default": "Vertical label"
                  },
                  "subtree": {}
                },
                "verticalLabels": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalLabels",
                    "excludes": {},
                    "default": "Vertical labels"
                  },
                  "subtree": {}
                },
                "verticalLine": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalLine",
                    "excludes": {},
                    "default": "Vertical line"
                  },
                  "subtree": {}
                },
                "zoomChange": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "zoomChange",
                    "excludes": {},
                    "default": "Zoom change"
                  },
                  "subtree": {}
                },
                "zoomX": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "zoomX",
                    "excludes": {},
                    "default": "Zoom X"
                  },
                  "subtree": {}
                },
                "zoomXY": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "zoomXY",
                    "excludes": {},
                    "default": "Zooom XY"
                  },
                  "subtree": {}
                },
                "zoomY": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "zoomY",
                    "excludes": {},
                    "default": "Zoom Y"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "thousandsSep": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "thousandsSep",
            "excludes": {},
            "default": "\\u0020",
            "description": "The default thousands separator used in the `Highcharts.numberFormat`\nmethod unless otherwise specified in the function arguments. Defaults\nto a single space character, which is recommended in\n[ISO 31-0](https://en.wikipedia.org/wiki/ISO_31-0#Numbers) and works\nacross Anglo-American and continental European languages."
          },
          "subtree": {}
        },
        "viewData": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "viewData",
            "excludes": {},
            "default": "View data table",
            "description": "The text for the menu item."
          },
          "subtree": {}
        },
        "viewFullscreen": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "viewFullscreen",
            "excludes": {},
            "default": "View in full screen",
            "description": "Exporting module only. View the chart in full screen."
          },
          "subtree": {}
        },
        "weekdays": {
          "meta": {
            "types": {
              "array": "string"
            },
            "name": "weekdays",
            "excludes": {},
            "default": "[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n         \"Friday\", \"Saturday\"]",
            "description": "An array containing the weekday names."
          },
          "subtree": {}
        },
        "zoomIn": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "zoomIn",
            "excludes": {},
            "default": "Zoom in",
            "products": {
              "highmaps": 1
            },
            "description": "The title appearing on hovering the zoom in button. The text itself\ndefaults to \"+\" and can be changed in the button options."
          },
          "subtree": {}
        },
        "zoomOut": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "zoomOut",
            "excludes": {},
            "default": "Zoom out",
            "products": {
              "highmaps": 1
            },
            "description": "The title appearing on hovering the zoom out button. The text itself\ndefaults to \"-\" and can be changed in the button options."
          },
          "subtree": {}
        }
      }
    },
    "legend": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "legend",
        "excludes": {},
        "description": "The legend is a box containing a symbol and name for each series\nitem or point item in the chart. Each series (or points in case\nof pie charts) is represented by a symbol and its name in the legend.\n\nIt is possible to override the symbol creator function and create\n[custom legend symbols](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/studies/legend-custom-symbol/)."
      },
      "subtree": {
        "accessibility": {
          "meta": {
            "types": {
              "object": 1
            },
            "name": "accessibility",
            "excludes": {},
            "description": "Accessibility options for the legend. Requires the Accessibility\nmodule."
          },
          "subtree": {
            "enabled": {
              "meta": {
                "types": {},
                "name": "enabled",
                "excludes": {},
                "description": "Enable accessibility support for the legend."
              },
              "subtree": {}
            },
            "keyboardNavigation": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "keyboardNavigation",
                "excludes": {},
                "description": "Options for keyboard navigation for the legend."
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {},
                    "name": "enabled",
                    "excludes": {},
                    "description": "Enable keyboard navigation for the legend."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "align": {
          "meta": {
            "types": {
              "highcharts.alignvalue": 1
            },
            "name": "align",
            "excludes": {},
            "default": "center",
            "description": "The horizontal alignment of the legend box within the chart area.\nValid values are `left`, `center` and `right`.\n\nIn the case that the legend is aligned in a corner position, the\n`layout` option will determine whether to place it above/below\nor on the side of the plot area."
          },
          "subtree": {}
        },
        "alignColumns": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "alignColumns",
            "excludes": {},
            "default": true,
            "description": "If the [layout](legend.layout) is `horizontal` and the legend items\nspan over two lines or more, whether to align the items into vertical\ncolumns. Setting this to `false` makes room for more items, but will\nlook more messy."
          },
          "subtree": {}
        },
        "backgroundColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "backgroundColor",
            "excludes": {},
            "description": "The background color of the legend."
          },
          "subtree": {}
        },
        "borderColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "borderColor",
            "excludes": {},
            "default": "#999999",
            "description": "The color of the drawn border around the legend."
          },
          "subtree": {}
        },
        "borderRadius": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "borderRadius",
            "excludes": {},
            "default": 0,
            "description": "The border corner radius of the legend."
          },
          "subtree": {}
        },
        "borderWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "borderWidth",
            "excludes": {},
            "default": "0",
            "description": "The width of the drawn border around the legend."
          },
          "subtree": {}
        },
        "bubbleLegend": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "bubbleLegend",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "highmaps": 1
            },
            "description": "The bubble legend is an additional element in legend which\npresents the scale of the bubble series. Individual bubble ranges\ncan be defined by user or calculated from series. In the case of\nautomatically calculated ranges, a 1px margin of error is\npermitted."
          },
          "subtree": {
            "borderColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "borderColor",
                "excludes": {},
                "description": "The color of the ranges borders, can be also defined for an\nindividual range."
              },
              "subtree": {}
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": 2,
                "description": "The width of the ranges borders in pixels, can be also\ndefined for an individual range."
              },
              "subtree": {}
            },
            "className": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "className",
                "excludes": {},
                "description": "An additional class name to apply to the bubble legend'\ncircle graphical elements. This option does not replace\ndefault class names of the graphical element."
              },
              "subtree": {}
            },
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "color",
                "excludes": {},
                "description": "The main color of the bubble legend. Applies to ranges, if\nindividual color is not defined."
              },
              "subtree": {}
            },
            "connectorClassName": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "connectorClassName",
                "excludes": {},
                "description": "An additional class name to apply to the bubble legend's\nconnector graphical elements. This option does not replace\ndefault class names of the graphical element."
              },
              "subtree": {}
            },
            "connectorColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "connectorColor",
                "excludes": {},
                "description": "The color of the connector, can be also defined\nfor an individual range."
              },
              "subtree": {}
            },
            "connectorDistance": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "connectorDistance",
                "excludes": {},
                "default": 60,
                "description": "The length of the connectors in pixels. If labels are\ncentered, the distance is reduced to 0."
              },
              "subtree": {}
            },
            "connectorWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "connectorWidth",
                "excludes": {},
                "default": 1,
                "description": "The width of the connectors in pixels."
              },
              "subtree": {}
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": false,
                "description": "Enable or disable the bubble legend."
              },
              "subtree": {}
            },
            "labels": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "labels",
                "excludes": {},
                "description": "Options for the bubble legend labels."
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "highcharts.alignvalue": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "default": "right",
                    "description": "The alignment of the labels compared to the bubble\nlegend. Can be one of `left`, `center` or `right`."
                  },
                  "subtree": {}
                },
                "allowOverlap": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "allowOverlap",
                    "excludes": {},
                    "default": false,
                    "description": "Whether to allow data labels to overlap."
                  },
                  "subtree": {}
                },
                "className": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "className",
                    "excludes": {},
                    "description": "An additional class name to apply to the bubble legend\nlabel graphical elements. This option does not replace\ndefault class names of the graphical element."
                  },
                  "subtree": {}
                },
                "format": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "format",
                    "excludes": {},
                    "default": "",
                    "description": "A [format string](http://docs.highcharts.com/#formatting)\nfor the bubble legend labels. Available variables are the\nsame as for `formatter`."
                  },
                  "subtree": {}
                },
                "formatter": {
                  "meta": {
                    "types": {
                      "highcharts.formattercallbackfunction.<highcharts.bubblelegendformattercontextobject>": 1
                    },
                    "name": "formatter",
                    "excludes": {},
                    "description": "Available `this` properties are:\n\n- `this.value`: The bubble value.\n\n- `this.radius`: The radius of the bubble range.\n\n- `this.center`: The center y position of the range."
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "highcharts.cssobject": 1
                    },
                    "name": "style",
                    "excludes": {},
                    "description": "CSS styles for the labels."
                  },
                  "subtree": {}
                },
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "default": 0,
                    "description": "The x position offset of the label relative to the\nconnector."
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": 0,
                    "description": "The y position offset of the label relative to the\nconnector."
                  },
                  "subtree": {}
                }
              }
            },
            "legendIndex": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "legendIndex",
                "excludes": {},
                "default": 0,
                "description": "The position of the bubble legend in the legend."
              },
              "subtree": {}
            },
            "maxSize": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "maxSize",
                "excludes": {},
                "default": 60,
                "description": "Miximum bubble legend range size. If values for ranges are\nnot specified, the `minSize` and the `maxSize` are calculated\nfrom bubble series."
              },
              "subtree": {}
            },
            "minSize": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "minSize",
                "excludes": {},
                "default": 10,
                "description": "Minimum bubble legend range size. If values for ranges are\nnot specified, the `minSize` and the `maxSize` are calculated\nfrom bubble series."
              },
              "subtree": {}
            },
            "ranges": {
              "meta": {
                "types": {
                  "array": "*"
                },
                "name": "ranges",
                "excludes": {},
                "description": "Options for specific range. One range consists of bubble,\nlabel and connector."
              },
              "subtree": {
                "borderColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "borderColor",
                    "excludes": {},
                    "description": "The color of the border for individual range."
                  },
                  "subtree": {}
                },
                "color": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "description": "The color of the bubble for individual range."
                  },
                  "subtree": {}
                },
                "connectorColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "connectorColor",
                    "excludes": {},
                    "description": "The color of the connector for individual range."
                  },
                  "subtree": {}
                },
                "value": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "value",
                    "excludes": {},
                    "description": "Range size value, similar to bubble Z data."
                  },
                  "subtree": {}
                }
              }
            },
            "sizeBy": {
              "meta": {
                "types": {
                  "highcharts.bubblesizebyvalue": 1
                },
                "name": "sizeBy",
                "excludes": {},
                "default": "area",
                "description": "Whether the bubble legend range value should be represented\nby the area or the width of the bubble. The default, area,\ncorresponds best to the human perception of the size of each\nbubble."
              },
              "subtree": {}
            },
            "sizeByAbsoluteValue": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "sizeByAbsoluteValue",
                "excludes": {},
                "default": false,
                "description": "When this is true, the absolute value of z determines the\nsize of the bubble. This means that with the default\nzThreshold of 0, a bubble of value -1 will have the same size\nas a bubble of value 1, while a bubble of value 0 will have a\nsmaller size according to minSize."
              },
              "subtree": {}
            },
            "zIndex": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zIndex",
                "excludes": {},
                "default": 1,
                "description": "Define the visual z index of the bubble legend."
              },
              "subtree": {}
            },
            "zThreshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zThreshold",
                "excludes": {},
                "default": 0,
                "description": "Ranges with with lower value than zThreshold, are skipped."
              },
              "subtree": {}
            }
          }
        },
        "enabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enabled",
            "excludes": {},
            "default": true,
            "description": "Enable or disable the legend. There is also a series-specific option,\n[showInLegend](#plotOptions.series.showInLegend), that can hide the\nseries from the legend. In some series types this is `false` by\ndefault, so it must set to `true` in order to show the legend for the\nseries."
          },
          "subtree": {}
        },
        "floating": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "floating",
            "excludes": {},
            "default": "false",
            "description": "When the legend is floating, the plot area ignores it and is allowed\nto be placed below it."
          },
          "subtree": {}
        },
        "itemCheckboxStyle": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "itemCheckboxStyle",
            "excludes": {},
            "default": "{\"width\": \"13px\", \"height\": \"13px\", \"position\":\"absolute\"}",
            "description": "Default styling for the checkbox next to a legend item when\n`showCheckbox` is true."
          },
          "subtree": {}
        },
        "itemDistance": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "itemDistance",
            "excludes": {},
            "description": "In a legend with horizontal layout, the itemDistance defines the\npixel distance between each item."
          },
          "subtree": {}
        },
        "itemHiddenStyle": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "itemHiddenStyle",
            "excludes": {},
            "default": "{\"color\": \"#cccccc\"}",
            "description": "CSS styles for each legend item when the corresponding series or\npoint is hidden. Only a subset of CSS is supported, notably those\noptions related to text. Properties are inherited from `style`\nunless overridden here."
          },
          "subtree": {}
        },
        "itemHoverStyle": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "itemHoverStyle",
            "excludes": {},
            "default": "{\"color\": \"#000000\"}",
            "description": "CSS styles for each legend item in hover mode. Only a subset of\nCSS is supported, notably those options related to text. Properties\nare inherited from `style` unless overridden here."
          },
          "subtree": {}
        },
        "itemMarginBottom": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "itemMarginBottom",
            "excludes": {},
            "default": "0",
            "description": "The pixel bottom margin for each legend item."
          },
          "subtree": {}
        },
        "itemMarginTop": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "itemMarginTop",
            "excludes": {},
            "default": "0",
            "description": "The pixel top margin for each legend item."
          },
          "subtree": {}
        },
        "itemStyle": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "itemStyle",
            "excludes": {},
            "default": "{\"color\": \"#333333\", \"cursor\": \"pointer\", \"fontSize\": \"12px\", \"fontWeight\": \"bold\", \"textOverflow\": \"ellipsis\"}",
            "description": "CSS styles for each legend item. Only a subset of CSS is supported,\nnotably those options related to text. The default `textOverflow`\nproperty makes long texts truncate. Set it to `undefined` to wrap\ntext instead. A `width` property can be added to control the text\nwidth."
          },
          "subtree": {}
        },
        "itemWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "itemWidth",
            "excludes": {},
            "description": "The width for each legend item. By default the items are laid out\nsuccessively. In a [horizontal layout](legend.layout), if the items\nare laid out across two rows or more, they will be vertically aligned\ndepending on the [legend.alignColumns](legend.alignColumns) option."
          },
          "subtree": {}
        },
        "labelFormat": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "labelFormat",
            "excludes": {},
            "default": "{name}",
            "description": "A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\nfor each legend label. Available variables relates to properties on\nthe series, or the point in case of pies."
          },
          "subtree": {}
        },
        "labelFormatter": {
          "meta": {
            "types": {
              "highcharts.formattercallbackfunction.<(point|series)>": 1
            },
            "name": "labelFormatter",
            "excludes": {},
            "description": "Callback function to format each of the series' labels. The `this`\nkeyword refers to the series object, or the point object in case of\npie charts. By default the series or point name is printed."
          },
          "subtree": {}
        },
        "layout": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "layout",
            "excludes": {},
            "default": "horizontal",
            "description": "The layout of the legend items. Can be one of `horizontal` or\n`vertical` or `proximate`. When `proximate`, the legend items will be\nplaced as close as possible to the graphs they're representing,\nexcept in inverted charts or when the legend position doesn't allow\nit."
          },
          "subtree": {}
        },
        "lineHeight": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "lineHeight",
            "excludes": {},
            "default": "16",
            "products": {
              "highcharts": 1,
              "gantt": 1
            },
            "description": "Line height for the legend items. Deprecated as of 2.1\\. Instead,\nthe line height for each item can be set using\n`itemStyle.lineHeight`, and the padding between items using\n`itemMarginTop` and `itemMarginBottom`."
          },
          "subtree": {}
        },
        "margin": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "margin",
            "excludes": {},
            "default": "12",
            "description": "If the plot area sized is calculated automatically and the legend is\nnot floating, the legend margin is the space between the legend and\nthe axis labels or plot area."
          },
          "subtree": {}
        },
        "maxHeight": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "maxHeight",
            "excludes": {},
            "description": "Maximum pixel height for the legend. When the maximum height is\nextended, navigation will show."
          },
          "subtree": {}
        },
        "navigation": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "navigation",
            "excludes": {},
            "description": "Options for the paging or navigation appearing when the legend is\noverflown. Navigation works well on screen, but not in static\nexported images. One way of working around that is to\n[increase the chart height in\nexport](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/legend/navigation-enabled-false/)."
          },
          "subtree": {
            "activeColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "activeColor",
                "excludes": {},
                "default": "#003399",
                "description": "The color for the active up or down arrow in the legend page\nnavigation."
              },
              "subtree": {}
            },
            "animation": {
              "meta": {
                "types": {
                  "boolean": 1,
                  "highcharts.animationoptionsobject": 1
                },
                "name": "animation",
                "excludes": {},
                "default": "true",
                "description": "How to animate the pages when navigating up or down. A value of\n`true` applies the default navigation given in the\n`chart.animation` option. Additional options can be given as an\nobject containing values for easing and duration."
              },
              "subtree": {}
            },
            "arrowSize": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "arrowSize",
                "excludes": {},
                "default": "12",
                "description": "The pixel size of the up and down arrows in the legend paging\nnavigation."
              },
              "subtree": {}
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": "true",
                "description": "Whether to enable the legend navigation. In most cases, disabling\nthe navigation results in an unwanted overflow.\n\nSee also the [adapt chart to legend](https://www.highcharts.com/products/plugin-registry/single/8/Adapt-Chart-To-Legend)\nplugin for a solution to extend the chart height to make room for\nthe legend, optionally in exported charts only."
              },
              "subtree": {}
            },
            "inactiveColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "inactiveColor",
                "excludes": {},
                "default": "#cccccc",
                "description": "The color of the inactive up or down arrow in the legend page\nnavigation. ."
              },
              "subtree": {}
            },
            "style": {
              "meta": {
                "types": {
                  "highcharts.cssobject": 1
                },
                "name": "style",
                "excludes": {},
                "description": "Text styles for the legend page navigation."
              },
              "subtree": {}
            }
          }
        },
        "padding": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "padding",
            "excludes": {},
            "default": "8",
            "description": "The inner padding of the legend box."
          },
          "subtree": {}
        },
        "reversed": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "reversed",
            "excludes": {},
            "default": "false",
            "description": "Whether to reverse the order of the legend items compared to the\norder of the series or points as defined in the configuration object."
          },
          "subtree": {}
        },
        "rtl": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "rtl",
            "excludes": {},
            "default": "false",
            "description": "Whether to show the symbol on the right side of the text rather than\nthe left side. This is common in Arabic and Hebraic."
          },
          "subtree": {}
        },
        "shadow": {
          "meta": {
            "types": {
              "boolean": 1,
              "highcharts.cssobject": 1
            },
            "name": "shadow",
            "excludes": {},
            "default": false,
            "description": "Whether to apply a drop shadow to the legend. A `backgroundColor`\nalso needs to be applied for this to take effect. The shadow can be\nan object configuration containing `color`, `offsetX`, `offsetY`,\n`opacity` and `width`."
          },
          "subtree": {}
        },
        "squareSymbol": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "squareSymbol",
            "excludes": {},
            "default": true,
            "description": "When this is true, the legend symbol width will be the same as\nthe symbol height, which in turn defaults to the font size of the\nlegend items."
          },
          "subtree": {}
        },
        "style": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "style",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "CSS styles for the legend area. In the 1.x versions the position\nof the legend area was determined by CSS. In 2.x, the position is\ndetermined by properties like `align`, `verticalAlign`, `x` and `y`,\nbut the styles are still parsed for backwards compatibility."
          },
          "subtree": {}
        },
        "symbolHeight": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "symbolHeight",
            "excludes": {},
            "description": "The pixel height of the symbol for series types that use a rectangle\nin the legend. Defaults to the font size of legend items."
          },
          "subtree": {}
        },
        "symbolPadding": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "symbolPadding",
            "excludes": {},
            "default": 5,
            "description": "The pixel padding between the legend item symbol and the legend\nitem text."
          },
          "subtree": {}
        },
        "symbolRadius": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "symbolRadius",
            "excludes": {},
            "description": "The border radius of the symbol for series types that use a rectangle\nin the legend. Defaults to half the `symbolHeight`."
          },
          "subtree": {}
        },
        "symbolWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "symbolWidth",
            "excludes": {},
            "description": "The pixel width of the legend item symbol. When the `squareSymbol`\noption is set, this defaults to the `symbolHeight`, otherwise 16."
          },
          "subtree": {}
        },
        "title": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "title",
            "excludes": {},
            "description": "A title to be added on top of the legend."
          },
          "subtree": {
            "style": {
              "meta": {
                "types": {
                  "highcharts.cssobject": 1
                },
                "name": "style",
                "excludes": {},
                "default": "{\"fontWeight\": \"bold\"}",
                "description": "Generic CSS styles for the legend title."
              },
              "subtree": {}
            },
            "text": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "text",
                "excludes": {},
                "description": "A text or HTML string for the title."
              },
              "subtree": {}
            }
          }
        },
        "useHTML": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "useHTML",
            "excludes": {},
            "default": "false",
            "description": "Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\nto render the legend item texts.\n\nPrior to 4.1.7, when using HTML, [legend.navigation](#legend.navigation) was disabled."
          },
          "subtree": {}
        },
        "verticalAlign": {
          "meta": {
            "types": {
              "highcharts.verticalalignvalue": 1
            },
            "name": "verticalAlign",
            "excludes": {},
            "default": "bottom",
            "description": "The vertical alignment of the legend box. Can be one of `top`,\n`middle` or `bottom`. Vertical position can be further determined\nby the `y` option.\n\nIn the case that the legend is aligned in a corner position, the\n`layout` option will determine whether to place it above/below\nor on the side of the plot area.\n\nWhen the [layout](#legend.layout) option is `proximate`, the\n`verticalAlign` option doesn't apply."
          },
          "subtree": {}
        },
        "width": {
          "meta": {
            "types": {
              "number": 1,
              "string": 1
            },
            "name": "width",
            "excludes": {},
            "description": "The width of the legend box. If a number is set, it translates to\npixels. Since v7.0.2 it allows setting a percent string of the full\nchart width, for example `40%`.\n\nDefaults to the full chart width from legends below or above the\nchart, half the chart width for legends to the left and right."
          },
          "subtree": {}
        },
        "x": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "x",
            "excludes": {},
            "default": 0,
            "description": "The x offset of the legend relative to its horizontal alignment\n`align` within chart.spacingLeft and chart.spacingRight. Negative\nx moves it to the left, positive x moves it to the right."
          },
          "subtree": {}
        },
        "y": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "y",
            "excludes": {},
            "default": 0,
            "description": "The vertical offset of the legend relative to it's vertical alignment\n`verticalAlign` within chart.spacingTop and chart.spacingBottom.\n Negative y moves it up, positive y moves it down."
          },
          "subtree": {}
        }
      }
    },
    "loading": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "loading",
        "excludes": {},
        "description": "The loading options control the appearance of the loading screen\nthat covers the plot area on chart operations. This screen only\nappears after an explicit call to `chart.showLoading()`. It is a\nutility for developers to communicate to the end user that something\nis going on, for example while retrieving new data via an XHR connection.\nThe \"Loading...\" text itself is not part of this configuration\nobject, but part of the `lang` object."
      },
      "subtree": {
        "hideDuration": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "hideDuration",
            "excludes": {},
            "default": "100",
            "description": "The duration in milliseconds of the fade out effect."
          },
          "subtree": {}
        },
        "labelStyle": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "labelStyle",
            "excludes": {},
            "default": "{\"fontWeight\": \"bold\", \"position\": \"relative\", \"top\": \"45%\"}",
            "description": "CSS styles for the loading label `span`."
          },
          "subtree": {}
        },
        "showDuration": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "showDuration",
            "excludes": {},
            "default": "100",
            "description": "The duration in milliseconds of the fade in effect."
          },
          "subtree": {}
        },
        "style": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "style",
            "excludes": {},
            "default": "{\"position\": \"absolute\", \"backgroundColor\": \"#ffffff\", \"opacity\": 0.5, \"textAlign\": \"center\"}",
            "description": "CSS styles for the loading screen that covers the plot area.\n\nIn styled mode, the loading label is styled with the\n`.highcharts-loading` class."
          },
          "subtree": {}
        }
      }
    },
    "mapNavigation": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "mapNavigation",
        "excludes": {},
        "products": {
          "highmaps": 1
        }
      },
      "subtree": {
        "buttonOptions": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "buttonOptions",
            "excludes": {},
            "description": "General options for the map navigation buttons. Individual options\ncan be given from the [mapNavigation.buttons](#mapNavigation.buttons)\noption set."
          },
          "subtree": {
            "align": {
              "meta": {
                "types": {
                  "highcharts.alignvalue": 1
                },
                "name": "align",
                "excludes": {},
                "default": "left",
                "description": "The alignment of the navigation buttons."
              },
              "subtree": {}
            },
            "alignTo": {
              "meta": {
                "types": {
                  "highcharts.buttonrelativetovalue": 1
                },
                "name": "alignTo",
                "excludes": {},
                "default": "plotBox",
                "description": "What box to align the buttons to. Possible values are `plotBox`\nand `spacingBox`."
              },
              "subtree": {}
            },
            "height": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "height",
                "excludes": {},
                "default": 18,
                "description": "The pixel height of the map navigation buttons."
              },
              "subtree": {}
            },
            "padding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "padding",
                "excludes": {},
                "default": 5,
                "description": "Padding for the navigation buttons."
              },
              "subtree": {}
            },
            "style": {
              "meta": {
                "types": {
                  "highcharts.cssobject": 1
                },
                "name": "style",
                "excludes": {},
                "default": "{\"fontSize\": \"15px\", \"fontWeight\": \"bold\"}",
                "description": "Text styles for the map navigation buttons."
              },
              "subtree": {}
            },
            "theme": {
              "meta": {
                "types": {
                  "highcharts.svgattributes": 1
                },
                "name": "theme",
                "excludes": {},
                "default": "{\"stroke-width\": 1, \"text-align\": \"center\"}",
                "description": "A configuration object for the button theme. The object accepts\nSVG properties like `stroke-width`, `stroke` and `fill`. Tri-state\nbutton styles are supported by the `states.hover` and `states.select`\nobjects."
              },
              "subtree": {}
            },
            "verticalAlign": {
              "meta": {
                "types": {
                  "highcharts.verticalalignvalue": 1
                },
                "name": "verticalAlign",
                "excludes": {},
                "default": "top",
                "description": "The vertical alignment of the buttons. Individual alignment can\nbe adjusted by each button's `y` offset."
              },
              "subtree": {}
            },
            "width": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "width",
                "excludes": {},
                "default": 18,
                "description": "The width of the map navigation buttons."
              },
              "subtree": {}
            },
            "x": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "x",
                "excludes": {},
                "default": 0,
                "description": "The X offset of the buttons relative to its `align` setting."
              },
              "subtree": {}
            }
          }
        },
        "buttons": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "buttons",
            "excludes": {},
            "description": "The individual buttons for the map navigation. This usually includes\nthe zoom in and zoom out buttons. Properties for each button is\ninherited from\n[mapNavigation.buttonOptions](#mapNavigation.buttonOptions), while\nindividual options can be overridden. But default, the `onclick`, `text`\nand `y` options are individual."
          },
          "subtree": {
            "zoomIn": {
              "meta": {
                "types": {},
                "name": "zoomIn",
                "excludes": {},
                "description": "Options for the zoom in button. Properties for the zoom in and zoom\nout buttons are inherited from\n[mapNavigation.buttonOptions](#mapNavigation.buttonOptions), while\nindividual options can be overridden. By default, the `onclick`,\n`text` and `y` options are individual.",
                "extends": "mapNavigation.buttonOptions"
              },
              "subtree": {
                "onclick": {
                  "meta": {
                    "types": {
                      "function": 1
                    },
                    "name": "onclick",
                    "excludes": {},
                    "default": "function () { this.mapZoom(0.5); }",
                    "description": "Click handler for the button."
                  },
                  "subtree": {}
                },
                "text": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "text",
                    "excludes": {},
                    "default": "+",
                    "description": "The text for the button. The tooltip (title) is a language option\ngiven by [lang.zoomIn](#lang.zoomIn)."
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": 0,
                    "description": "The position of the zoomIn button relative to the vertical\nalignment."
                  },
                  "subtree": {}
                }
              }
            },
            "zoomOut": {
              "meta": {
                "types": {},
                "name": "zoomOut",
                "excludes": {},
                "description": "Options for the zoom out button. Properties for the zoom in and\nzoom out buttons are inherited from\n[mapNavigation.buttonOptions](#mapNavigation.buttonOptions), while\nindividual options can be overridden. By default, the `onclick`,\n`text` and `y` options are individual.",
                "extends": "mapNavigation.buttonOptions"
              },
              "subtree": {
                "onclick": {
                  "meta": {
                    "types": {
                      "function": 1
                    },
                    "name": "onclick",
                    "excludes": {},
                    "default": "function () { this.mapZoom(2); }",
                    "description": "Click handler for the button."
                  },
                  "subtree": {}
                },
                "text": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "text",
                    "excludes": {},
                    "default": "-",
                    "description": "The text for the button. The tooltip (title) is a language option\ngiven by [lang.zoomOut](#lang.zoomIn)."
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": 28,
                    "description": "The position of the zoomOut button relative to the vertical\nalignment."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "enableButtons": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enableButtons",
            "excludes": {},
            "description": "Whether to enable navigation buttons. By default it inherits the\n[enabled](#mapNavigation.enabled) setting."
          },
          "subtree": {}
        },
        "enableDoubleClickZoom": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enableDoubleClickZoom",
            "excludes": {},
            "description": "Enables zooming in on an area on double clicking in the map. By default\nit inherits the [enabled](#mapNavigation.enabled) setting."
          },
          "subtree": {}
        },
        "enableDoubleClickZoomTo": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enableDoubleClickZoomTo",
            "excludes": {},
            "default": "false",
            "description": "Whether to zoom in on an area when that area is double clicked."
          },
          "subtree": {}
        },
        "enableMouseWheelZoom": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enableMouseWheelZoom",
            "excludes": {},
            "description": "Enables zooming by mouse wheel. By default it inherits the [enabled](#mapNavigation.enabled) setting."
          },
          "subtree": {}
        },
        "enableTouchZoom": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enableTouchZoom",
            "excludes": {},
            "description": "Whether to enable multitouch zooming. Note that if the chart covers the\nviewport, this prevents the user from using multitouch and touchdrag on\nthe web page, so you should make sure the user is not trapped inside the\nchart. By default it inherits the [enabled](#mapNavigation.enabled)\nsetting."
          },
          "subtree": {}
        },
        "enabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enabled",
            "excludes": {},
            "default": "false",
            "description": "Whether to enable map navigation. The default is not to enable\nnavigation, as many choropleth maps are simple and don't need it.\nAdditionally, when touch zoom and mousewheel zoom is enabled, it breaks\nthe default behaviour of these interactions in the website, and the\nimplementer should be aware of this.\n\nIndividual interactions can be enabled separately, namely buttons,\nmultitouch zoom, double click zoom, double click zoom to element and\nmousewheel zoom."
          },
          "subtree": {}
        },
        "mouseWheelSensitivity": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "mouseWheelSensitivity",
            "excludes": {},
            "default": 1.1,
            "description": "Sensitivity of mouse wheel or trackpad scrolling. 1 is no sensitivity,\nwhile with 2, one mousewheel delta will zoom in 50%."
          },
          "subtree": {}
        }
      }
    },
    "navigation": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "navigation",
        "excludes": {},
        "description": "A collection of options for buttons and menus appearing in the exporting\nmodule."
      },
      "subtree": {
        "annotationsOptions": {
          "meta": {
            "types": {
              "highcharts.annotationsoptions": 1
            },
            "name": "annotationsOptions",
            "excludes": {},
            "description": "Additional options to be merged into all annotations.",
            "extends": "annotations"
          },
          "subtree": {}
        },
        "bindings": {
          "meta": {
            "types": {
              "highcharts.dictionary.<highcharts.stocktoolsbindingsobject>": 1,
              "*": 1
            },
            "name": "bindings",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "Bindings definitions for custom HTML buttons. Each binding implements\nsimple event-driven interface:\n\n- `className`: classname used to bind event to\n\n- `init`: initial event, fired on button click\n\n- `start`: fired on first click on a chart\n\n- `steps`: array of sequential events fired one after another on each\n  of users clicks\n\n- `end`: last event to be called after last step event"
          },
          "subtree": {
            "arrowInfinityLine": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "arrowInfinityLine",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A line with arrow annotation. Includes `start` and one event in `steps`\narray."
              },
              "subtree": {}
            },
            "arrowRay": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "arrowRay",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A ray with an arrow annotation bindings. Includes `start` and one event\nin `steps` array."
              },
              "subtree": {}
            },
            "arrowSegment": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "arrowSegment",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A segment with an arrow annotation bindings. Includes `start` and one\nevent in `steps` array."
              },
              "subtree": {}
            },
            "circleAnnotation": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "circleAnnotation",
                "excludes": {},
                "description": "A circle annotation bindings. Includes `start` and one event in\n`steps` array."
              },
              "subtree": {}
            },
            "crooked3": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "crooked3",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Crooked line (three points) annotation bindings. Includes `start` and two\nevents in `steps` (for second and third points in crooked line) array."
              },
              "subtree": {}
            },
            "crooked5": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "crooked5",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Crooked line (five points) annotation bindings. Includes `start` and four\nevents in `steps` (for all consequent points in crooked line) array."
              },
              "subtree": {}
            },
            "currentPriceIndicator": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "currentPriceIndicator",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Hides/shows two price indicators:\n- last price in the dataset\n- last price in the selected range"
              },
              "subtree": {}
            },
            "elliott3": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "elliott3",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Elliott wave (three points) annotation bindings. Includes `start` and two\nevents in `steps` (for second and third points) array."
              },
              "subtree": {}
            },
            "elliott5": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "elliott5",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Elliott wave (five points) annotation bindings. Includes `start` and four\nevent in `steps` (for all consequent points in Elliott wave) array."
              },
              "subtree": {}
            },
            "fibonacci": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "fibonacci",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A fibonacci annotation bindings. Includes `start` and two events in\n`steps` array (updates second point, then height)."
              },
              "subtree": {}
            },
            "flagCirclepin": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "flagCirclepin",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A flag series bindings. Includes `start` event. On click, finds the\nclosest point and marks it with a flag with `'circlepin'` shape."
              },
              "subtree": {}
            },
            "flagDiamondpin": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "flagDiamondpin",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A flag series bindings. Includes `start` event. On click, finds the\nclosest point and marks it with a flag with `'diamondpin'` shape."
              },
              "subtree": {}
            },
            "flagSimplepin": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "flagSimplepin",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A flag series bindings. Includes `start` event.\nOn click, finds the closest point and marks it with a flag without pin\nshape."
              },
              "subtree": {}
            },
            "flagSquarepin": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "flagSquarepin",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A flag series bindings. Includes `start` event.\nOn click, finds the closest point and marks it with a flag with\n`'squarepin'` shape."
              },
              "subtree": {}
            },
            "fullScreen": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "fullScreen",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Displays chart in fullscreen."
              },
              "subtree": {}
            },
            "horizontalLine": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "horizontalLine",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A horizontal line annotation. Includes `start` event."
              },
              "subtree": {}
            },
            "indicators": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "indicators",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Indicators bindings. Includes `init` event to show a popup.\n\nNote: In order to show base series from the chart in the popup's\ndropdown each series requires\n[series.id](https://api.highcharts.com/highstock/series.line.id) to be\ndefined."
              },
              "subtree": {}
            },
            "infinityLine": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "infinityLine",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A line annotation. Includes `start` and one event in `steps` array."
              },
              "subtree": {}
            },
            "labelAnnotation": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "labelAnnotation",
                "excludes": {},
                "description": "A label annotation bindings. Includes `start` event only."
              },
              "subtree": {}
            },
            "measureX": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "measureX",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A measure (x-dimension) annotation bindings. Includes `start` and one\nevent in `steps` array."
              },
              "subtree": {}
            },
            "measureXY": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "measureXY",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A measure (xy-dimension) annotation bindings. Includes `start` and one\nevent in `steps` array."
              },
              "subtree": {}
            },
            "measureY": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "measureY",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A measure (y-dimension) annotation bindings. Includes `start` and one\nevent in `steps` array."
              },
              "subtree": {}
            },
            "parallelChannel": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "parallelChannel",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A parallel channel (tunnel) annotation bindings. Includes `start` and\ntwo events in `steps` array (updates second point, then height)."
              },
              "subtree": {}
            },
            "pitchfork": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "pitchfork",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "An Andrew's pitchfork annotation bindings. Includes `start` and two\nevents in `steps` array (sets second and third control points)."
              },
              "subtree": {}
            },
            "ray": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "ray",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A ray annotation bindings. Includes `start` and one event in `steps`\narray."
              },
              "subtree": {}
            },
            "rectangleAnnotation": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "rectangleAnnotation",
                "excludes": {},
                "description": "A rectangle annotation bindings. Includes `start` and one event\nin `steps` array."
              },
              "subtree": {}
            },
            "saveChart": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "saveChart",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Save a chart in localStorage under `highcharts-chart` key.\nStored items:\n- annotations\n- indicators (with yAxes)\n- flags"
              },
              "subtree": {}
            },
            "segment": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "segment",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A segment annotation bindings. Includes `start` and one event in `steps`\narray."
              },
              "subtree": {}
            },
            "seriesTypeCandlestick": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "seriesTypeCandlestick",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Changes main series to `'candlestick'` type."
              },
              "subtree": {}
            },
            "seriesTypeLine": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "seriesTypeLine",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Changes main series to `'line'` type."
              },
              "subtree": {}
            },
            "seriesTypeOhlc": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "seriesTypeOhlc",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Changes main series to `'ohlc'` type."
              },
              "subtree": {}
            },
            "toggleAnnotations": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "toggleAnnotations",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Hides/shows all annotations on a chart."
              },
              "subtree": {}
            },
            "verticalArrow": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "verticalArrow",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A vertical arrow annotation bindings. Includes `start` event. On click,\nfinds the closest point and marks it with an arrow. Green arrow when\npointing from above, red when pointing from below the point."
              },
              "subtree": {}
            },
            "verticalCounter": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "verticalCounter",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A vertical counter annotation bindings. Includes `start` event. On click,\nfinds the closest point and marks it with a numeric annotation -\nincrementing counter on each add."
              },
              "subtree": {}
            },
            "verticalLabel": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "verticalLabel",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A vertical arrow annotation bindings. Includes `start` event. On click,\nfinds the closest point and marks it with an arrow and a label with\nvalue."
              },
              "subtree": {}
            },
            "verticalLine": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "verticalLine",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A vertical line annotation. Includes `start` event."
              },
              "subtree": {}
            },
            "zoomX": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "zoomX",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Enables zooming in xAxis on a chart. Includes `start` event which\nchanges [chart.zoomType](#chart.zoomType)."
              },
              "subtree": {}
            },
            "zoomXY": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "zoomXY",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Enables zooming in xAxis and yAxis on a chart. Includes `start` event\nwhich changes [chart.zoomType](#chart.zoomType)."
              },
              "subtree": {}
            },
            "zoomY": {
              "meta": {
                "types": {
                  "highcharts.stocktoolsbindingsobject": 1
                },
                "name": "zoomY",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Enables zooming in yAxis on a chart. Includes `start` event which\nchanges [chart.zoomType](#chart.zoomType)."
              },
              "subtree": {}
            }
          }
        },
        "bindingsClassName": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "bindingsClassName",
            "excludes": {},
            "default": "highcharts-bindings-container",
            "description": "A CSS class name where all bindings will be attached to. Multiple\ncharts on the same page should have separate class names to prevent\nduplicating events.\n\nDefault value of versions < 7.0.4 `highcharts-bindings-wrapper`"
          },
          "subtree": {}
        },
        "buttonOptions": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "buttonOptions",
            "excludes": {},
            "description": "A collection of options for buttons appearing in the exporting\nmodule.\n\nIn styled mode, the buttons are styled with the\n`.highcharts-contextbutton` and `.highcharts-button-symbol` classes."
          },
          "subtree": {
            "align": {
              "meta": {
                "types": {
                  "highcharts.alignvalue": 1
                },
                "name": "align",
                "excludes": {},
                "default": "right",
                "description": "Alignment for the buttons."
              },
              "subtree": {}
            },
            "buttonSpacing": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "buttonSpacing",
                "excludes": {},
                "default": 3,
                "description": "The pixel spacing between buttons."
              },
              "subtree": {}
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": "true",
                "description": "Whether to enable buttons."
              },
              "subtree": {}
            },
            "height": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "height",
                "excludes": {},
                "default": 22,
                "description": "Pixel height of the buttons."
              },
              "subtree": {}
            },
            "symbolFill": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "symbolFill",
                "excludes": {},
                "default": "#666666",
                "description": "Fill color for the symbol within the button."
              },
              "subtree": {}
            },
            "symbolSize": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "symbolSize",
                "excludes": {},
                "default": 14,
                "description": "The pixel size of the symbol on the button."
              },
              "subtree": {}
            },
            "symbolStroke": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "symbolStroke",
                "excludes": {},
                "default": "#666666",
                "description": "The color of the symbol's stroke or line."
              },
              "subtree": {}
            },
            "symbolStrokeWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "symbolStrokeWidth",
                "excludes": {},
                "default": 3,
                "description": "The pixel stroke width of the symbol on the button."
              },
              "subtree": {}
            },
            "symbolX": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "symbolX",
                "excludes": {},
                "default": 12.5,
                "description": "The x position of the center of the symbol inside the button."
              },
              "subtree": {}
            },
            "symbolY": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "symbolY",
                "excludes": {},
                "default": 10.5,
                "description": "The y position of the center of the symbol inside the button."
              },
              "subtree": {}
            },
            "text": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "text",
                "excludes": {},
                "default": "null",
                "description": "A text string to add to the individual button."
              },
              "subtree": {}
            },
            "theme": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "theme",
                "excludes": {},
                "description": "A configuration object for the button theme. The object accepts\nSVG properties like `stroke-width`, `stroke` and `fill`.\nTri-state button styles are supported by the `states.hover` and\n`states.select` objects."
              },
              "subtree": {
                "fill": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "fill",
                    "excludes": {},
                    "default": "#ffffff",
                    "description": "The default fill exists only to capture hover events."
                  },
                  "subtree": {}
                },
                "padding": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "padding",
                    "excludes": {},
                    "default": 5,
                    "description": "Padding for the button."
                  },
                  "subtree": {}
                },
                "stroke": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1
                    },
                    "name": "stroke",
                    "excludes": {},
                    "default": "none",
                    "description": "Default stroke for the buttons."
                  },
                  "subtree": {}
                }
              }
            },
            "verticalAlign": {
              "meta": {
                "types": {
                  "highcharts.verticalalignvalue": 1
                },
                "name": "verticalAlign",
                "excludes": {},
                "default": "top",
                "description": "The vertical alignment of the buttons. Can be one of `\"top\"`,\n`\"middle\"` or `\"bottom\"`."
              },
              "subtree": {}
            },
            "width": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "width",
                "excludes": {},
                "default": 24,
                "description": "The pixel width of the button."
              },
              "subtree": {}
            },
            "y": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "y",
                "excludes": {},
                "default": "0",
                "description": "The vertical offset of the button's position relative to its\n`verticalAlign`."
              },
              "subtree": {}
            }
          }
        },
        "events": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "events",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "Events to communicate between Stock Tools and custom GUI."
          },
          "subtree": {
            "deselectButton": {
              "meta": {
                "types": {
                  "function": 1
                },
                "name": "deselectButton",
                "excludes": {},
                "description": "Event fired when button state should change, for example after\nadding an annotation."
              },
              "subtree": {}
            },
            "hidePopup": {
              "meta": {
                "types": {
                  "function": 1
                },
                "name": "hidePopup",
                "excludes": {},
                "description": "A `hidePopop` event. Fired when Popup should be hidden, for exampole\nwhen clicking on an annotation again."
              },
              "subtree": {}
            },
            "selectButton": {
              "meta": {
                "types": {
                  "function": 1
                },
                "name": "selectButton",
                "excludes": {},
                "description": "Event fired on a button click."
              },
              "subtree": {}
            },
            "showPopup": {
              "meta": {
                "types": {
                  "function": 1
                },
                "name": "showPopup",
                "excludes": {},
                "description": "A `showPopup` event. Fired when selecting for example an annotation."
              },
              "subtree": {}
            }
          }
        },
        "iconsURL": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "iconsURL",
            "excludes": {},
            "description": "Path where Highcharts will look for icons. Change this to use icons\nfrom a different server."
          },
          "subtree": {}
        },
        "menuItemHoverStyle": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "menuItemHoverStyle",
            "excludes": {},
            "default": "{\"background\": \"#335cad\", \"color\": \"#ffffff\"}",
            "description": "CSS styles for the hover state of the individual items within the\npopup menu appearing by default when the export icon is clicked. The\nmenu items are rendered in HTML."
          },
          "subtree": {}
        },
        "menuItemStyle": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "menuItemStyle",
            "excludes": {},
            "default": "{\"padding\": \"0.5em 1em\", \"color\": \"#333333\", \"background\": \"none\", \"fontSize\": \"11px/14px\", \"transition\": \"background 250ms, color 250ms\"}",
            "description": "CSS styles for the individual items within the popup menu appearing\nby default when the export icon is clicked. The menu items are\nrendered in HTML. Font size defaults to `11px` on desktop and `14px`\non touch devices."
          },
          "subtree": {}
        },
        "menuStyle": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "menuStyle",
            "excludes": {},
            "default": "{\"border\": \"1px solid #999999\", \"background\": \"#ffffff\", \"padding\": \"5px 0\"}",
            "description": "CSS styles for the popup menu appearing by default when the export\nicon is clicked. This menu is rendered in HTML."
          },
          "subtree": {}
        }
      }
    },
    "navigator": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "navigator",
        "excludes": {},
        "products": {
          "highstock": 1,
          "gantt": 1
        },
        "description": "The navigator is a small series below the main series, displaying\na view of the entire data set. It provides tools to zoom in and\nout on parts of the data as well as panning across the dataset."
      },
      "subtree": {
        "adaptToUpdatedData": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "adaptToUpdatedData",
            "excludes": {},
            "default": "true",
            "description": "Whether the navigator and scrollbar should adapt to updated data\nin the base X axis. When loading data async, as in the demo below,\nthis should be `false`. Otherwise new data will trigger navigator\nredraw, which will cause unwanted looping. In the demo below, the\ndata in the navigator is set only once. On navigating, only the main\nchart content is updated."
          },
          "subtree": {}
        },
        "baseSeries": {
          "meta": {
            "types": {
              "number": 1,
              "string": 1
            },
            "name": "baseSeries",
            "excludes": {},
            "default": "0",
            "description": "An integer identifying the index to use for the base series, or a\nstring representing the id of the series.\n\n**Note**: As of Highcharts 5.0, this is now a deprecated option.\nPrefer [series.showInNavigator](#plotOptions.series.showInNavigator)."
          },
          "subtree": {}
        },
        "enabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enabled",
            "excludes": {},
            "default": "true",
            "description": "Enable or disable the navigator."
          },
          "subtree": {}
        },
        "handles": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "handles",
            "excludes": {},
            "description": "Options for the handles for dragging the zoomed area."
          },
          "subtree": {
            "backgroundColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "backgroundColor",
                "excludes": {},
                "default": "#f2f2f2",
                "description": "The fill for the handle."
              },
              "subtree": {}
            },
            "borderColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "borderColor",
                "excludes": {},
                "default": "#999999",
                "description": "The stroke for the handle border and the stripes inside."
              },
              "subtree": {}
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": true,
                "description": "Allows to enable/disable handles."
              },
              "subtree": {}
            },
            "height": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "height",
                "excludes": {},
                "default": 15,
                "description": "Height for handles."
              },
              "subtree": {}
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 1,
                "description": "The width for the handle border and the stripes inside."
              },
              "subtree": {}
            },
            "symbols": {
              "meta": {
                "types": {
                  "array": "string"
                },
                "name": "symbols",
                "excludes": {},
                "default": "[\"navigator-handle\", \"navigator-handle\"]",
                "description": "Array to define shapes of handles. 0-index for left, 1-index for\nright.\n\nAdditionally, the URL to a graphic can be given on this form:\n`url(graphic.png)`. Note that for the image to be applied to\nexported charts, its URL needs to be accessible by the export\nserver.\n\nCustom callbacks for symbol path generation can also be added to\n`Highcharts.SVGRenderer.prototype.symbols`. The callback is then\nused by its method name, as shown in the demo."
              },
              "subtree": {}
            },
            "width": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "width",
                "excludes": {},
                "default": 7,
                "description": "Width for handles."
              },
              "subtree": {}
            }
          }
        },
        "height": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "height",
            "excludes": {},
            "default": 40,
            "description": "The height of the navigator."
          },
          "subtree": {}
        },
        "margin": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "margin",
            "excludes": {},
            "default": 25,
            "description": "The distance from the nearest element, the X axis or X axis labels."
          },
          "subtree": {}
        },
        "maskFill": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "maskFill",
            "excludes": {},
            "default": "rgba(102,133,194,0.3)",
            "description": "The color of the mask covering the areas of the navigator series\nthat are currently not visible in the main series. The default\ncolor is bluish with an opacity of 0.3 to see the series below."
          },
          "subtree": {}
        },
        "maskInside": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "maskInside",
            "excludes": {},
            "default": true,
            "description": "Whether the mask should be inside the range marking the zoomed\nrange, or outside. In Highstock 1.x it was always `false`."
          },
          "subtree": {}
        },
        "opposite": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "opposite",
            "excludes": {},
            "default": "false",
            "description": "When the chart is inverted, whether to draw the navigator on the\nopposite side."
          },
          "subtree": {}
        },
        "outlineColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "outlineColor",
            "excludes": {},
            "default": "#cccccc",
            "description": "The color of the line marking the currently zoomed area in the\nnavigator."
          },
          "subtree": {}
        },
        "outlineWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "outlineWidth",
            "excludes": {},
            "default": 1,
            "description": "The width of the line marking the currently zoomed area in the\nnavigator."
          },
          "subtree": {}
        },
        "series": {
          "meta": {
            "types": {
              "*": 1,
              "array": "Highcharts.SeriesOptionsType",
              "highcharts.seriesoptionstype": 1
            },
            "name": "series",
            "excludes": {},
            "description": "Options for the navigator series. Available options are the same\nas any series, documented at [plotOptions](#plotOptions.series)\nand [series](#series).\n\nUnless data is explicitly defined on navigator.series, the data\nis borrowed from the first series in the chart.\n\nDefault series options for the navigator series are:\n\n<pre>series: {\n    type: 'areaspline',\n    fillOpacity: 0.05,\n    dataGrouping: {\n        smoothed: true\n    },\n    lineWidth: 1,\n    marker: {\n        enabled: false\n    }\n}</pre>"
          },
          "subtree": {
            "className": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "className",
                "excludes": {},
                "default": "highcharts-navigator-series"
              },
              "subtree": {}
            },
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "color",
                "excludes": {},
                "description": "Sets the fill color of the navigator series."
              },
              "subtree": {}
            },
            "dataGrouping": {
              "meta": {
                "types": {},
                "name": "dataGrouping",
                "excludes": {},
                "description": "Data grouping options for the navigator series.",
                "extends": "plotOptions.series.dataGrouping"
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "average"
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "groupPixelWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "groupPixelWidth",
                    "excludes": {},
                    "default": 2
                  },
                  "subtree": {}
                },
                "smoothed": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "smoothed",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                }
              }
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {},
                "description": "Data label options for the navigator series. Data labels are\ndisabled by default on the navigator series.",
                "extends": "plotOptions.series.dataLabels"
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "zIndex": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "zIndex",
                    "excludes": {},
                    "default": 2
                  },
                  "subtree": {}
                }
              }
            },
            "fillOpacity": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "fillOpacity",
                "excludes": {},
                "default": 0.05,
                "description": "The fill opacity of the navigator series."
              },
              "subtree": {}
            },
            "id": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "id",
                "excludes": {},
                "default": "highcharts-navigator-series"
              },
              "subtree": {}
            },
            "lineColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "null": 1
                },
                "name": "lineColor",
                "excludes": {},
                "default": null,
                "description": "Line color for the navigator series. Allows setting the color\nwhile disallowing the default candlestick setting."
              },
              "subtree": {}
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 1,
                "description": "The pixel line width of the navigator series."
              },
              "subtree": {}
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "pointRange": {
              "meta": {
                "types": {
                  "number": 1,
                  "null": 1
                },
                "name": "pointRange",
                "excludes": {},
                "description": "Since Highstock v8, default value is the same as default\n`pointRange` defined for a specific type (e.g. `null` for\ncolumn type).\n\nIn Highstock version < 8, defaults to 0.",
                "extends": "plotOptions.series.pointRange"
              },
              "subtree": {}
            },
            "threshold": {
              "meta": {
                "types": {
                  "number": 1,
                  "null": 1
                },
                "name": "threshold",
                "excludes": {},
                "default": null,
                "description": "The threshold option. Setting it to 0 will make the default\nnavigator area series draw its area from the 0 value and up."
              },
              "subtree": {}
            },
            "type": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "type",
                "excludes": {},
                "default": "areaspline",
                "description": "The type of the navigator series. Defaults to `areaspline` if\ndefined, otherwise `line`.\n\nHeads up:\nIn column-type navigator, zooming is limited to at least one\npoint with its `pointRange`."
              },
              "subtree": {}
            }
          }
        },
        "xAxis": {
          "meta": {
            "types": {},
            "name": "xAxis",
            "excludes": {},
            "description": "Options for the navigator X axis. Default series options\nfor the navigator xAxis are:\n\n<pre>xAxis: {\n    tickWidth: 0,\n    lineWidth: 0,\n    gridLineWidth: 1,\n    tickPixelInterval: 200,\n    labels: {\n           align: 'left',\n        style: {\n            color: '#888'\n        },\n        x: 3,\n        y: -4\n    }\n}</pre>",
            "extends": "xAxis"
          },
          "subtree": {
            "className": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "className",
                "excludes": {},
                "default": "highcharts-navigator-xaxis"
              },
              "subtree": {}
            },
            "crosshair": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "crosshair",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "gridLineColor": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "gridLineColor",
                "excludes": {},
                "default": "#e6e6e6"
              },
              "subtree": {}
            },
            "gridLineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "gridLineWidth",
                "excludes": {},
                "default": 1
              },
              "subtree": {}
            },
            "labels": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "labels",
                "excludes": {}
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "default": "left"
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "highcharts.cssobject": 1
                    },
                    "name": "style",
                    "excludes": {}
                  },
                  "subtree": {}
                },
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "default": 3
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": -4
                  },
                  "subtree": {}
                }
              }
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "overscroll": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "overscroll",
                "excludes": {},
                "default": 0,
                "description": "Additional range on the right side of the xAxis. Works similar to\nxAxis.maxPadding, but value is set in milliseconds.\nCan be set for both, main xAxis and navigator's xAxis."
              },
              "subtree": {}
            },
            "tickLength": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "tickLength",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "tickPixelInterval": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "tickPixelInterval",
                "excludes": {},
                "default": 200
              },
              "subtree": {}
            }
          }
        },
        "yAxis": {
          "meta": {
            "types": {},
            "name": "yAxis",
            "excludes": {},
            "description": "Options for the navigator Y axis. Default series options\nfor the navigator yAxis are:\n\n<pre>yAxis: {\n    gridLineWidth: 0,\n    startOnTick: false,\n    endOnTick: false,\n    minPadding: 0.1,\n    maxPadding: 0.1,\n    labels: {\n        enabled: false\n    },\n    title: {\n        text: null\n    },\n    tickWidth: 0\n}</pre>",
            "extends": "yAxis"
          },
          "subtree": {
            "className": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "className",
                "excludes": {},
                "default": "highcharts-navigator-yaxis"
              },
              "subtree": {}
            },
            "crosshair": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "crosshair",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "endOnTick": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "endOnTick",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "gridLineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "gridLineWidth",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "labels": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "labels",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "maxPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "maxPadding",
                "excludes": {},
                "default": 0.1
              },
              "subtree": {}
            },
            "minPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "minPadding",
                "excludes": {},
                "default": 0.1
              },
              "subtree": {}
            },
            "startOnTick": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "startOnTick",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "tickLength": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "tickLength",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "tickWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "tickWidth",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "title": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "title",
                "excludes": {}
              },
              "subtree": {
                "text": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "text",
                    "excludes": {},
                    "default": null
                  },
                  "subtree": {}
                }
              }
            }
          }
        }
      }
    },
    "noData": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "noData",
        "excludes": {},
        "products": {
          "highcharts": 1,
          "highstock": 1,
          "gantt": 1
        },
        "description": "Options for displaying a message like \"No data to display\".\nThis feature requires the file no-data-to-display.js to be loaded in the\npage. The actual text to display is set in the lang.noData option."
      },
      "subtree": {
        "attr": {
          "meta": {
            "types": {
              "highcharts.svgattributes": 1
            },
            "name": "attr",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "An object of additional SVG attributes for the no-data label."
          },
          "subtree": {}
        },
        "position": {
          "meta": {
            "types": {
              "highcharts.alignobject": 1
            },
            "name": "position",
            "excludes": {},
            "description": "The position of the no-data label, relative to the plot area."
          },
          "subtree": {
            "align": {
              "meta": {
                "types": {
                  "highcharts.alignvalue": 1
                },
                "name": "align",
                "excludes": {},
                "default": "center",
                "description": "Horizontal alignment of the label."
              },
              "subtree": {}
            },
            "verticalAlign": {
              "meta": {
                "types": {
                  "highcharts.verticalalignvalue": 1
                },
                "name": "verticalAlign",
                "excludes": {},
                "default": "middle",
                "description": "Vertical alignment of the label."
              },
              "subtree": {}
            },
            "x": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "x",
                "excludes": {},
                "default": 0,
                "description": "Horizontal offset of the label, in pixels."
              },
              "subtree": {}
            },
            "y": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "y",
                "excludes": {},
                "default": 0,
                "description": "Vertical offset of the label, in pixels."
              },
              "subtree": {}
            }
          }
        },
        "style": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "style",
            "excludes": {},
            "description": "CSS styles for the no-data label."
          },
          "subtree": {}
        },
        "useHTML": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "useHTML",
            "excludes": {},
            "default": "false",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Whether to insert the label as HTML, or as pseudo-HTML rendered with\nSVG."
          },
          "subtree": {}
        }
      }
    },
    "pane": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "pane",
        "excludes": {},
        "products": {
          "highcharts": 1
        },
        "description": "The pane serves as a container for axes and backgrounds for circular\ngauges and polar charts."
      },
      "subtree": {
        "background": {
          "meta": {
            "types": {
              "array": "*"
            },
            "name": "background",
            "excludes": {},
            "description": "An array of background items for the pane."
          },
          "subtree": {
            "backgroundColor": {
              "meta": {
                "types": {
                  "highcharts.gradientcolorobject": 1
                },
                "name": "backgroundColor",
                "excludes": {},
                "default": "{ linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, stops: [[0, #ffffff], [1, #e6e6e6]] }",
                "products": {
                  "highcharts": 1
                },
                "description": "The background color or gradient for the pane."
              },
              "subtree": {}
            },
            "borderColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "borderColor",
                "excludes": {},
                "default": "#cccccc",
                "products": {
                  "highcharts": 1
                },
                "description": "The pane background border color."
              },
              "subtree": {}
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": 1,
                "products": {
                  "highcharts": 1
                },
                "description": "The pixel border width of the pane background."
              },
              "subtree": {}
            },
            "className": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "className",
                "excludes": {},
                "description": "The class name for this background."
              },
              "subtree": {}
            },
            "innerRadius": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "innerRadius",
                "excludes": {},
                "default": 0,
                "products": {
                  "highcharts": 1
                },
                "description": "The inner radius of the pane background. Can be either numeric\n(pixels) or a percentage string."
              },
              "subtree": {}
            },
            "outerRadius": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "outerRadius",
                "excludes": {},
                "default": "105%",
                "products": {
                  "highcharts": 1
                },
                "description": "The outer radius of the circular pane background. Can be either\nnumeric (pixels) or a percentage string."
              },
              "subtree": {}
            },
            "shape": {
              "meta": {
                "types": {
                  "highcharts.panebackgroundshapevalue": 1
                },
                "name": "shape",
                "excludes": {},
                "default": "circle",
                "products": {
                  "highcharts": 1
                },
                "description": "The shape of the pane background. When `solid`, the background\nis circular. When `arc`, the background extends only from the min\nto the max of the value axis."
              },
              "subtree": {}
            }
          }
        },
        "center": {
          "meta": {
            "types": {
              "array": "(string|number)"
            },
            "name": "center",
            "excludes": {},
            "default": "[\"50%\", \"50%\"]",
            "products": {
              "highcharts": 1
            },
            "description": "The center of a polar chart or angular gauge, given as an array\nof [x, y] positions. Positions can be given as integers that\ntransform to pixels, or as percentages of the plot area size."
          },
          "subtree": {}
        },
        "endAngle": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "endAngle",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "The end angle of the polar X axis or gauge value axis, given in\ndegrees where 0 is north. Defaults to [startAngle](#pane.startAngle)\n+ 360."
          },
          "subtree": {}
        },
        "size": {
          "meta": {
            "types": {
              "number": 1,
              "string": 1
            },
            "name": "size",
            "excludes": {},
            "default": "85%",
            "products": {
              "highcharts": 1
            },
            "description": "The size of the pane, either as a number defining pixels, or a\npercentage defining a percentage of the plot are."
          },
          "subtree": {}
        },
        "startAngle": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "startAngle",
            "excludes": {},
            "default": 0,
            "products": {
              "highcharts": 1
            },
            "description": "The start angle of the polar X axis or gauge axis, given in degrees\nwhere 0 is north. Defaults to 0."
          },
          "subtree": {}
        }
      }
    },
    "plotOptions": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "plotOptions",
        "excludes": {},
        "description": "The plotOptions is a wrapper object for config objects for each series\ntype. The config objects for each series can also be overridden for\neach series item as given in the series array.\n\nConfiguration options for the series are given in three levels. Options\nfor all series in a chart are given in the [plotOptions.series](#plotOptions.series) object. Then options for all series of a specific\ntype are given in the plotOptions of that type, for example\n`plotOptions.line`. Next, options for one single series are given in\n[the series array](#series)."
      },
      "subtree": {
        "abands": {
          "meta": {
            "types": {},
            "name": "abands",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Acceleration bands (ABANDS). This series requires the `linkedTo` option\nto be set and should be loaded after the\n`stock/indicators/indicators.js`.\n\nIn TypeScript the [type](series.abands.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `abands` series are defined in\n   [plotOptions.abands](plotOptions.abands).\n3. Options for one single series are given in\n   [the series instance array](series.abands).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        abands: {\n            // shared options for all abands series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'abands'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "bottomLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "bottomLine",
                "excludes": {}
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "averages"
                  },
                  "subtree": {}
                }
              }
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 1
              },
              "subtree": {}
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "factor": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "factor",
                    "excludes": {},
                    "default": 0.001,
                    "products": {
                      "highstock": 1
                    },
                    "description": "The algorithms factor value used to calculate bands."
                  },
                  "subtree": {}
                },
                "index": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "index",
                    "excludes": {},
                    "default": 3
                  },
                  "subtree": {}
                },
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 20
                  },
                  "subtree": {}
                }
              }
            },
            "topLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "topLine",
                "excludes": {}
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            }
          }
        },
        "ad": {
          "meta": {
            "types": {},
            "name": "ad",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Accumulation Distribution (AD). This series requires `linkedTo` option to\nbe set.\n\nIn TypeScript the [type](series.ad.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `ad` series are defined in\n   [plotOptions.ad](plotOptions.ad).\n3. Options for one single series are given in\n   [the series instance array](series.ad).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        ad: {\n            // shared options for all ad series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'ad'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "volumeSeriesID": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "volumeSeriesID",
                    "excludes": {},
                    "default": "volume",
                    "description": "The id of volume series which is mandatory.\nFor example using OHLC data, volumeSeriesID='volume' means\nthe indicator will be calculated using OHLC and volume values."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "ao": {
          "meta": {
            "types": {},
            "name": "ao",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Awesome Oscillator. This series requires the `linkedTo` option to\nbe set and should be loaded after the `stock/indicators/indicators.js`\n\nIn TypeScript the [type](series.ao.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `ao` series are defined in\n   [plotOptions.ao](plotOptions.ao).\n3. Options for one single series are given in\n   [the series instance array](series.ao).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        ao: {\n            // shared options for all ao series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'ao'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "greaterBarColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "greaterBarColor",
                "excludes": {},
                "default": "#06B535",
                "description": "Color of the Awesome oscillator series bar that is greater than the\nprevious one. Note that if a `color` is defined, the `color`\ntakes precedence and the `greaterBarColor` is ignored."
              },
              "subtree": {}
            },
            "groupPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "groupPadding",
                "excludes": {},
                "default": 0.2
              },
              "subtree": {}
            },
            "lowerBarColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "lowerBarColor",
                "excludes": {},
                "default": "#F21313",
                "description": "Color of the Awesome oscillator series bar that is lower than the\nprevious one. Note that if a `color` is defined, the `color`\ntakes precedence and the `lowerBarColor` is ignored."
              },
              "subtree": {}
            },
            "pointPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointPadding",
                "excludes": {},
                "default": 0.2
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {
                    "halo": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "halo",
                        "excludes": {}
                      },
                      "subtree": {
                        "size": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "size",
                            "excludes": {},
                            "default": 0
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                }
              }
            },
            "threshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "threshold",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            }
          }
        },
        "apo": {
          "meta": {
            "types": {},
            "name": "apo",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Absolute Price Oscillator. This series requires the `linkedTo` option to\nbe set and should be loaded after the `stock/indicators/indicators.js`\nand `stock/indicators/ema.js`.\n\nIn TypeScript the [type](series.apo.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `apo` series are defined in\n   [plotOptions.apo](plotOptions.apo).\n3. Options for one single series are given in\n   [the series instance array](series.apo).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        apo: {\n            // shared options for all apo series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'apo'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.ema"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {},
                "description": "Paramters used in calculation of Absolute Price Oscillator\nseries points."
              },
              "subtree": {
                "periods": {
                  "meta": {
                    "types": {
                      "array": "number"
                    },
                    "name": "periods",
                    "excludes": {},
                    "default": "[10, 20]",
                    "description": "Periods for Absolute Price Oscillator calculations."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "area": {
          "meta": {
            "types": {},
            "name": "area",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "The area series type.\n\nIn TypeScript the [type](series.area.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `area` series are defined in\n   [plotOptions.area](plotOptions.area).\n3. Options for one single series are given in\n   [the series instance array](series.area).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        area: {\n            // shared options for all area series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'area'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.line"
          },
          "subtree": {
            "fillColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "fillColor",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Fill color or gradient for the area. When `null`, the series' `color`\nis used with the series' `fillOpacity`.\n\nIn styled mode, the fill color can be set with the `.highcharts-area`\nclass name."
              },
              "subtree": {}
            },
            "fillOpacity": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "fillOpacity",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Fill opacity for the area. When you set an explicit `fillColor`,\nthe `fillOpacity` is not applied. Instead, you should define the\nopacity in the `fillColor` with an rgba color definition. The\n`fillOpacity` setting, also the default setting, overrides the alpha\ncomponent of the `color` setting.\n\nIn styled mode, the fill opacity can be set with the\n`.highcharts-area` class name."
              },
              "subtree": {}
            },
            "lineColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "lineColor",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "A separate color for the graph line. By default the line takes the\n`color` of the series, but the lineColor setting allows setting a\nseparate color for the line without altering the `fillColor`.\n\nIn styled mode, the line stroke can be set with the\n`.highcharts-graph` class name."
              },
              "subtree": {}
            },
            "negativeFillColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "negativeFillColor",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "A separate color for the negative part of the area.\n\nIn styled mode, a negative color is set with the\n`.highcharts-negative` class name."
              },
              "subtree": {}
            },
            "softThreshold": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "softThreshold",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "When this is true, the series will not cause the Y axis to cross\nthe zero plane (or [threshold](#plotOptions.series.threshold) option)\nunless the data actually crosses the plane.\n\nFor example, if `softThreshold` is `false`, a series of 0, 1, 2,\n3 will make the Y axis show negative values according to the\n`minPadding` option. If `softThreshold` is `true`, the Y axis starts\nat 0."
              },
              "subtree": {}
            },
            "threshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "threshold",
                "excludes": {},
                "default": 0,
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "The Y axis value to serve as the base for the area, for\ndistinguishing between values above and below a threshold. The area\nbetween the graph and the threshold is filled.\n\n* If a number is given, the Y axis will scale to the threshold.\n* If `null`, the scaling behaves like a line series with fill between\n  the graph and the Y axis minimum.\n* If `Infinity` or `-Infinity`, the area between the graph and the\n  corresponing Y axis extreme is filled (since v6.1.0)."
              },
              "subtree": {}
            },
            "trackByArea": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "trackByArea",
                "excludes": {},
                "default": "false",
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Whether the whole area or just the line should respond to mouseover\ntooltips and other mouse or touch events."
              },
              "subtree": {}
            }
          }
        },
        "arearange": {
          "meta": {
            "types": {},
            "name": "arearange",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "The area range series is a carteseian series with higher and lower values for\neach point along an X axis, where the area between the values is shaded.\n\nIn TypeScript the [type](series.arearange.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `arearange` series are defined in\n   [plotOptions.arearange](plotOptions.arearange).\n3. Options for one single series are given in\n   [the series instance array](series.arearange).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        arearange: {\n            // shared options for all arearange series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'arearange'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.area"
          },
          "subtree": {
            "colorKey": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "colorKey",
                "excludes": {},
                "default": "low"
              },
              "subtree": {}
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Extended data labels for range series types. Range series data labels\nhave no `x` and `y` options. Instead, they have `xLow`, `xHigh`,\n`yLow` and `yHigh` options to allow the higher and lower data label\nsets individually.",
                "extends": "plotOptions.series.dataLabels"
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "object": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "default": null
                  },
                  "subtree": {}
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "object": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": null
                  },
                  "subtree": {}
                },
                "xHigh": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "xHigh",
                    "excludes": {},
                    "default": 0,
                    "products": {
                      "highcharts": 1,
                      "highstock": 1
                    },
                    "description": "X offset of the higher data labels relative to the point value."
                  },
                  "subtree": {}
                },
                "xLow": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "xLow",
                    "excludes": {},
                    "default": 0,
                    "products": {
                      "highcharts": 1,
                      "highstock": 1
                    },
                    "description": "X offset of the lower data labels relative to the point value."
                  },
                  "subtree": {}
                },
                "yHigh": {
                  "meta": {
                    "types": {
                      "number": 1,
                      "string": 1
                    },
                    "name": "yHigh",
                    "excludes": {},
                    "default": "-6",
                    "products": {
                      "highcharts": 1,
                      "highstock": 1
                    },
                    "description": "Y offset of the higher data labels relative to the point value."
                  },
                  "subtree": {}
                },
                "yLow": {
                  "meta": {
                    "types": {
                      "number": 1,
                      "string": 1
                    },
                    "name": "yLow",
                    "excludes": {},
                    "default": "16",
                    "products": {
                      "highcharts": 1,
                      "highstock": 1
                    },
                    "description": "Y offset of the lower data labels relative to the point value."
                  },
                  "subtree": {}
                }
              }
            },
            "dragDrop": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dragDrop",
                "excludes": {}
              },
              "subtree": {
                "draggableHigh": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableHigh",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow high value to be dragged individually."
                  },
                  "subtree": {}
                },
                "draggableLow": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableLow",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow low value to be dragged individually."
                  },
                  "subtree": {}
                }
              }
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 1,
                "description": "Pixel width of the arearange graph line."
              },
              "subtree": {}
            },
            "shadow": {
              "meta": {
                "types": {
                  "boolean": 1,
                  "highcharts.shadowoptionsobject": 1
                },
                "name": "shadow",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "Whether to apply a drop shadow to the graph line. Since 2.3 the shadow\ncan be an object configuration containing `color`, `offsetX`, `offsetY`,\n`opacity` and `width`."
              },
              "subtree": {}
            },
            "threshold": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "threshold",
                "excludes": {},
                "default": null
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{series.color}\">●</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>"
                  },
                  "subtree": {}
                }
              }
            },
            "trackByArea": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "trackByArea",
                "excludes": {},
                "default": true,
                "description": "Whether the whole area or just the line should respond to mouseover\ntooltips and other mouse or touch events."
              },
              "subtree": {}
            }
          }
        },
        "areaspline": {
          "meta": {
            "types": {},
            "name": "areaspline",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "The area spline series is an area series where the graph between the\npoints is smoothed into a spline.\n\nIn TypeScript the [type](series.areaspline.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `areaspline` series are defined in\n   [plotOptions.areaspline](plotOptions.areaspline).\n3. Options for one single series are given in\n   [the series instance array](series.areaspline).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        areaspline: {\n            // shared options for all areaspline series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'areaspline'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.area"
          },
          "subtree": {}
        },
        "areasplinerange": {
          "meta": {
            "types": {},
            "name": "areasplinerange",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "The area spline range is a cartesian series type with higher and\nlower Y values along an X axis. The area inside the range is colored, and\nthe graph outlining the area is a smoothed spline.\n\nIn TypeScript the [type](series.areasplinerange.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `areasplinerange` series are defined in\n   [plotOptions.areasplinerange](plotOptions.areasplinerange).\n3. Options for one single series are given in\n   [the series instance array](series.areasplinerange).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        areasplinerange: {\n            // shared options for all areasplinerange series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'areasplinerange'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.arearange"
          },
          "subtree": {}
        },
        "aroon": {
          "meta": {
            "types": {},
            "name": "aroon",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Aroon. This series requires the `linkedTo` option to be\nset and should be loaded after the `stock/indicators/indicators.js`.\n\nIn TypeScript the [type](series.aroon.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `aroon` series are defined in\n   [plotOptions.aroon](plotOptions.aroon).\n3. Options for one single series are given in\n   [the series instance array](series.aroon).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        aroon: {\n            // shared options for all aroon series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'aroon'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "aroonDown": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "aroonDown",
                "excludes": {},
                "description": "aroonDown line options."
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {},
                    "description": "Styles for an aroonDown line."
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the line. If not set, it's inherited from\n[plotOptions.aroon.color](#plotOptions.aroon.color)."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "averages"
                  },
                  "subtree": {}
                }
              }
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {},
                "description": "Paramters used in calculation of aroon series points."
              },
              "subtree": {
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 25,
                    "description": "Period for Aroon indicator"
                  },
                  "subtree": {}
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span><b> {series.name}</b><br/>Aroon Up: {point.y}<br/>Aroon Down: {point.aroonDown}<br/>"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "aroonoscillator": {
          "meta": {
            "types": {},
            "name": "aroonoscillator",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Aroon Oscillator. This series requires the `linkedTo` option to be set\nand should be loaded after the `stock/indicators/indicators.js` and\n`stock/indicators/aroon.js`.\n\nIn TypeScript the [type](series.aroonoscillator.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `aroonoscillator` series are defined in\n   [plotOptions.aroonoscillator](plotOptions.aroonoscillator).\n3. Options for one single series are given in\n   [the series instance array](series.aroonoscillator).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        aroonoscillator: {\n            // shared options for all aroonoscillator series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'aroonoscillator'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.aroon"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {},
                "description": "Paramters used in calculation of aroon oscillator series points."
              },
              "subtree": {
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 25,
                    "products": {
                      "highstock": 1
                    },
                    "description": "Period for Aroon Oscillator"
                  },
                  "subtree": {}
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span><b> {series.name}</b>: {point.y}"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "atr": {
          "meta": {
            "types": {},
            "name": "atr",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Average true range indicator (ATR). This series requires `linkedTo`\noption to be set.\n\nIn TypeScript the [type](series.atr.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `atr` series are defined in\n   [plotOptions.atr](plotOptions.atr).\n3. Options for one single series are given in\n   [the series instance array](series.atr).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        atr: {\n            // shared options for all atr series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'atr'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 14
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "bar": {
          "meta": {
            "types": {},
            "name": "bar",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A bar series is a special type of column series where the columns are\nhorizontal.\n\nIn TypeScript the [type](series.bar.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `bar` series are defined in\n   [plotOptions.bar](plotOptions.bar).\n3. Options for one single series are given in\n   [the series instance array](series.bar).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        bar: {\n            // shared options for all bar series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'bar'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "default": "left",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "Alignment of the data label relative to the data point."
                  },
                  "subtree": {}
                },
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "default": "5",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The x position of the data label relative to the data point."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "bb": {
          "meta": {
            "types": {},
            "name": "bb",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Bollinger bands (BB). This series requires the `linkedTo` option to be\nset and should be loaded after the `stock/indicators/indicators.js` file.\n\nIn TypeScript the [type](series.bb.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `bb` series are defined in\n   [plotOptions.bb](plotOptions.bb).\n3. Options for one single series are given in\n   [the series instance array](series.bb).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        bb: {\n            // shared options for all bb series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'bb'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "bottomLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "bottomLine",
                "excludes": {},
                "description": "Bottom line options."
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {},
                    "description": "Styles for a bottom line."
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the line. If not set, it's inherited from\n[plotOptions.bb.color](#plotOptions.bb.color)."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "averages"
                  },
                  "subtree": {}
                }
              }
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "index": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "index",
                    "excludes": {},
                    "default": 3
                  },
                  "subtree": {}
                },
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 20
                  },
                  "subtree": {}
                },
                "standardDeviation": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "standardDeviation",
                    "excludes": {},
                    "default": 2,
                    "description": "Standard deviation for top and bottom bands."
                  },
                  "subtree": {}
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span><b> {series.name}</b><br/>Top: {point.top}<br/>Middle: {point.middle}<br/>Bottom: {point.bottom}<br/>"
                  },
                  "subtree": {}
                }
              }
            },
            "topLine": {
              "meta": {
                "types": {},
                "name": "topLine",
                "excludes": {},
                "description": "Top line options.",
                "extends": "plotOptions.bb.bottomLine"
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {}
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            }
          }
        },
        "bellcurve": {
          "meta": {
            "types": {},
            "name": "bellcurve",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A bell curve is an areaspline series which represents the probability\ndensity function of the normal distribution. It calculates mean and\nstandard deviation of the base series data and plots the curve according\nto the calculated parameters.\n\nIn TypeScript the [type](series.bellcurve.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `bellcurve` series are defined in\n   [plotOptions.bellcurve](plotOptions.bellcurve).\n3. Options for one single series are given in\n   [the series instance array](series.bellcurve).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        bellcurve: {\n            // shared options for all bellcurve series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'bellcurve'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.areaspline"
          },
          "subtree": {
            "intervals": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "intervals",
                "excludes": {},
                "default": 3,
                "description": "This option allows to define the length of the bell curve. A unit of\nthe length of the bell curve is standard deviation."
              },
              "subtree": {}
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "pointsInInterval": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointsInInterval",
                "excludes": {},
                "default": 3,
                "description": "Defines how many points should be plotted within 1 interval. See\n`plotOptions.bellcurve.intervals`."
              },
              "subtree": {}
            }
          }
        },
        "boxplot": {
          "meta": {
            "types": {},
            "name": "boxplot",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A box plot is a convenient way of depicting groups of data through their\nfive-number summaries: the smallest observation (sample minimum), lower\nquartile (Q1), median (Q2), upper quartile (Q3), and largest observation\n(sample maximum).\n\nIn TypeScript the [type](series.boxplot.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `boxplot` series are defined in\n   [plotOptions.boxplot](plotOptions.boxplot).\n3. Options for one single series are given in\n   [the series instance array](series.boxplot).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        boxplot: {\n            // shared options for all boxplot series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'boxplot'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "colorKey": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "colorKey",
                "excludes": {},
                "default": "high"
              },
              "subtree": {}
            },
            "dragDrop": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dragDrop",
                "excludes": {}
              },
              "subtree": {
                "draggableHigh": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableHigh",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow high value to be dragged individually."
                  },
                  "subtree": {}
                },
                "draggableLow": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableLow",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow low value to be dragged individually."
                  },
                  "subtree": {}
                },
                "draggableQ1": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableQ1",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow Q1 value to be dragged individually."
                  },
                  "subtree": {}
                },
                "draggableQ3": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableQ3",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow Q3 value to be dragged individually."
                  },
                  "subtree": {}
                }
              }
            },
            "fillColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "fillColor",
                "excludes": {},
                "default": "#ffffff",
                "products": {
                  "highcharts": 1
                },
                "description": "The fill color of the box.\n\nIn styled mode, the fill color can be set with the\n`.highcharts-boxplot-box` class."
              },
              "subtree": {}
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 1,
                "products": {
                  "highcharts": 1
                },
                "description": "The width of the line surrounding the box. If any of\n[stemWidth](#plotOptions.boxplot.stemWidth),\n[medianWidth](#plotOptions.boxplot.medianWidth)\nor [whiskerWidth](#plotOptions.boxplot.whiskerWidth) are `null`,\nthe lineWidth also applies to these lines."
              },
              "subtree": {}
            },
            "medianColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1
                },
                "name": "medianColor",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "The color of the median line. If `undefined`, the general series color\napplies.\n\nIn styled mode, the median stroke width can be set with the\n`.highcharts-boxplot-median` class."
              },
              "subtree": {}
            },
            "medianWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "medianWidth",
                "excludes": {},
                "default": 2,
                "products": {
                  "highcharts": 1
                },
                "description": "The pixel width of the median line. If `null`, the\n[lineWidth](#plotOptions.boxplot.lineWidth) is used.\n\nIn styled mode, the median stroke width can be set with the\n`.highcharts-boxplot-median` class."
              },
              "subtree": {}
            },
            "stemDashStyle": {
              "meta": {
                "types": {
                  "highcharts.dashstylevalue": 1
                },
                "name": "stemDashStyle",
                "excludes": {},
                "default": "Solid",
                "products": {
                  "highcharts": 1
                },
                "description": "The dash style of the stem, the vertical line extending from the\nbox to the whiskers."
              },
              "subtree": {}
            },
            "stemWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "stemWidth",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "The width of the stem, the vertical line extending from the box to\nthe whiskers. If `undefined`, the width is inherited from the\n[lineWidth](#plotOptions.boxplot.lineWidth) option.\n\nIn styled mode, the stem stroke width can be set with the\n`.highcharts-boxplot-stem` class."
              },
              "subtree": {}
            },
            "threshold": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "threshold",
                "excludes": {},
                "default": null
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span> <b> {series.name}</b><br/>Maximum: {point.high}<br/>Upper quartile: {point.q3}<br/>Median: {point.median}<br/>Lower quartile: {point.q1}<br/>Minimum: {point.low}<br/>"
                  },
                  "subtree": {}
                }
              }
            },
            "whiskerColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "whiskerColor",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "The color of the whiskers, the horizontal lines marking low and high\nvalues. When `undefined`, the general series color is used.\n\nIn styled mode, the whisker stroke can be set with the\n`.highcharts-boxplot-whisker` class ."
              },
              "subtree": {}
            },
            "whiskerLength": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "whiskerLength",
                "excludes": {},
                "default": "50%",
                "products": {
                  "highcharts": 1
                },
                "description": "The length of the whiskers, the horizontal lines marking low and\nhigh values. It can be a numerical pixel value, or a percentage\nvalue of the box width. Set `0` to disable whiskers."
              },
              "subtree": {}
            },
            "whiskerWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "whiskerWidth",
                "excludes": {},
                "default": 2,
                "products": {
                  "highcharts": 1
                },
                "description": "The line width of the whiskers, the horizontal lines marking low and\nhigh values. When `undefined`, the general\n[lineWidth](#plotOptions.boxplot.lineWidth) applies.\n\nIn styled mode, the whisker stroke width can be set with the\n`.highcharts-boxplot-whisker` class."
              },
              "subtree": {}
            }
          }
        },
        "bubble": {
          "meta": {
            "types": {},
            "name": "bubble",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "A bubble series is a three dimensional series type where each point renders\nan X, Y and Z value. Each points is drawn as a bubble where the position\nalong the X and Y axes mark the X and Y values, and the size of the bubble\nrelates to the Z value.\n\nIn TypeScript the [type](series.bubble.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `bubble` series are defined in\n   [plotOptions.bubble](plotOptions.bubble).\n3. Options for one single series are given in\n   [the series instance array](series.bubble).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        bubble: {\n            // shared options for all bubble series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'bubble'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.scatter"
          },
          "subtree": {
            "animationLimit": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "animationLimit",
                "excludes": {},
                "default": 250,
                "description": "If there are more points in the series than the `animationLimit`, the\nanimation won't run. Animation affects overall performance and doesn't\nwork well with heavy data series."
              },
              "subtree": {}
            },
            "colorKey": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "colorKey",
                "excludes": {},
                "default": "z"
              },
              "subtree": {}
            },
            "displayNegative": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "displayNegative",
                "excludes": {},
                "default": "true",
                "description": "Whether to display negative sized bubbles. The threshold is given\nby the [zThreshold](#plotOptions.bubble.zThreshold) option, and negative\nbubbles can be visualized by setting\n[negativeColor](#plotOptions.bubble.negativeColor)."
              },
              "subtree": {}
            },
            "marker": {
              "meta": {
                "types": {},
                "name": "marker",
                "excludes": {},
                "extends": "plotOptions.series.marker"
              },
              "subtree": {
                "fillOpacity": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "fillOpacity",
                    "excludes": {},
                    "default": 0.5,
                    "description": "The fill opacity of the bubble markers."
                  },
                  "subtree": {}
                },
                "lineColor": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "lineColor",
                    "excludes": {},
                    "default": null
                  },
                  "subtree": {}
                },
                "lineWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "lineWidth",
                    "excludes": {},
                    "default": 1
                  },
                  "subtree": {}
                },
                "states": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "states",
                    "excludes": {}
                  },
                  "subtree": {
                    "hover": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "hover",
                        "excludes": {}
                      },
                      "subtree": {
                        "radiusPlus": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "radiusPlus",
                            "excludes": {},
                            "default": 0
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                },
                "symbol": {
                  "meta": {
                    "types": {
                      "highcharts.symbolkeyvalue": 1,
                      "string": 1
                    },
                    "name": "symbol",
                    "excludes": {},
                    "default": "circle",
                    "description": "A predefined shape or symbol for the marker. Possible values are\n\"circle\", \"square\", \"diamond\", \"triangle\" and \"triangle-down\".\n\nAdditionally, the URL to a graphic can be given on the form\n`url(graphic.png)`. Note that for the image to be applied to exported\ncharts, its URL needs to be accessible by the export server.\n\nCustom callbacks for symbol path generation can also be added to\n`Highcharts.SVGRenderer.prototype.symbols`. The callback is then\nused by its method name, as shown in the demo."
                  },
                  "subtree": {}
                }
              }
            },
            "maxSize": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "maxSize",
                "excludes": {},
                "default": "20%",
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Maximum bubble size. Bubbles will automatically size between the\n`minSize` and `maxSize` to reflect the `z` value of each bubble.\nCan be either pixels (when no unit is given), or a percentage of\nthe smallest one of the plot width and height."
              },
              "subtree": {}
            },
            "minSize": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "minSize",
                "excludes": {},
                "default": 8,
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Minimum bubble size. Bubbles will automatically size between the\n`minSize` and `maxSize` to reflect the `z` value of each bubble.\nCan be either pixels (when no unit is given), or a percentage of\nthe smallest one of the plot width and height."
              },
              "subtree": {}
            },
            "negativeColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "negativeColor",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "When a point's Z value is below the\n[zThreshold](#plotOptions.bubble.zThreshold) setting, this color is used."
              },
              "subtree": {}
            },
            "sizeBy": {
              "meta": {
                "types": {
                  "highcharts.bubblesizebyvalue": 1
                },
                "name": "sizeBy",
                "excludes": {},
                "default": "area",
                "description": "Whether the bubble's value should be represented by the area or the\nwidth of the bubble. The default, `area`, corresponds best to the\nhuman perception of the size of each bubble."
              },
              "subtree": {}
            },
            "sizeByAbsoluteValue": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "sizeByAbsoluteValue",
                "excludes": {},
                "default": "false",
                "products": {
                  "highcharts": 1
                },
                "description": "When this is true, the absolute value of z determines the size of\nthe bubble. This means that with the default `zThreshold` of 0, a\nbubble of value -1 will have the same size as a bubble of value 1,\nwhile a bubble of value 0 will have a smaller size according to\n`minSize`."
              },
              "subtree": {}
            },
            "softThreshold": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "softThreshold",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1
                },
                "description": "When this is true, the series will not cause the Y axis to cross\nthe zero plane (or [threshold](#plotOptions.series.threshold) option)\nunless the data actually crosses the plane.\n\nFor example, if `softThreshold` is `false`, a series of 0, 1, 2,\n3 will make the Y axis show negative values according to the `minPadding`\noption. If `softThreshold` is `true`, the Y axis starts at 0."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {
                    "halo": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "halo",
                        "excludes": {}
                      },
                      "subtree": {
                        "size": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "size",
                            "excludes": {},
                            "default": 5
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "({point.x}, {point.y}), Size: {point.z}"
                  },
                  "subtree": {}
                }
              }
            },
            "turboThreshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "turboThreshold",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "zMax": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zMax",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "The minimum for the Z value range. Defaults to the highest Z value\nin the data."
              },
              "subtree": {}
            },
            "zMin": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zMin",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "The minimum for the Z value range. Defaults to the lowest Z value\nin the data."
              },
              "subtree": {}
            },
            "zThreshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zThreshold",
                "excludes": {},
                "default": 0,
                "products": {
                  "highcharts": 1
                },
                "description": "When [displayNegative](#plotOptions.bubble.displayNegative) is `false`,\nbubbles with lower Z values are skipped. When `displayNegative`\nis `true` and a [negativeColor](#plotOptions.bubble.negativeColor)\nis given, points with lower Z is colored."
              },
              "subtree": {}
            },
            "zoneAxis": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "zoneAxis",
                "excludes": {},
                "default": "z"
              },
              "subtree": {}
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "formatter": {
                  "meta": {
                    "types": {},
                    "name": "formatter",
                    "excludes": {}
                  },
                  "subtree": {}
                },
                "inside": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "inside",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "middle"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "bullet": {
          "meta": {
            "types": {},
            "name": "bullet",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A bullet graph is a variation of a bar graph. The bullet graph features\na single measure, compares it to a target, and displays it in the context\nof qualitative ranges of performance that could be set using\n[plotBands](#yAxis.plotBands) on [yAxis](#yAxis).\n\nIn TypeScript the [type](series.bullet.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `bullet` series are defined in\n   [plotOptions.bullet](plotOptions.bullet).\n3. Options for one single series are given in\n   [the series instance array](series.bullet).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        bullet: {\n            // shared options for all bullet series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'bullet'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "dragDrop": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dragDrop",
                "excludes": {}
              },
              "subtree": {
                "draggableTarget": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableTarget",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow target value to be dragged individually."
                  },
                  "subtree": {}
                }
              }
            },
            "targetOptions": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "targetOptions",
                "excludes": {},
                "description": "All options related with look and positiong of targets."
              },
              "subtree": {
                "borderColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1
                    },
                    "name": "borderColor",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The border color of the rectangle representing the target. When\nnot set, the  point's border color is used.\n\nIn styled mode, use class `highcharts-bullet-target` instead."
                  },
                  "subtree": {}
                },
                "borderWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderWidth",
                    "excludes": {},
                    "default": 0,
                    "description": "The border width of the rectangle representing the target.\n\nIn styled mode, use class `highcharts-bullet-target` instead."
                  },
                  "subtree": {}
                },
                "color": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The color of the rectangle representing the target. When not set,\npoint's color (if set in point's options -\n[`color`](#series.bullet.data.color)) or zone of the target value\n(if [`zones`](#plotOptions.bullet.zones) or\n[`negativeColor`](#plotOptions.bullet.negativeColor) are set)\nor the same color as the point has is used.\n\nIn styled mode, use class `highcharts-bullet-target` instead."
                  },
                  "subtree": {}
                },
                "height": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "height",
                    "excludes": {},
                    "default": 3,
                    "description": "The height of the rectangle representing the target."
                  },
                  "subtree": {}
                },
                "width": {
                  "meta": {
                    "types": {
                      "number": 1,
                      "string": 1
                    },
                    "name": "width",
                    "excludes": {},
                    "default": "140%",
                    "description": "The width of the rectangle representing the target. Could be set\nas a pixel value or as a percentage of a column width."
                  },
                  "subtree": {}
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{series.color}\">●</span> {series.name}: <b>{point.y}</b>. Target: <b>{point.target}</b><br/>"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "candlestick": {
          "meta": {
            "types": {},
            "name": "candlestick",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A candlestick chart is a style of financial chart used to describe price\nmovements over time.\n\nIn TypeScript the [type](series.candlestick.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `candlestick` series are defined in\n   [plotOptions.candlestick](plotOptions.candlestick).\n3. Options for one single series are given in\n   [the series instance array](series.candlestick).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        candlestick: {\n            // shared options for all candlestick series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'candlestick'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.ohlc"
          },
          "subtree": {
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "highcharts.datagroupingapproximationvalue": 1,
                      "function": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "ohlc",
                    "products": {
                      "highstock": 1
                    }
                  },
                  "subtree": {}
                }
              }
            },
            "lineColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "lineColor",
                "excludes": {},
                "default": "#000000",
                "products": {
                  "highstock": 1
                },
                "description": "The color of the line/border of the candlestick.\n\nIn styled mode, the line stroke can be set with the\n`.highcharts-candlestick-series .highcahrts-point` rule."
              },
              "subtree": {}
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 1,
                "products": {
                  "highstock": 1
                },
                "description": "The pixel width of the candlestick line/border. Defaults to `1`.\n\n\nIn styled mode, the line stroke width can be set with the\n`.highcharts-candlestick-series .highcahrts-point` rule."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {},
                    "name": "hover",
                    "excludes": {},
                    "products": {
                      "highstock": 1
                    },
                    "extends": "plotOptions.column.states.hover"
                  },
                  "subtree": {
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 2,
                        "products": {
                          "highstock": 1
                        },
                        "description": "The pixel width of the line/border around the candlestick."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "stickyTracking": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "stickyTracking",
                "excludes": {},
                "default": true,
                "products": {
                  "highstock": 1
                }
              },
              "subtree": {}
            },
            "threshold": {
              "meta": {
                "types": {
                  "number": 1,
                  "null": 1
                },
                "name": "threshold",
                "excludes": {},
                "default": null,
                "products": {
                  "highstock": 1
                }
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {},
                "name": "tooltip",
                "excludes": {},
                "extends": "plotOptions.ohlc.tooltip"
              },
              "subtree": {}
            },
            "upColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "upColor",
                "excludes": {},
                "default": "#ffffff",
                "products": {
                  "highstock": 1
                },
                "description": "The fill color of the candlestick when values are rising.\n\nIn styled mode, the up color can be set with the\n`.highcharts-candlestick-series .highcharts-point-up` rule."
              },
              "subtree": {}
            },
            "upLineColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "upLineColor",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "The specific line color for up candle sticks. The default is to inherit\nthe general `lineColor` setting."
              },
              "subtree": {}
            }
          }
        },
        "cci": {
          "meta": {
            "types": {},
            "name": "cci",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Commodity Channel Index (CCI). This series requires `linkedTo` option to\nbe set.\n\nIn TypeScript the [type](series.cci.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `cci` series are defined in\n   [plotOptions.cci](plotOptions.cci).\n3. Options for one single series are given in\n   [the series instance array](series.cci).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        cci: {\n            // shared options for all cci series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'cci'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 14
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "chaikin": {
          "meta": {
            "types": {},
            "name": "chaikin",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Chaikin Oscillator. This series requires the `linkedTo` option to\nbe set and should be loaded after the `stock/indicators/indicators.js`\nand `stock/indicators/ema.js`.\n\nIn TypeScript the [type](series.chaikin.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `chaikin` series are defined in\n   [plotOptions.chaikin](plotOptions.chaikin).\n3. Options for one single series are given in\n   [the series instance array](series.chaikin).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        chaikin: {\n            // shared options for all chaikin series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'chaikin'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.ema"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {},
                "description": "Paramters used in calculation of Chaikin Oscillator\nseries points."
              },
              "subtree": {
                "periods": {
                  "meta": {
                    "types": {
                      "array": "number"
                    },
                    "name": "periods",
                    "excludes": {},
                    "default": "[3, 10]",
                    "description": "Periods for Chaikin Oscillator calculations."
                  },
                  "subtree": {}
                },
                "volumeSeriesID": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "volumeSeriesID",
                    "excludes": {},
                    "default": "volume",
                    "description": "The id of volume series which is mandatory.\nFor example using OHLC data, volumeSeriesID='volume' means\nthe indicator will be calculated using OHLC and volume values."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "cmf": {
          "meta": {
            "types": {},
            "name": "cmf",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Chaikin Money Flow indicator (cmf).\n\nIn TypeScript the [type](series.cmf.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `cmf` series are defined in\n   [plotOptions.cmf](plotOptions.cmf).\n3. Options for one single series are given in\n   [the series instance array](series.cmf).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        cmf: {\n            // shared options for all cmf series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'cmf'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 14
                  },
                  "subtree": {}
                },
                "volumeSeriesID": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "volumeSeriesID",
                    "excludes": {},
                    "default": "volume",
                    "description": "The id of another series to use its data as volume data for the\nindiator calculation."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "column": {
          "meta": {
            "types": {},
            "name": "column",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "Column series display one column per value along an X axis.\n\nIn TypeScript the [type](series.column.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `column` series are defined in\n   [plotOptions.column](plotOptions.column).\n3. Options for one single series are given in\n   [the series instance array](series.column).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        column: {\n            // shared options for all column series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'column'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.line"
          },
          "subtree": {
            "borderColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "borderColor",
                "excludes": {},
                "default": "#ffffff",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "The color of the border surrounding each column or bar.\n\nIn styled mode, the border stroke can be set with the\n`.highcharts-point` rule."
              },
              "subtree": {}
            },
            "borderRadius": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderRadius",
                "excludes": {},
                "default": 0,
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "The corner radius of the border surrounding each column or bar."
              },
              "subtree": {}
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": "undefined",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "The width of the border surrounding each column or bar. Defaults to\n`1` when there is room for a border, but to `0` when the columns are\nso dense that a border would cover the next column.\n\nIn styled mode, the stroke width can be set with the\n`.highcharts-point` rule."
              },
              "subtree": {}
            },
            "colorByPoint": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "colorByPoint",
                "excludes": {},
                "default": "false",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "When using automatic point colors pulled from the global\n[colors](colors) or series-specific\n[plotOptions.column.colors](series.colors) collections, this option\ndetermines whether the chart should receive one color per series or\none color per point.\n\nIn styled mode, the `colors` or `series.colors` arrays are not\nsupported, and instead this option gives the points individual color\nclass names on the form `highcharts-color-{n}`."
              },
              "subtree": {}
            },
            "colors": {
              "meta": {
                "types": {
                  "array": "(Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject)"
                },
                "name": "colors",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "A series specific or series type specific color set to apply instead\nof the global [colors](#colors) when [colorByPoint](#plotOptions.column.colorByPoint) is true."
              },
              "subtree": {}
            },
            "crisp": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "crisp",
                "excludes": {},
                "default": true,
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "When true, each column edge is rounded to its nearest pixel in order\nto render sharp on screen. In some cases, when there are a lot of\ndensely packed columns, this leads to visible difference in column\nwidths or distance between columns. In these cases, setting `crisp`\nto `false` may look better, even though each column is rendered\nblurry."
              },
              "subtree": {}
            },
            "cropThreshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "cropThreshold",
                "excludes": {},
                "default": 50,
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "When the series contains less points than the crop threshold, all\npoints are drawn, event if the points fall outside the visible plot\narea at the current zoom. The advantage of drawing all points\n(including markers and columns), is that animation is performed on\nupdates. On the other hand, when the series contains more points than\nthe crop threshold, the series data is cropped to only contain points\nthat fall within the plot area. The advantage of cropping away\ninvisible points is to increase performance on large series."
              },
              "subtree": {}
            },
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "groupPixelWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "groupPixelWidth",
                    "excludes": {},
                    "default": "10",
                    "products": {
                      "highstock": 1
                    },
                    "description": "The approximate pixel width of each group. If for example a series\nwith 30 points is displayed over a 600 pixel wide plot area, no grouping\nis performed. If however the series contains so many points that\nthe spacing is less than the groupPixelWidth, Highcharts will try\nto group it into appropriate groups so that each is more or less\ntwo pixels wide. Defaults to `10`."
                  },
                  "subtree": {}
                }
              }
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "object": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "default": null
                  },
                  "subtree": {}
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "object": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": null
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "object": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": null
                  },
                  "subtree": {}
                }
              }
            },
            "depth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "depth",
                "excludes": {},
                "default": "25",
                "products": {
                  "highcharts": 1
                },
                "description": "Depth of the columns in a 3D column chart."
              },
              "subtree": {}
            },
            "edgeColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "edgeColor",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "3D columns only. The color of the edges. Similar to `borderColor`, except it\ndefaults to the same color as the column."
              },
              "subtree": {}
            },
            "edgeWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "edgeWidth",
                "excludes": {},
                "default": "1",
                "products": {
                  "highcharts": 1
                },
                "description": "3D columns only. The width of the colored edges."
              },
              "subtree": {}
            },
            "groupPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "groupPadding",
                "excludes": {},
                "default": 0.2,
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "Padding between each value groups, in x axis units."
              },
              "subtree": {}
            },
            "groupZPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "groupZPadding",
                "excludes": {},
                "default": "1",
                "products": {
                  "highcharts": 1
                },
                "description": "The spacing between columns on the Z Axis in a 3D chart."
              },
              "subtree": {}
            },
            "grouping": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "grouping",
                "excludes": {},
                "default": "true",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "Whether to group non-stacked columns or to let them render\nindependent of each other. Non-grouped columns will be laid out\nindividually and overlap each other."
              },
              "subtree": {}
            },
            "maxPointWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "maxPointWidth",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "The maximum allowed pixel width for a column, translated to the\nheight of a bar in a bar chart. This prevents the columns from\nbecoming too wide when there is a small number of points in the\nchart."
              },
              "subtree": {}
            },
            "minPointLength": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "minPointLength",
                "excludes": {},
                "default": 0,
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "The minimal height for a column or width for a bar. By default,\n0 values are not shown. To visualize a 0 (or close to zero) point,\nset the minimal point length to a pixel value like 3\\. In stacked\ncolumn charts, minPointLength might not be respected for tightly\npacked values."
              },
              "subtree": {}
            },
            "pointPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointPadding",
                "excludes": {},
                "default": 0.1,
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "Padding between each column or bar, in x axis units."
              },
              "subtree": {}
            },
            "pointRange": {
              "meta": {
                "types": {
                  "number": 1,
                  "null": 1
                },
                "name": "pointRange",
                "excludes": {},
                "default": null,
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "The X axis range that each point is valid for. This determines the\nwidth of the column. On a categorized axis, the range will be 1\nby default (one category unit). On linear and datetime axes, the\nrange will be computed as the distance between the two closest data\npoints.\n\nThe default `null` means it is computed automatically, but this\noption can be used to override the automatic value."
              },
              "subtree": {}
            },
            "pointWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointWidth",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "A pixel value specifying a fixed width for each column or bar. When\n`null`, the width is calculated from the `pointPadding` and\n`groupPadding`."
              },
              "subtree": {}
            },
            "softThreshold": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "softThreshold",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "When this is true, the series will not cause the Y axis to cross\nthe zero plane (or [threshold](#plotOptions.series.threshold) option)\nunless the data actually crosses the plane.\n\nFor example, if `softThreshold` is `false`, a series of 0, 1, 2,\n3 will make the Y axis show negative values according to the\n`minPadding` option. If `softThreshold` is `true`, the Y axis starts\nat 0."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {},
                    "name": "hover",
                    "excludes": {},
                    "products": {
                      "highcharts": 1,
                      "highstock": 1,
                      "gantt": 1
                    },
                    "description": "Options for the hovered point. These settings override the normal\nstate options when a point is moused over or touched.",
                    "extends": "plotOptions.series.states.hover"
                  },
                  "subtree": {
                    "borderColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "borderColor",
                        "excludes": {},
                        "products": {
                          "highcharts": 1,
                          "gantt": 1
                        },
                        "description": "A specific border color for the hovered point. Defaults to\ninherit the normal state border color."
                      },
                      "subtree": {}
                    },
                    "brightness": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "brightness",
                        "excludes": {},
                        "default": 0.1,
                        "products": {
                          "highcharts": 1,
                          "highstock": 1,
                          "gantt": 1
                        },
                        "description": "How much to brighten the point on interaction. Requires the\nmain color to be defined in hex or rgb(a) format.\n\nIn styled mode, the hover brightening is by default replaced\nwith a fill-opacity set in the `.highcharts-point:hover`\nrule."
                      },
                      "subtree": {}
                    },
                    "color": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "color",
                        "excludes": {},
                        "products": {
                          "highcharts": 1,
                          "gantt": 1
                        },
                        "description": "A specific color for the hovered point."
                      },
                      "subtree": {}
                    }
                  }
                },
                "select": {
                  "meta": {
                    "types": {},
                    "name": "select",
                    "excludes": {},
                    "products": {
                      "highcharts": 1,
                      "highstock": 1,
                      "gantt": 1
                    },
                    "description": "Options for the selected point. These settings override the\nnormal state options when a point is selected.",
                    "extends": "plotOptions.series.states.select"
                  },
                  "subtree": {
                    "borderColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "borderColor",
                        "excludes": {},
                        "default": "#000000",
                        "products": {
                          "highcharts": 1,
                          "highstock": 1,
                          "gantt": 1
                        },
                        "description": "A specific border color for the selected point."
                      },
                      "subtree": {}
                    },
                    "color": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "color",
                        "excludes": {},
                        "default": "#cccccc",
                        "products": {
                          "highcharts": 1,
                          "highstock": 1,
                          "gantt": 1
                        },
                        "description": "A specific color for the selected point."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "stickyTracking": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "stickyTracking",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "threshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "threshold",
                "excludes": {},
                "default": 0,
                "products": {
                  "highcharts": 1
                },
                "description": "The Y axis value to serve as the base for the columns, for\ndistinguishing between values above and below a threshold. If `null`,\nthe columns extend from the padding Y axis minimum."
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "distance": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "distance",
                    "excludes": {},
                    "default": 6
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "columnpyramid": {
          "meta": {
            "types": {},
            "name": "columnpyramid",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "Column pyramid series display one pyramid per value along an X axis.\nTo display horizontal pyramids, set [chart.inverted](#chart.inverted) to\n`true`.\n\nIn TypeScript the [type](series.columnpyramid.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `columnpyramid` series are defined in\n   [plotOptions.columnpyramid](plotOptions.columnpyramid).\n3. Options for one single series are given in\n   [the series instance array](series.columnpyramid).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        columnpyramid: {\n            // shared options for all columnpyramid series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'columnpyramid'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {}
        },
        "columnrange": {
          "meta": {
            "types": {},
            "name": "columnrange",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "The column range is a cartesian series type with higher and lower\nY values along an X axis. To display horizontal bars, set\n[chart.inverted](#chart.inverted) to `true`.\n\nIn TypeScript the [type](series.columnrange.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `columnrange` series are defined in\n   [plotOptions.columnrange](plotOptions.columnrange).\n3. Options for one single series are given in\n   [the series instance array](series.columnrange).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        columnrange: {\n            // shared options for all columnrange series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'columnrange'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "dragDrop": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dragDrop",
                "excludes": {}
              },
              "subtree": {
                "draggableHigh": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableHigh",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow high value to be dragged individually."
                  },
                  "subtree": {}
                },
                "draggableLow": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableLow",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow low value to be dragged individually."
                  },
                  "subtree": {}
                }
              }
            },
            "pointRange": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "pointRange",
                "excludes": {},
                "default": null
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {}
            }
          }
        },
        "cylinder": {
          "meta": {
            "types": {},
            "name": "cylinder",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A cylinder graph is a variation of a 3d column graph. The cylinder graph\nfeatures cylindrical points.\n\nIn TypeScript the [type](series.cylinder.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `cylinder` series are defined in\n   [plotOptions.cylinder](plotOptions.cylinder).\n3. Options for one single series are given in\n   [the series instance array](series.cylinder).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        cylinder: {\n            // shared options for all cylinder series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'cylinder'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {}
        },
        "dema": {
          "meta": {
            "types": {},
            "name": "dema",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Double exponential moving average (DEMA) indicator. This series requires\n`linkedTo` option to be set and should be loaded after the\n`stock/indicators/indicators.js` and `stock/indicators/ema.js`.\n\nIn TypeScript the [type](series.dema.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `dema` series are defined in\n   [plotOptions.dema](plotOptions.dema).\n3. Options for one single series are given in\n   [the series instance array](series.dema).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        dema: {\n            // shared options for all dema series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'dema'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.ema"
          },
          "subtree": {}
        },
        "dependencywheel": {
          "meta": {
            "types": {},
            "name": "dependencywheel",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A dependency wheel chart is a type of flow diagram, where all nodes are\nlaid out in a circle, and the flow between the are drawn as link bands.\n\nIn TypeScript the [type](series.dependencywheel.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `dependencywheel` series are defined in\n   [plotOptions.dependencywheel](plotOptions.dependencywheel).\n3. Options for one single series are given in\n   [the series instance array](series.dependencywheel).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        dependencywheel: {\n            // shared options for all dependencywheel series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'dependencywheel'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sankey"
          },
          "subtree": {
            "center": {
              "meta": {
                "types": {
                  "array": "(number|string|null)"
                },
                "name": "center",
                "excludes": {},
                "default": "[null, null]",
                "products": {
                  "highcharts": 1
                },
                "description": "The center of the wheel relative to the plot area. Can be\npercentages or pixel values. The default behaviour is to\ncenter the wheel inside the plot area."
              },
              "subtree": {}
            },
            "curveFactor": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "curveFactor",
                "excludes": {},
                "default": 0.6
              },
              "subtree": {}
            },
            "startAngle": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "startAngle",
                "excludes": {},
                "default": 0,
                "description": "The start angle of the dependency wheel, in degrees where 0 is up."
              },
              "subtree": {}
            }
          }
        },
        "dpo": {
          "meta": {
            "types": {},
            "name": "dpo",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Detrended Price Oscillator. This series requires the `linkedTo` option to\nbe set and should be loaded after the `stock/indicators/indicators.js`.\n\nIn TypeScript the [type](series.dpo.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `dpo` series are defined in\n   [plotOptions.dpo](plotOptions.dpo).\n3. Options for one single series are given in\n   [the series instance array](series.dpo).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        dpo: {\n            // shared options for all dpo series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'dpo'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {},
                "description": "Parameters used in calculation of Detrended Price Oscillator series\npoints."
              },
              "subtree": {
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 21,
                    "description": "Period for Detrended Price Oscillator"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "ema": {
          "meta": {
            "types": {},
            "name": "ema",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Exponential moving average indicator (EMA). This series requires the\n`linkedTo` option to be set.\n\nIn TypeScript the [type](series.ema.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `ema` series are defined in\n   [plotOptions.ema](plotOptions.ema).\n3. Options for one single series are given in\n   [the series instance array](series.ema).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        ema: {\n            // shared options for all ema series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'ema'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "index": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "index",
                    "excludes": {},
                    "default": 3,
                    "description": "The point index which indicator calculations will base. For\nexample using OHLC data, index=2 means the indicator will be\ncalculated using Low values.\n\nBy default index value used to be set to 0. Since Highstock 7\nby default index is set to 3 which means that the ema\nindicator will be calculated using Close values."
                  },
                  "subtree": {}
                },
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 9
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "errorbar": {
          "meta": {
            "types": {},
            "name": "errorbar",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "Error bars are a graphical representation of the variability of data and are\nused on graphs to indicate the error, or uncertainty in a reported\nmeasurement.\n\nIn TypeScript the [type](series.errorbar.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `errorbar` series are defined in\n   [plotOptions.errorbar](plotOptions.errorbar).\n3. Options for one single series are given in\n   [the series instance array](series.errorbar).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        errorbar: {\n            // shared options for all errorbar series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'errorbar'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.boxplot"
          },
          "subtree": {
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "color",
                "excludes": {},
                "default": "#000000",
                "products": {
                  "highcharts": 1
                },
                "description": "The main color of the bars. This can be overridden by\n[stemColor](#plotOptions.errorbar.stemColor) and\n[whiskerColor](#plotOptions.errorbar.whiskerColor) individually."
              },
              "subtree": {}
            },
            "grouping": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "grouping",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "linkedTo": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "linkedTo",
                "excludes": {},
                "default": ":previous",
                "products": {
                  "highcharts": 1
                },
                "description": "The parent series of the error bar. The default value links it to\nthe previous series. Otherwise, use the id of the parent series."
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>"
                  },
                  "subtree": {}
                }
              }
            },
            "whiskerWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "whiskerWidth",
                "excludes": {},
                "default": null,
                "products": {
                  "highcharts": 1
                },
                "description": "The line width of the whiskers, the horizontal lines marking low\nand high values. When `null`, the general\n[lineWidth](#plotOptions.errorbar.lineWidth) applies."
              },
              "subtree": {}
            }
          }
        },
        "flags": {
          "meta": {
            "types": {},
            "name": "flags",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Flags are used to mark events in stock charts. They can be added on the\ntimeline, or attached to a specific series.\n\nIn TypeScript the [type](series.flags.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `flags` series are defined in\n   [plotOptions.flags](plotOptions.flags).\n3. Options for one single series are given in\n   [the series instance array](series.flags).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        flags: {\n            // shared options for all flags series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'flags'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "allowOverlapX": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "allowOverlapX",
                "excludes": {},
                "default": false,
                "description": "Whether the flags are allowed to overlap sideways. If `false`, the\nflags are moved sideways using an algorithm that seeks to place every\nflag as close as possible to its original position."
              },
              "subtree": {}
            },
            "fillColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "fillColor",
                "excludes": {},
                "default": "#ffffff",
                "products": {
                  "highstock": 1
                },
                "description": "The fill color for the flags."
              },
              "subtree": {}
            },
            "height": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "height",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Fixed height of the flag's shape. By default, height is\nautocalculated according to the flag's title."
              },
              "subtree": {}
            },
            "lineColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "lineColor",
                "excludes": {},
                "default": "#000000",
                "products": {
                  "highstock": 1
                },
                "description": "The color of the line/border of the flag.\n\nIn styled mode, the stroke is set in the\n`.highcharts-flag-series.highcharts-point` rule."
              },
              "subtree": {}
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 1,
                "products": {
                  "highstock": 1
                },
                "description": "The pixel width of the flag's line/border."
              },
              "subtree": {}
            },
            "onKey": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "onKey",
                "excludes": {},
                "default": "y",
                "products": {
                  "highstock": 1
                },
                "description": "In case the flag is placed on a series, on what point key to place\nit. Line and columns have one key, `y`. In range or OHLC-type series,\nhowever, the flag can optionally be placed on the `open`, `high`,\n `low` or `close` key."
              },
              "subtree": {}
            },
            "onSeries": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "onSeries",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "The id of the series that the flags should be drawn on. If no id\nis given, the flags are drawn on the x axis."
              },
              "subtree": {}
            },
            "pointRange": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointRange",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "shape": {
              "meta": {
                "types": {
                  "highcharts.flagsshapevalue": 1
                },
                "name": "shape",
                "excludes": {},
                "default": "flag",
                "products": {
                  "highstock": 1
                },
                "description": "The shape of the marker. Can be one of \"flag\", \"circlepin\",\n\"squarepin\", or an image of the format `url(/path-to-image.jpg)`.\nIndividual shapes can also be set for each point."
              },
              "subtree": {}
            },
            "stackDistance": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "stackDistance",
                "excludes": {},
                "default": 12,
                "products": {
                  "highstock": 1
                },
                "description": "When multiple flags in the same series fall on the same value, this\nnumber determines the vertical offset between them."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {},
                    "name": "hover",
                    "excludes": {},
                    "products": {
                      "highstock": 1
                    },
                    "extends": "plotOptions.column.states.hover"
                  },
                  "subtree": {
                    "fillColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "fillColor",
                        "excludes": {},
                        "default": "#ccd6eb",
                        "products": {
                          "highstock": 1
                        },
                        "description": "The fill or background color of the flag."
                      },
                      "subtree": {}
                    },
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "default": "#000000",
                        "products": {
                          "highstock": 1
                        },
                        "description": "The color of the line/border of the flag."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "style": {
              "meta": {
                "types": {
                  "highcharts.cssobject": 1
                },
                "name": "style",
                "excludes": {},
                "default": "{\"fontSize\": \"11px\", \"fontWeight\": \"bold\"}",
                "products": {
                  "highstock": 1
                },
                "description": "The text styles of the flag.\n\nIn styled mode, the styles are set in the\n`.highcharts-flag-series .highcharts-point` rule."
              },
              "subtree": {}
            },
            "textAlign": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "textAlign",
                "excludes": {},
                "default": "center",
                "products": {
                  "highstock": 1
                },
                "description": "Text alignment for the text inside the flag."
              },
              "subtree": {}
            },
            "threshold": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "threshold",
                "excludes": {},
                "default": null
              },
              "subtree": {}
            },
            "title": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "title",
                "excludes": {},
                "default": "A",
                "products": {
                  "highstock": 1
                },
                "description": "The text to display on each flag. This can be defined on series\nlevel, or individually for each point. Defaults to `\"A\"`."
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {},
                "name": "tooltip",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Specific tooltip options for flag series. Flag series tooltips are\ndifferent from most other types in that a flag doesn't have a data\nvalue, so the tooltip rather displays the `text` option for each\npoint.",
                "extends": "plotOptions.series.tooltip"
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "{point.text}<br/>"
                  },
                  "subtree": {}
                }
              }
            },
            "useHTML": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "useHTML",
                "excludes": {},
                "default": "false",
                "products": {
                  "highstock": 1
                },
                "description": "Whether to use HTML to render the flag texts. Using HTML allows for\nadvanced formatting, images and reliable bi-directional text\nrendering. Note that exported images won't respect the HTML, and that\nHTML won't respect Z-index settings."
              },
              "subtree": {}
            },
            "width": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "width",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Fixed width of the flag's shape. By default, width is autocalculated\naccording to the flag's title."
              },
              "subtree": {}
            },
            "y": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "y",
                "excludes": {},
                "default": -30,
                "products": {
                  "highstock": 1
                },
                "description": "The y position of the top left corner of the flag relative to either\nthe series (if onSeries is defined), or the x axis. Defaults to\n`-30`."
              },
              "subtree": {}
            }
          }
        },
        "funnel": {
          "meta": {
            "types": {},
            "name": "funnel",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "Funnel charts are a type of chart often used to visualize stages in a\nsales project, where the top are the initial stages with the most\nclients. It requires that the modules/funnel.js file is loaded.\n\nIn TypeScript the [type](series.funnel.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `funnel` series are defined in\n   [plotOptions.funnel](plotOptions.funnel).\n3. Options for one single series are given in\n   [the series instance array](series.funnel).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        funnel: {\n            // shared options for all funnel series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'funnel'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.pie"
          },
          "subtree": {
            "animation": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "animation",
                "excludes": {},
                "default": false,
                "description": "Initial animation is by default disabled for the funnel chart."
              },
              "subtree": {}
            },
            "center": {
              "meta": {
                "types": {
                  "array": "(number|string)"
                },
                "name": "center",
                "excludes": {},
                "default": "[\"50%\", \"50%\"]",
                "description": "The center of the series. By default, it is centered in the middle\nof the plot area, so it fills the plot area height."
              },
              "subtree": {}
            },
            "height": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "height",
                "excludes": {},
                "default": "100%",
                "description": "The height of the funnel or pyramid. If it is a number it defines\nthe pixel height, if it is a percentage string it is the percentage\nof the plot area height."
              },
              "subtree": {}
            },
            "neckHeight": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "neckHeight",
                "excludes": {},
                "default": "25%",
                "description": "The height of the neck, the lower part of the funnel. A number\ndefines pixel width, a percentage string defines a percentage of the\nplot area height."
              },
              "subtree": {}
            },
            "neckWidth": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "neckWidth",
                "excludes": {},
                "default": "30%",
                "description": "The width of the neck, the lower part of the funnel. A number defines\npixel width, a percentage string defines a percentage of the plot\narea width."
              },
              "subtree": {}
            },
            "reversed": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "reversed",
                "excludes": {},
                "default": false,
                "description": "A reversed funnel has the widest area down. A reversed funnel with\nno neck width and neck height is a pyramid."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {},
                "description": "Options for the series states."
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {},
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {}
                },
                "select": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "select",
                    "excludes": {},
                    "description": "Options for a selected funnel item."
                  },
                  "subtree": {
                    "borderColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "borderColor",
                        "excludes": {},
                        "default": "#000000",
                        "description": "A specific border color for the selected point."
                      },
                      "subtree": {}
                    },
                    "color": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "color",
                        "excludes": {},
                        "default": "#cccccc",
                        "description": "A specific color for the selected point."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "width": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "width",
                "excludes": {},
                "default": "90%",
                "description": "The width of the funnel compared to the width of the plot area,\nor the pixel width if it is a number."
              },
              "subtree": {}
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "connectorWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "connectorWidth",
                    "excludes": {},
                    "default": 1
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "funnel3d": {
          "meta": {
            "types": {},
            "name": "funnel3d",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A funnel3d is a 3d version of funnel series type. Funnel charts are\na type of chart often used to visualize stages in a sales project,\nwhere the top are the initial stages with the most clients.\n\nIt requires that the `highcharts-3d.js`, `cylinder.js` and\n`funnel3d.js` module are loaded.\n\nIn TypeScript the [type](series.funnel3d.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `funnel3d` series are defined in\n   [plotOptions.funnel3d](plotOptions.funnel3d).\n3. Options for one single series are given in\n   [the series instance array](series.funnel3d).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        funnel3d: {\n            // shared options for all funnel3d series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'funnel3d'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "animation": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "animation",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "colorByPoint": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "colorByPoint",
                "excludes": {},
                "default": true
              },
              "subtree": {}
            },
            "edgeWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "edgeWidth",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "gradientForSides": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "gradientForSides",
                "excludes": {},
                "default": true,
                "products": {
                  "highcharts": 1
                },
                "description": "By deafult sides fill is set to a gradient through this option being\nset to `true`. Set to `false` to get solid color for the sides."
              },
              "subtree": {}
            },
            "height": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "height",
                "excludes": {},
                "default": "100%",
                "products": {
                  "highcharts": 1
                },
                "description": "The height of the series. If it is a number it defines\nthe pixel height, if it is a percentage string it is the percentage\nof the plot area height."
              },
              "subtree": {}
            },
            "neckHeight": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "neckHeight",
                "excludes": {},
                "default": "25%",
                "products": {
                  "highcharts": 1
                },
                "description": "The height of the neck, the lower part of the funnel. A number\ndefines pixel width, a percentage string defines a percentage\nof the plot area height."
              },
              "subtree": {}
            },
            "neckWidth": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "neckWidth",
                "excludes": {},
                "default": "30%",
                "products": {
                  "highcharts": 1
                },
                "description": "The width of the neck, the lower part of the funnel. A number defines\npixel width, a percentage string defines a percentage of the plot\narea width."
              },
              "subtree": {}
            },
            "reversed": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "reversed",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1
                },
                "description": "A reversed funnel has the widest area down. A reversed funnel with\nno neck width and neck height is a pyramid."
              },
              "subtree": {}
            },
            "showInLegend": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showInLegend",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "width": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "width",
                "excludes": {},
                "default": "90%",
                "products": {
                  "highcharts": 1
                },
                "description": "The max width of the series compared to the width of the plot area,\nor the pixel width if it is a number."
              },
              "subtree": {}
            }
          }
        },
        "gantt": {
          "meta": {
            "types": {},
            "name": "gantt",
            "excludes": {},
            "products": {
              "gantt": 1
            },
            "description": "A `gantt` series. If the [type](#series.gantt.type) option is not specified,\nit is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.gantt.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `gantt` series are defined in\n   [plotOptions.gantt](plotOptions.gantt).\n3. Options for one single series are given in\n   [the series instance array](series.gantt).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        gantt: {\n            // shared options for all gantt series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'gantt'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.xrange"
          },
          "subtree": {
            "connectors": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "connectors",
                "excludes": {}
              },
              "subtree": {
                "animation": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "animation",
                    "excludes": {}
                  },
                  "subtree": {
                    "reversed": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "reversed",
                        "excludes": {},
                        "default": true
                      },
                      "subtree": {}
                    }
                  }
                },
                "endMarker": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "endMarker",
                    "excludes": {}
                  },
                  "subtree": {
                    "align": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "align",
                        "excludes": {},
                        "default": "right"
                      },
                      "subtree": {}
                    },
                    "enabled": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "enabled",
                        "excludes": {},
                        "default": false
                      },
                      "subtree": {}
                    }
                  }
                },
                "startMarker": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "startMarker",
                    "excludes": {}
                  },
                  "subtree": {
                    "align": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "align",
                        "excludes": {},
                        "default": "left"
                      },
                      "subtree": {}
                    },
                    "enabled": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "enabled",
                        "excludes": {},
                        "default": true
                      },
                      "subtree": {}
                    },
                    "fill": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "fill",
                        "excludes": {},
                        "default": "#fa0"
                      },
                      "subtree": {}
                    },
                    "radius": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "radius",
                        "excludes": {},
                        "default": 4
                      },
                      "subtree": {}
                    },
                    "symbol": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "symbol",
                        "excludes": {},
                        "default": "arrow-filled"
                      },
                      "subtree": {}
                    }
                  }
                },
                "type": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "type",
                    "excludes": {},
                    "default": "simpleConnect"
                  },
                  "subtree": {}
                }
              }
            },
            "dragDrop": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dragDrop",
                "excludes": {}
              },
              "subtree": {
                "draggableEnd": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableEnd",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow end value to be dragged individually."
                  },
                  "subtree": {}
                },
                "draggableStart": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableStart",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow start value to be dragged individually."
                  },
                  "subtree": {}
                }
              }
            },
            "grouping": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "grouping",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "partialFill": {
              "meta": {
                "types": {},
                "name": "partialFill",
                "excludes": {},
                "products": {
                  "gantt": 1
                },
                "description": "A partial fill for each point, typically used to visualize how much\nof a task is performed. See [completed](series.gantt.data.completed)."
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "headerFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "headerFormat",
                    "excludes": {},
                    "default": "<span style=\"font-size: 10px\">{series.name}</span><br/>"
                  },
                  "subtree": {}
                },
                "pointFormat": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": null
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "gauge": {
          "meta": {
            "types": {},
            "name": "gauge",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "Gauges are circular plots displaying one or more values with a dial pointing\nto values along the perimeter.\n\nIn TypeScript the [type](series.gauge.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `gauge` series are defined in\n   [plotOptions.gauge](plotOptions.gauge).\n3. Options for one single series are given in\n   [the series instance array](series.gauge).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        gauge: {\n            // shared options for all gauge series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'gauge'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.line"
          },
          "subtree": {
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "Data labels for the gauge. For gauges, the data labels are enabled\nby default and shown in a bordered box below the point.",
                "extends": "plotOptions.series.dataLabels"
              },
              "subtree": {
                "borderColor": {
                  "meta": {
                    "types": {
                      "color": 1
                    },
                    "name": "borderColor",
                    "excludes": {},
                    "default": "#cccccc",
                    "products": {
                      "highcharts": 1,
                      "highmaps": 1
                    },
                    "description": "The border color for the data label."
                  },
                  "subtree": {}
                },
                "borderRadius": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderRadius",
                    "excludes": {},
                    "default": 3,
                    "products": {
                      "highcharts": 1,
                      "highmaps": 1
                    },
                    "description": "The border radius in pixels for the gauge's data label."
                  },
                  "subtree": {}
                },
                "borderWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderWidth",
                    "excludes": {},
                    "default": 1,
                    "products": {
                      "highcharts": 1,
                      "highmaps": 1
                    },
                    "description": "The border width in pixels for the gauge data label."
                  },
                  "subtree": {}
                },
                "crop": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "crop",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "defer": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "defer",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true,
                    "products": {
                      "highcharts": 1,
                      "highmaps": 1
                    },
                    "description": "Enable or disable the data labels."
                  },
                  "subtree": {}
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "top",
                    "products": {
                      "highcharts": 1,
                      "highmaps": 1
                    },
                    "description": "The vertical alignment of the data label."
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": 15,
                    "products": {
                      "highcharts": 1,
                      "highmaps": 1
                    },
                    "description": "The y position offset of the label relative to the center of the\ngauge."
                  },
                  "subtree": {}
                },
                "zIndex": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "zIndex",
                    "excludes": {},
                    "default": 2,
                    "products": {
                      "highcharts": 1,
                      "highmaps": 1
                    },
                    "description": "The Z index of the data labels. A value of 2 display them behind\nthe dial."
                  },
                  "subtree": {}
                }
              }
            },
            "dial": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dial",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "Options for the dial or arrow pointer of the gauge.\n\nIn styled mode, the dial is styled with the\n`.highcharts-gauge-series .highcharts-dial` rule."
              },
              "subtree": {
                "backgroundColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "backgroundColor",
                    "excludes": {},
                    "default": "#000000",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The background or fill color of the gauge's dial."
                  },
                  "subtree": {}
                },
                "baseLength": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "baseLength",
                    "excludes": {},
                    "default": "70%",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The length of the dial's base part, relative to the total radius\nor length of the dial."
                  },
                  "subtree": {}
                },
                "baseWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "baseWidth",
                    "excludes": {},
                    "default": "3",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The pixel width of the base of the gauge dial. The base is the part\nclosest to the pivot, defined by baseLength."
                  },
                  "subtree": {}
                },
                "borderColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "borderColor",
                    "excludes": {},
                    "default": "#cccccc",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The border color or stroke of the gauge's dial. By default, the\nborderWidth is 0, so this must be set in addition to a custom border\ncolor."
                  },
                  "subtree": {}
                },
                "borderWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderWidth",
                    "excludes": {},
                    "default": "0",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The width of the gauge dial border in pixels."
                  },
                  "subtree": {}
                },
                "radius": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "radius",
                    "excludes": {},
                    "default": "80%",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The radius or length of the dial, in percentages relative to the\nradius of the gauge itself."
                  },
                  "subtree": {}
                },
                "rearLength": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "rearLength",
                    "excludes": {},
                    "default": "10%",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The length of the dial's rear end, the part that extends out on the\nother side of the pivot. Relative to the dial's length."
                  },
                  "subtree": {}
                },
                "topWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "topWidth",
                    "excludes": {},
                    "default": "1",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The width of the top of the dial, closest to the perimeter. The pivot\nnarrows in from the base to the top."
                  },
                  "subtree": {}
                }
              }
            },
            "overshoot": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "overshoot",
                "excludes": {},
                "default": "0",
                "products": {
                  "highcharts": 1
                },
                "description": "Allow the dial to overshoot the end of the perimeter axis by this\nmany degrees. Say if the gauge axis goes from 0 to 60, a value of\n100, or 1000, will show 5 degrees beyond the end of the axis when this\noption is set to 5."
              },
              "subtree": {}
            },
            "pivot": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "pivot",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "Options for the pivot or the center point of the gauge.\n\nIn styled mode, the pivot is styled with the\n`.highcharts-gauge-series .highcharts-pivot` rule."
              },
              "subtree": {
                "backgroundColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "backgroundColor",
                    "excludes": {},
                    "default": "#000000",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The background color or fill of the pivot."
                  },
                  "subtree": {}
                },
                "borderColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "borderColor",
                    "excludes": {},
                    "default": "#cccccc",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The border or stroke color of the pivot. In able to change this,\nthe borderWidth must also be set to something other than the default\n0."
                  },
                  "subtree": {}
                },
                "borderWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderWidth",
                    "excludes": {},
                    "default": "0",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The border or stroke width of the pivot."
                  },
                  "subtree": {}
                },
                "radius": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "radius",
                    "excludes": {},
                    "default": "5",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The pixel radius of the pivot."
                  },
                  "subtree": {}
                }
              }
            },
            "showInLegend": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showInLegend",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1
                },
                "description": "Whether to display this particular series or series type in the\nlegend. Defaults to false for gauge series."
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "headerFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "headerFormat",
                    "excludes": {},
                    "default": ""
                  },
                  "subtree": {}
                }
              }
            },
            "wrap": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "wrap",
                "excludes": {},
                "default": "true",
                "products": {
                  "highcharts": 1
                },
                "description": "When this option is `true`, the dial will wrap around the axes. For\ninstance, in a full-range gauge going from 0 to 360, a value of 400\nwill point to 40\\. When `wrap` is `false`, the dial stops at 360."
              },
              "subtree": {}
            }
          }
        },
        "heatmap": {
          "meta": {
            "types": {},
            "name": "heatmap",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highmaps": 1
            },
            "description": "A heatmap is a graphical representation of data where the individual\nvalues contained in a matrix are represented as colors.\n\nIn TypeScript the [type](series.heatmap.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `heatmap` series are defined in\n   [plotOptions.heatmap](plotOptions.heatmap).\n3. Options for one single series are given in\n   [the series instance array](series.heatmap).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        heatmap: {\n            // shared options for all heatmap series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'heatmap'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.scatter"
          },
          "subtree": {
            "animation": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "animation",
                "excludes": {},
                "default": false,
                "description": "Animation is disabled by default on the heatmap series."
              },
              "subtree": {}
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": 0,
                "description": "The border width for each heat map item."
              },
              "subtree": {}
            },
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "color",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "The main color of the series. In heat maps this color is rarely used,\nas we mostly use the color to denote the value of each point. Unless\noptions are set in the [colorAxis](#colorAxis), the default value\nis pulled from the [options.colors](#colors) array."
              },
              "subtree": {}
            },
            "colorKey": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "colorKey",
                "excludes": {},
                "default": "value"
              },
              "subtree": {}
            },
            "colsize": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "colsize",
                "excludes": {},
                "default": "1",
                "products": {
                  "highcharts": 1,
                  "highmaps": 1
                },
                "description": "The column size - how many X axis units each column in the heatmap\nshould span."
              },
              "subtree": {}
            },
            "nullColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "nullColor",
                "excludes": {},
                "default": "#f7f7f7",
                "description": "The color applied to null points. In styled mode, a general CSS class\nis applied instead."
              },
              "subtree": {}
            },
            "pointPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointPadding",
                "excludes": {},
                "default": "0",
                "description": "Padding between the points in the heatmap."
              },
              "subtree": {}
            },
            "rowsize": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "rowsize",
                "excludes": {},
                "default": "1",
                "products": {
                  "highcharts": 1,
                  "highmaps": 1
                },
                "description": "The row size - how many Y axis units each heatmap row should span."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {
                    "brightness": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "brightness",
                        "excludes": {},
                        "default": 0.2,
                        "description": "How much to brighten the point on interaction. Requires the\nmain color to be defined in hex or rgb(a) format.\n\nIn styled mode, the hover brightening is by default replaced\nwith a fill-opacity set in the `.highcharts-point:hover`\nrule."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "{point.x}, {point.y}: {point.value}<br/>"
                  },
                  "subtree": {}
                }
              }
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "crop": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "crop",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "formatter": {
                  "meta": {
                    "types": {},
                    "name": "formatter",
                    "excludes": {}
                  },
                  "subtree": {}
                },
                "inside": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "inside",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "overflow": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "overflow",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "padding": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "padding",
                    "excludes": {},
                    "default": 0
                  },
                  "subtree": {}
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "middle"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "histogram": {
          "meta": {
            "types": {},
            "name": "histogram",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A histogram is a column series which represents the distribution of the\ndata set in the base series. Histogram splits data into bins and shows\ntheir frequencies.\n\nIn TypeScript the [type](series.histogram.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `histogram` series are defined in\n   [plotOptions.histogram](plotOptions.histogram).\n3. Options for one single series are given in\n   [the series instance array](series.histogram).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        histogram: {\n            // shared options for all histogram series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'histogram'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "binWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "binWidth",
                "excludes": {},
                "description": "Width of each bin. By default the bin's width is calculated as\n`(max - min) / number of bins`. This option takes precedence over\n[binsNumber](#plotOptions.histogram.binsNumber)."
              },
              "subtree": {}
            },
            "binsNumber": {
              "meta": {
                "types": {
                  "\"square-root\"": 1,
                  "\"sturges\"": 1,
                  "\"rice\"": 1,
                  "number": 1,
                  "function": 1
                },
                "name": "binsNumber",
                "excludes": {},
                "default": "square-root",
                "description": "A preferable number of bins. It is a suggestion, so a histogram may\nhave a different number of bins. By default it is set to the square\nroot of the base series' data length. Available options are:\n`square-root`, `sturges`, `rice`. You can also define a function\nwhich takes a `baseSeries` as a parameter and should return a\npositive integer."
              },
              "subtree": {}
            },
            "groupPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "groupPadding",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "grouping": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "grouping",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "pointPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointPadding",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "pointPlacement": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "pointPlacement",
                "excludes": {},
                "default": "between"
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "headerFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "headerFormat",
                    "excludes": {},
                    "default": ""
                  },
                  "subtree": {}
                },
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"font-size: 10px\">{point.x} - {point.x2}</span><br/><span style=\"color:{point.color}\">●</span> {series.name} <b>{point.y}</b><br/>"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "ikh": {
          "meta": {
            "types": {},
            "name": "ikh",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Ichimoku Kinko Hyo (IKH). This series requires `linkedTo` option to be\nset.\n\nIn TypeScript the [type](series.ikh.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `ikh` series are defined in\n   [plotOptions.ikh](plotOptions.ikh).\n3. Options for one single series are given in\n   [the series instance array](series.ikh).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        ikh: {\n            // shared options for all ikh series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'ikh'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "chikouLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "chikouLine",
                "excludes": {},
                "description": "The styles for Chikou line"
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the line."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "ichimoku-averages"
                  },
                  "subtree": {}
                }
              }
            },
            "kijunLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "kijunLine",
                "excludes": {},
                "description": "The styles for Kijun line"
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the line."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 26
                  },
                  "subtree": {}
                },
                "periodSenkouSpanB": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "periodSenkouSpanB",
                    "excludes": {},
                    "default": 52,
                    "description": "The base period for Senkou Span B calculations"
                  },
                  "subtree": {}
                },
                "periodTenkan": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "periodTenkan",
                    "excludes": {},
                    "default": 9,
                    "description": "The base period for Tenkan calculations."
                  },
                  "subtree": {}
                }
              }
            },
            "senkouSpan": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "senkouSpan",
                "excludes": {},
                "description": "The styles for area between Senkou Span A and B."
              },
              "subtree": {
                "color": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "description": "Color of the area between Senkou Span A and B,\nwhen Senkou Span A is above Senkou Span B. Note that if\na `style.fill` is defined, the `color` takes precedence and\nthe `style.fill` is ignored."
                  },
                  "subtree": {}
                },
                "negativeColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "negativeColor",
                    "excludes": {},
                    "description": "Color of the area between Senkou Span A and B,\nwhen Senkou Span A is under Senkou Span B."
                  },
                  "subtree": {}
                },
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "fill": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "fill",
                        "excludes": {},
                        "default": "rgba(255, 0, 0, 0.5)",
                        "description": "Color of the area between Senkou Span A and B."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "senkouSpanA": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "senkouSpanA",
                "excludes": {},
                "description": "The styles for Senkou Span A line"
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the line."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "senkouSpanB": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "senkouSpanB",
                "excludes": {},
                "description": "The styles for Senkou Span B line"
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the line."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "tenkanLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tenkanLine",
                "excludes": {},
                "description": "The styles for Tenkan line"
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the line."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span> <b> {series.name}</b><br/>TENKAN SEN: {point.tenkanSen:.3f}<br/>KIJUN SEN: {point.kijunSen:.3f}<br/>CHIKOU SPAN: {point.chikouSpan:.3f}<br/>SENKOU SPAN A: {point.senkouSpanA:.3f}<br/>SENKOU SPAN B: {point.senkouSpanB:.3f}<br/>"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "item": {
          "meta": {
            "types": {},
            "name": "item",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "An item chart is an infographic chart where a number of items are laid\nout in either a rectangular or circular pattern. It can be used to\nvisualize counts within a group, or for the circular pattern, typically\na parliament.\n\nThe circular layout has much in common with a pie chart. Many of the item\nseries options, like `center`, `size` and data label positioning, are\ninherited from the pie series and don't apply for rectangular layouts.\n\nIn TypeScript the [type](series.item.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `item` series are defined in\n   [plotOptions.item](plotOptions.item).\n3. Options for one single series are given in\n   [the series instance array](series.item).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        item: {\n            // shared options for all item series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'item'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.pie"
          },
          "subtree": {
            "endAngle": {
              "meta": {
                "types": {
                  "undefined": 1,
                  "number": 1
                },
                "name": "endAngle",
                "excludes": {},
                "description": "In circular view, the end angle of the item layout, in degrees where\n0 is up."
              },
              "subtree": {}
            },
            "innerSize": {
              "meta": {
                "types": {
                  "string": 1,
                  "number": 1
                },
                "name": "innerSize",
                "excludes": {},
                "default": "40%",
                "description": "In circular view, the size of the inner diameter of the circle. Can\nbe a percentage or pixel value. Percentages are relative to the outer\nperimeter. Pixel values are given as integers.\n\nIf the `rows` option is set, it overrides the `innerSize` setting."
              },
              "subtree": {}
            },
            "itemPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "itemPadding",
                "excludes": {},
                "default": 0.1,
                "description": "The padding between the items, given in relative size where the size\nof the item is 1."
              },
              "subtree": {}
            },
            "layout": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "layout",
                "excludes": {},
                "default": "vertical",
                "description": "The layout of the items in rectangular view. Can be either\n`horizontal` or `vertical`."
              },
              "subtree": {}
            },
            "marker": {
              "meta": {
                "types": {},
                "name": "marker",
                "excludes": {},
                "extends": "plotOptions.series.marker"
              },
              "subtree": {}
            },
            "rows": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "rows",
                "excludes": {},
                "description": "The number of rows to display in the rectangular or circular view. If\nthe `innerSize` is set, it will be overridden by the `rows` setting."
              },
              "subtree": {}
            },
            "showInLegend": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showInLegend",
                "excludes": {},
                "default": true
              },
              "subtree": {}
            },
            "startAngle": {
              "meta": {
                "types": {
                  "undefined": 1,
                  "number": 1
                },
                "name": "startAngle",
                "excludes": {},
                "description": "In circular view, the start angle of the item layout, in degrees\nwhere 0 is up."
              },
              "subtree": {}
            }
          }
        },
        "keltnerchannels": {
          "meta": {
            "types": {},
            "name": "keltnerchannels",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Keltner Channels. This series requires the `linkedTo` option to be set\nand should be loaded after the `stock/indicators/indicators.js`,\n`stock/indicators/atr.js`, and `stock/ema/.js`.\n\nIn TypeScript the [type](series.keltnerchannels.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `keltnerchannels` series are defined in\n   [plotOptions.keltnerchannels](plotOptions.keltnerchannels).\n3. Options for one single series are given in\n   [the series instance array](series.keltnerchannels).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        keltnerchannels: {\n            // shared options for all keltnerchannels series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'keltnerchannels'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "bottomLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "bottomLine",
                "excludes": {},
                "description": "Bottom line options."
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {},
                    "description": "Styles for a bottom line."
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {},
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the line. If not set, it's inherited from\n`plotOptions.keltnerchannels.color`"
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "averages"
                  },
                  "subtree": {}
                }
              }
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 1
              },
              "subtree": {}
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "multiplierATR": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "multiplierATR",
                    "excludes": {},
                    "default": 2,
                    "description": "The ATR multiplier."
                  },
                  "subtree": {}
                },
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 20
                  },
                  "subtree": {}
                },
                "periodATR": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "periodATR",
                    "excludes": {},
                    "default": 10,
                    "description": "The ATR period."
                  },
                  "subtree": {}
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span><b> {series.name}</b><br/>Upper Channel: {point.top}<br/>EMA({series.options.params.period}): {point.middle}<br/>Lower Channel: {point.bottom}<br/>"
                  },
                  "subtree": {}
                }
              }
            },
            "topLine": {
              "meta": {
                "types": {},
                "name": "topLine",
                "excludes": {},
                "description": "Top line options.",
                "extends": "plotOptions.keltnerchannels.bottomLine"
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            }
          }
        },
        "line": {
          "meta": {
            "types": {},
            "name": "line",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "A line series displays information as a series of data points connected by\nstraight line segments.\n\nIn TypeScript the [type](series.line.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `line` series are defined in\n   [plotOptions.line](plotOptions.line).\n3. Options for one single series are given in\n   [the series instance array](series.line).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        line: {\n            // shared options for all line series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'line'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.series"
          },
          "subtree": {
            "linecap": {
              "meta": {
                "types": {
                  "highcharts.serieslinecapvalue": 1
                },
                "name": "linecap",
                "excludes": {},
                "default": "round",
                "description": "The SVG value used for the `stroke-linecap` and `stroke-linejoin`\nof a line graph. Round means that lines are rounded in the ends and\nbends."
              },
              "subtree": {}
            },
            "useOhlcData": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "useOhlcData",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "The parameter allows setting line series type and use OHLC indicators. Data\nin OHLC format is required."
              },
              "subtree": {}
            }
          }
        },
        "linearregression": {
          "meta": {
            "types": {},
            "name": "linearregression",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Linear regression indicator. This series requires `linkedTo` option to be\nset.\n\nIn TypeScript the [type](series.linearregression.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `linearregression` series are defined in\n   [plotOptions.linearregression](plotOptions.linearregression).\n3. Options for one single series are given in\n   [the series instance array](series.linearregression).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        linearregression: {\n            // shared options for all linearregression series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'linearregression'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "xAxisUnit": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "xAxisUnit",
                    "excludes": {},
                    "products": {
                      "highstock": 1
                    },
                    "description": "Unit (in milliseconds) for the x axis distances used to compute\nthe regression line paramters (slope & intercept) for every\nrange. In Highstock the x axis values are always represented in\nmilliseconds which may cause that distances between points are\n\"big\" integer numbers.\n\nHighstock's linear regression algorithm (least squares method)\nwill utilize these \"big\" integers for finding the slope and the\nintercept of the regression line for each period. In consequence,\nthis value may be a very \"small\" decimal number that's hard to\ninterpret by a human.\n\nFor instance: `xAxisUnit` equealed to `86400000` ms (1 day)\nforces the algorithm to treat `86400000` as `1` while computing\nthe slope and the intercept. This may enchance the legiblitity of\nthe indicator's values.\n\nDefault value is the closest distance between two data points."
                  },
                  "subtree": {}
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "valueDecimals": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "valueDecimals",
                    "excludes": {},
                    "default": 4
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "linearregressionangle": {
          "meta": {
            "types": {},
            "name": "linearregressionangle",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Linear regression angle indicator. This series requires `linkedTo`\noption to be set.\n\nIn TypeScript the [type](series.linearregressionangle.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `linearregressionangle` series are defined in\n   [plotOptions.linearregressionangle](plotOptions.linearregressionangle).\n3. Options for one single series are given in\n   [the series instance array](series.linearregressionangle).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        linearregressionangle: {\n            // shared options for all linearregressionangle series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'linearregressionangle'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.linearregression"
          },
          "subtree": {
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span>{series.name}: <b>{point.y}°</b><br/>"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "linearregressionintercept": {
          "meta": {
            "types": {},
            "name": "linearregressionintercept",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Linear regression intercept indicator. This series requires `linkedTo`\noption to be set.\n\nIn TypeScript the [type](series.linearregressionintercept.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `linearregressionintercept` series are defined in\n   [plotOptions.linearregressionintercept](plotOptions.linearregressionintercept).\n3. Options for one single series are given in\n   [the series instance array](series.linearregressionintercept).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        linearregressionintercept: {\n            // shared options for all linearregressionintercept series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'linearregressionintercept'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.linearregression"
          },
          "subtree": {}
        },
        "linearregressionslope": {
          "meta": {
            "types": {},
            "name": "linearregressionslope",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Linear regression slope indicator. This series requires `linkedTo`\noption to be set.\n\nIn TypeScript the [type](series.linearregressionslope.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `linearregressionslope` series are defined in\n   [plotOptions.linearregressionslope](plotOptions.linearregressionslope).\n3. Options for one single series are given in\n   [the series instance array](series.linearregressionslope).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        linearregressionslope: {\n            // shared options for all linearregressionslope series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'linearregressionslope'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.linearregression"
          },
          "subtree": {}
        },
        "macd": {
          "meta": {
            "types": {},
            "name": "macd",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Moving Average Convergence Divergence (MACD). This series requires\n`linkedTo` option to be set and should be loaded after the\n`stock/indicators/indicators.js` and `stock/indicators/ema.js`.\n\nIn TypeScript the [type](series.macd.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `macd` series are defined in\n   [plotOptions.macd](plotOptions.macd).\n3. Options for one single series are given in\n   [the series instance array](series.macd).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        macd: {\n            // shared options for all macd series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'macd'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "averages"
                  },
                  "subtree": {}
                }
              }
            },
            "groupPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "groupPadding",
                "excludes": {},
                "default": 0.1
              },
              "subtree": {}
            },
            "macdLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "macdLine",
                "excludes": {},
                "description": "The styles for macd line"
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the line."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                },
                "zones": {
                  "meta": {
                    "types": {},
                    "name": "zones",
                    "excludes": {},
                    "extends": "plotOptions.macd.zones"
                  },
                  "subtree": {}
                }
              }
            },
            "minPointLength": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "minPointLength",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "longPeriod": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "longPeriod",
                    "excludes": {},
                    "default": 26,
                    "description": "The long period for indicator calculations."
                  },
                  "subtree": {}
                },
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 26
                  },
                  "subtree": {}
                },
                "shortPeriod": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "shortPeriod",
                    "excludes": {},
                    "default": 12,
                    "description": "The short period for indicator calculations."
                  },
                  "subtree": {}
                },
                "signalPeriod": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "signalPeriod",
                    "excludes": {},
                    "default": 9,
                    "description": "The base period for signal calculations."
                  },
                  "subtree": {}
                }
              }
            },
            "pointPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointPadding",
                "excludes": {},
                "default": 0.1
              },
              "subtree": {}
            },
            "signalLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "signalLine",
                "excludes": {},
                "description": "The styles for signal line"
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the line."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                },
                "zones": {
                  "meta": {
                    "types": {},
                    "name": "zones",
                    "excludes": {},
                    "extends": "plotOptions.macd.zones"
                  },
                  "subtree": {}
                }
              }
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {
                    "halo": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "halo",
                        "excludes": {}
                      },
                      "subtree": {
                        "size": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "size",
                            "excludes": {},
                            "default": 0
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                }
              }
            },
            "threshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "threshold",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span> <b> {series.name}</b><br/>Value: {point.MACD}<br/>Signal: {point.signal}<br/>Histogram: {point.y}<br/>"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "map": {
          "meta": {
            "types": {},
            "name": "map",
            "excludes": {},
            "products": {
              "highmaps": 1
            },
            "description": "The map series is used for basic choropleth maps, where each map area has\na color based on its value.\n\nIn TypeScript the [type](series.map.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `map` series are defined in\n   [plotOptions.map](plotOptions.map).\n3. Options for one single series are given in\n   [the series instance array](series.map).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        map: {\n            // shared options for all map series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'map'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.scatter"
          },
          "subtree": {
            "allAreas": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "allAreas",
                "excludes": {},
                "default": true
              },
              "subtree": {}
            },
            "animation": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "animation",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "borderColor": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "borderColor",
                "excludes": {},
                "default": "#cccccc"
              },
              "subtree": {}
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": 1
              },
              "subtree": {}
            },
            "colorKey": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "colorKey",
                "excludes": {},
                "default": "value"
              },
              "subtree": {}
            },
            "joinBy": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "joinBy",
                "excludes": {},
                "default": "hc-key"
              },
              "subtree": {}
            },
            "nullColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "nullColor",
                "excludes": {},
                "default": "#f7f7f7",
                "description": "The color to apply to null points.\n\nIn styled mode, the null point fill is set in the\n`.highcharts-null-point` class."
              },
              "subtree": {}
            },
            "nullInteraction": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "nullInteraction",
                "excludes": {},
                "description": "Whether to allow pointer interaction like tooltips and mouse events\non null points."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {
                    "brightness": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "brightness",
                        "excludes": {},
                        "default": 0.2
                      },
                      "subtree": {}
                    }
                  }
                },
                "inactive": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "inactive",
                    "excludes": {}
                  },
                  "subtree": {
                    "opacity": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "opacity",
                        "excludes": {},
                        "default": 1
                      },
                      "subtree": {}
                    }
                  }
                },
                "normal": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "normal",
                    "excludes": {}
                  },
                  "subtree": {
                    "animation": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "animation",
                        "excludes": {},
                        "default": true
                      },
                      "subtree": {}
                    }
                  }
                },
                "select": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "select",
                    "excludes": {}
                  },
                  "subtree": {
                    "color": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "color",
                        "excludes": {},
                        "default": "#cccccc"
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "stickyTracking": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "stickyTracking",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "followPointer": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "followPointer",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "{point.name}: {point.value}<br/>"
                  },
                  "subtree": {}
                }
              }
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "crop": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "crop",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "formatter": {
                  "meta": {
                    "types": {},
                    "name": "formatter",
                    "excludes": {}
                  },
                  "subtree": {}
                },
                "inside": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "inside",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "overflow": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "overflow",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "padding": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "padding",
                    "excludes": {},
                    "default": 0
                  },
                  "subtree": {}
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "middle"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "mapbubble": {
          "meta": {
            "types": {},
            "name": "mapbubble",
            "excludes": {},
            "products": {
              "highmaps": 1
            },
            "description": "A map bubble series is a bubble series laid out on top of a map\nseries, where each bubble is tied to a specific map area.\n\nIn TypeScript the [type](series.mapbubble.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `mapbubble` series are defined in\n   [plotOptions.mapbubble](plotOptions.mapbubble).\n3. Options for one single series are given in\n   [the series instance array](series.mapbubble).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        mapbubble: {\n            // shared options for all mapbubble series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'mapbubble'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.bubble"
          },
          "subtree": {
            "animationLimit": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "animationLimit",
                "excludes": {},
                "default": 500
              },
              "subtree": {}
            },
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "color",
                "excludes": {},
                "description": "The main color of the series. This color affects both the fill\nand the stroke of the bubble. For enhanced control, use `marker`\noptions."
              },
              "subtree": {}
            },
            "displayNegative": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "displayNegative",
                "excludes": {},
                "default": "true",
                "description": "Whether to display negative sized bubbles. The threshold is\ngiven by the [zThreshold](#plotOptions.mapbubble.zThreshold)\noption, and negative bubbles can be visualized by setting\n[negativeColor](#plotOptions.bubble.negativeColor)."
              },
              "subtree": {}
            },
            "maxSize": {
              "meta": {
                "types": {},
                "name": "maxSize",
                "excludes": {}
              },
              "subtree": {}
            },
            "minSize": {
              "meta": {
                "types": {},
                "name": "minSize",
                "excludes": {}
              },
              "subtree": {}
            },
            "negativeColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "negativeColor",
                "excludes": {},
                "description": "When a point's Z value is below the\n[zThreshold](#plotOptions.mapbubble.zThreshold) setting, this\ncolor is used."
              },
              "subtree": {}
            },
            "sizeBy": {
              "meta": {
                "types": {
                  "highcharts.bubblesizebyvalue": 1
                },
                "name": "sizeBy",
                "excludes": {},
                "default": "area",
                "description": "Whether the bubble's value should be represented by the area or\nthe width of the bubble. The default, `area`, corresponds best to\nthe human perception of the size of each bubble."
              },
              "subtree": {}
            },
            "sizeByAbsoluteValue": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "sizeByAbsoluteValue",
                "excludes": {},
                "default": "false",
                "description": "When this is true, the absolute value of z determines the size\nof the bubble. This means that with the default `zThreshold` of\n0, a bubble of value -1 will have the same size as a bubble of\nvalue 1, while a bubble of value 0 will have a smaller size\naccording to `minSize`."
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "{point.name}: {point.z}"
                  },
                  "subtree": {}
                }
              }
            },
            "zMax": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zMax",
                "excludes": {},
                "description": "The minimum for the Z value range. Defaults to the highest Z\nvalue in the data."
              },
              "subtree": {}
            },
            "zMin": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zMin",
                "excludes": {},
                "description": "The minimum for the Z value range. Defaults to the lowest Z value\nin the data."
              },
              "subtree": {}
            },
            "zThreshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zThreshold",
                "excludes": {},
                "default": "0",
                "description": "When [displayNegative](#plotOptions.mapbubble.displayNegative)\nis `false`, bubbles with lower Z values are skipped. When\n`displayNegative` is `true` and a\n[negativeColor](#plotOptions.mapbubble.negativeColor) is given,\npoints with lower Z is colored."
              },
              "subtree": {}
            }
          }
        },
        "mapline": {
          "meta": {
            "types": {},
            "name": "mapline",
            "excludes": {},
            "products": {
              "highmaps": 1
            },
            "description": "A mapline series is a special case of the map series where the value\ncolors are applied to the strokes rather than the fills. It can also be\nused for freeform drawing, like dividers, in the map.\n\nIn TypeScript the [type](series.mapline.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `mapline` series are defined in\n   [plotOptions.mapline](plotOptions.mapline).\n3. Options for one single series are given in\n   [the series instance array](series.mapline).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        mapline: {\n            // shared options for all mapline series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'mapline'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.map"
          },
          "subtree": {
            "fillColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "fillColor",
                "excludes": {},
                "default": "none",
                "description": "Fill color for the map line shapes"
              },
              "subtree": {}
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 1,
                "description": "The width of the map line."
              },
              "subtree": {}
            }
          }
        },
        "mappoint": {
          "meta": {
            "types": {},
            "name": "mappoint",
            "excludes": {},
            "products": {
              "highmaps": 1
            },
            "description": "A mappoint series is a special form of scatter series where the points\ncan be laid out in map coordinates on top of a map.\n\nIn TypeScript the [type](series.mappoint.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `mappoint` series are defined in\n   [plotOptions.mappoint](plotOptions.mappoint).\n3. Options for one single series are given in\n   [the series instance array](series.mappoint).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        mappoint: {\n            // shared options for all mappoint series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'mappoint'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.scatter"
          },
          "subtree": {
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "crop": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "crop",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "defer": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "defer",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "format": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "format",
                    "excludes": {},
                    "default": "{point.name}"
                  },
                  "subtree": {}
                },
                "formatter": {
                  "meta": {
                    "types": {},
                    "name": "formatter",
                    "excludes": {}
                  },
                  "subtree": {}
                },
                "overflow": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "overflow",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "object": 1
                    },
                    "name": "style",
                    "excludes": {}
                  },
                  "subtree": {
                    "color": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "color",
                        "excludes": {},
                        "default": "#000000"
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            }
          }
        },
        "mfi": {
          "meta": {
            "types": {},
            "name": "mfi",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Money Flow Index. This series requires `linkedTo` option to be set and\nshould be loaded after the `stock/indicators/indicators.js` file.\n\nIn TypeScript the [type](series.mfi.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `mfi` series are defined in\n   [plotOptions.mfi](plotOptions.mfi).\n3. Options for one single series are given in\n   [the series instance array](series.mfi).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        mfi: {\n            // shared options for all mfi series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'mfi'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "decimals": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "decimals",
                    "excludes": {},
                    "default": 4,
                    "description": "Number of maximum decimals that are used in MFI calculations."
                  },
                  "subtree": {}
                },
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 14
                  },
                  "subtree": {}
                },
                "volumeSeriesID": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "volumeSeriesID",
                    "excludes": {},
                    "default": "volume",
                    "description": "The id of volume series which is mandatory.\nFor example using OHLC data, volumeSeriesID='volume' means\nthe indicator will be calculated using OHLC and volume values."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "momentum": {
          "meta": {
            "types": {},
            "name": "momentum",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Momentum. This series requires `linkedTo` option to be set.\n\nIn TypeScript the [type](series.momentum.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `momentum` series are defined in\n   [plotOptions.momentum](plotOptions.momentum).\n3. Options for one single series are given in\n   [the series instance array](series.momentum).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        momentum: {\n            // shared options for all momentum series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'momentum'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 14
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "natr": {
          "meta": {
            "types": {},
            "name": "natr",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Normalized average true range indicator (NATR). This series requires\n`linkedTo` option to be set and should be loaded after the\n`stock/indicators/indicators.js` and `stock/indicators/atr.js`.\n\nIn TypeScript the [type](series.natr.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `natr` series are defined in\n   [plotOptions.natr](plotOptions.natr).\n3. Options for one single series are given in\n   [the series instance array](series.natr).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        natr: {\n            // shared options for all natr series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'natr'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.atr"
          },
          "subtree": {
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "valueSuffix": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "valueSuffix",
                    "excludes": {},
                    "default": "%"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "networkgraph": {
          "meta": {
            "types": {},
            "name": "networkgraph",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A networkgraph is a type of relationship chart, where connnections\n(links) attracts nodes (points) and other nodes repulse each other.\n\nIn TypeScript the [type](series.networkgraph.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `networkgraph` series are defined in\n   [plotOptions.networkgraph](plotOptions.networkgraph).\n3. Options for one single series are given in\n   [the series instance array](series.networkgraph).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        networkgraph: {\n            // shared options for all networkgraph series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'networkgraph'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.line"
          },
          "subtree": {
            "draggable": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "draggable",
                "excludes": {},
                "default": true,
                "description": "Flag to determine if nodes are draggable or not."
              },
              "subtree": {}
            },
            "layoutAlgorithm": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "layoutAlgorithm",
                "excludes": {}
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "none",
                    "description": "Approximation used to calculate repulsive forces affecting nodes.\nBy default, when calculateing net force, nodes are compared\nagainst each other, which gives O(N^2) complexity. Using\nBarnes-Hut approximation, we decrease this to O(N log N), but the\nresulting graph will have different layout. Barnes-Hut\napproximation divides space into rectangles via quad tree, where\nforces exerted on nodes are calculated directly for nearby cells,\nand for all others, cells are treated as a separate node with\ncenter of mass."
                  },
                  "subtree": {}
                },
                "attractiveForce": {
                  "meta": {
                    "types": {
                      "function": 1
                    },
                    "name": "attractiveForce",
                    "excludes": {},
                    "default": "function (d, k) { return k * k / d; }",
                    "description": "Attraction force applied on a node which is conected to another\nnode by a link. Passed are two arguments:\n- `d` - which is current distance between two nodes\n- `k` - which is desired distance between two nodes\n\nIn `verlet` integration, defaults to:\n`function (d, k) { return (k - d) / d; }`"
                  },
                  "subtree": {}
                },
                "enableSimulation": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enableSimulation",
                    "excludes": {},
                    "default": false,
                    "description": "Experimental. Enables live simulation of the algorithm\nimplementation. All nodes are animated as the forces applies on\nthem."
                  },
                  "subtree": {}
                },
                "friction": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "friction",
                    "excludes": {},
                    "default": -0.981,
                    "description": "Friction applied on forces to prevent nodes rushing to fast to\nthe desired positions."
                  },
                  "subtree": {}
                },
                "gravitationalConstant": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "gravitationalConstant",
                    "excludes": {},
                    "default": 0.0625,
                    "description": "Gravitational const used in the barycenter force of the\nalgorithm."
                  },
                  "subtree": {}
                },
                "initialPositionRadius": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "initialPositionRadius",
                    "excludes": {},
                    "default": "1",
                    "description": "When `initialPositions` are set to 'circle',\n`initialPositionRadius` is a distance from the center of circle,\nin which nodes are created."
                  },
                  "subtree": {}
                },
                "initialPositions": {
                  "meta": {
                    "types": {
                      "\"circle\"": 1,
                      "\"random\"": 1,
                      "function": 1
                    },
                    "name": "initialPositions",
                    "excludes": {},
                    "default": "circle",
                    "description": "Initial layout algorithm for positioning nodes. Can be one of\nbuilt-in options (\"circle\", \"random\") or a function where\npositions should be set on each node (`this.nodes`) as\n`node.plotX` and `node.plotY`"
                  },
                  "subtree": {}
                },
                "integration": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "integration",
                    "excludes": {},
                    "default": "euler",
                    "description": "Integration type. Available options are `'euler'` and `'verlet'`.\nIntegration determines how forces are applied on particles. In\nEuler integration, force is applied direct as\n`newPosition += velocity;`.\nIn Verlet integration, new position is based on a previous\nposittion without velocity:\n`newPosition += previousPosition - newPosition`.\n\nNote that different integrations give different results as forces\nare different.\n\nIn Highcharts v7.0.x only `'euler'` integration was supported."
                  },
                  "subtree": {}
                },
                "linkLength": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "linkLength",
                    "excludes": {},
                    "description": "Ideal length (px) of the link between two nodes. When not\ndefined, length is calculated as:\n`Math.pow(availableWidth * availableHeight / nodesLength, 0.4);`\n\nNote: Because of the algorithm specification, length of each link\nmight be not exactly as specified."
                  },
                  "subtree": {}
                },
                "maxIterations": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "maxIterations",
                    "excludes": {},
                    "default": 1000,
                    "description": "Max number of iterations before algorithm will stop. In general,\nalgorithm should find positions sooner, but when rendering huge\nnumber of nodes, it is recommended to increase this value as\nfinding perfect graph positions can require more time."
                  },
                  "subtree": {}
                },
                "maxSpeed": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "maxSpeed",
                    "excludes": {},
                    "default": 10,
                    "description": "Verlet integration only.\nMax speed that node can get in one iteration. In terms of\nsimulation, it's a maximum translation (in pixels) that node can\nmove (in both, x and y, dimensions). While `friction` is applied\non all nodes, max speed is applied only for nodes that move very\nfast, for example small or disconnected ones."
                  },
                  "subtree": {}
                },
                "repulsiveForce": {
                  "meta": {
                    "types": {
                      "function": 1
                    },
                    "name": "repulsiveForce",
                    "excludes": {},
                    "default": "function (d, k) { return k * k / d; }",
                    "description": "Repulsive force applied on a node. Passed are two arguments:\n- `d` - which is current distance between two nodes\n- `k` - which is desired distance between two nodes\n\nIn `verlet` integration, defaults to:\n`function (d, k) { return (k - d) / d * (k > d ? 1 : 0) }`"
                  },
                  "subtree": {}
                },
                "theta": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "theta",
                    "excludes": {},
                    "default": 0.5,
                    "description": "Barnes-Hut approximation only.\nDeteremines when distance between cell and node is small enough\nto caculate forces. Value of `theta` is compared directly with\nquotient `s / d`, where `s` is the size of the cell, and `d` is\ndistance between center of cell's mass and currently compared\nnode."
                  },
                  "subtree": {}
                },
                "type": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "type",
                    "excludes": {},
                    "default": "reingold-fruchterman",
                    "description": "Type of the algorithm used when positioning nodes."
                  },
                  "subtree": {}
                }
              }
            },
            "link": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "link",
                "excludes": {},
                "description": "Link style options"
              },
              "subtree": {
                "color": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "default": "rgba(100, 100, 100, 0.5)",
                    "description": "Color of the link between two nodes."
                  },
                  "subtree": {}
                },
                "dashStyle": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "dashStyle",
                    "excludes": {},
                    "description": "A name for the dash style to use for links."
                  },
                  "subtree": {}
                },
                "width": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "width",
                    "excludes": {},
                    "default": 1,
                    "description": "Width (px) of the link between two nodes."
                  },
                  "subtree": {}
                }
              }
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "states": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "states",
                    "excludes": {}
                  },
                  "subtree": {
                    "inactive": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "inactive",
                        "excludes": {},
                        "description": "The opposite state of a hover for a single point node.\nApplied to all not connected nodes to the hovered one."
                      },
                      "subtree": {
                        "animation": {
                          "meta": {
                            "types": {
                              "boolean": 1,
                              "highcharts.animationoptionsobject": 1
                            },
                            "name": "animation",
                            "excludes": {},
                            "description": "Animation when not hovering over the node."
                          },
                          "subtree": {
                            "duration": {
                              "meta": {
                                "types": {
                                  "number": 1
                                },
                                "name": "duration",
                                "excludes": {},
                                "default": 50
                              },
                              "subtree": {}
                            }
                          }
                        },
                        "opacity": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "opacity",
                            "excludes": {},
                            "default": 0.3
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                }
              }
            },
            "showInLegend": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showInLegend",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "inactive": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "inactive",
                    "excludes": {},
                    "description": "The opposite state of a hover for a single point link. Applied\nto all links that are not comming from the hovered node."
                  },
                  "subtree": {
                    "animation": {
                      "meta": {
                        "types": {
                          "boolean": 1,
                          "highcharts.animationoptionsobject": 1
                        },
                        "name": "animation",
                        "excludes": {},
                        "description": "Animation when not hovering over the node."
                      },
                      "subtree": {
                        "duration": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "duration",
                            "excludes": {},
                            "default": 50
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "linkOpacity": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "linkOpacity",
                        "excludes": {},
                        "default": 0.3,
                        "description": "Opacity of inactive links."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "stickyTracking": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "stickyTracking",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            }
          }
        },
        "ohlc": {
          "meta": {
            "types": {},
            "name": "ohlc",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "An OHLC chart is a style of financial chart used to describe price\nmovements over time. It displays open, high, low and close values per\ndata point.\n\nIn TypeScript the [type](series.ohlc.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `ohlc` series are defined in\n   [plotOptions.ohlc](plotOptions.ohlc).\n3. Options for one single series are given in\n   [the series instance array](series.ohlc).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        ohlc: {\n            // shared options for all ohlc series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'ohlc'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "colorKey": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "colorKey",
                "excludes": {},
                "default": "close"
              },
              "subtree": {}
            },
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "groupPixelWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "groupPixelWidth",
                    "excludes": {},
                    "default": "5",
                    "products": {
                      "highstock": 1
                    },
                    "description": "The approximate pixel width of each group. If for example a series\nwith 30 points is displayed over a 600 pixel wide plot area, no\ngrouping is performed. If however the series contains so many points\nthat the spacing is less than the groupPixelWidth, Highcharts will\ntry to group it into appropriate groups so that each is more or less\ntwo pixels wide. Defaults to `5`."
                  },
                  "subtree": {}
                }
              }
            },
            "dragDrop": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dragDrop",
                "excludes": {}
              },
              "subtree": {
                "draggableClose": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableClose",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow close value to be dragged individually."
                  },
                  "subtree": {}
                },
                "draggableHigh": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableHigh",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow high value to be dragged individually."
                  },
                  "subtree": {}
                },
                "draggableLow": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableLow",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow low value to be dragged individually."
                  },
                  "subtree": {}
                },
                "draggableOpen": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableOpen",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow open value to be dragged individually."
                  },
                  "subtree": {}
                }
              }
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": "1",
                "products": {
                  "highstock": 1
                },
                "description": "The pixel width of the line/border. Defaults to `1`."
              },
              "subtree": {}
            },
            "pointValKey": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "pointValKey",
                "excludes": {},
                "default": "close",
                "products": {
                  "highstock": 1
                },
                "description": "Determines which one of `open`, `high`, `low`, `close` values should\nbe represented as `point.y`, which is later used to set dataLabel\nposition and [compare](#plotOptions.series.compare)."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {},
                    "name": "hover",
                    "excludes": {},
                    "products": {
                      "highstock": 1
                    },
                    "extends": "plotOptions.column.states.hover"
                  },
                  "subtree": {
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": "3",
                        "products": {
                          "highstock": 1
                        },
                        "description": "The pixel width of the line representing the OHLC point."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "stickyTracking": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "stickyTracking",
                "excludes": {},
                "default": true
              },
              "subtree": {}
            },
            "threshold": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "threshold",
                "excludes": {},
                "default": null
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span> <b> {series.name}</b><br/>Open: {point.open}<br/>High: {point.high}<br/>Low: {point.low}<br/>Close: {point.close}<br/>"
                  },
                  "subtree": {}
                }
              }
            },
            "upColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "upColor",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Line color for up points."
              },
              "subtree": {}
            }
          }
        },
        "organization": {
          "meta": {
            "types": {},
            "name": "organization",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "An organization chart is a diagram that shows the structure of an\norganization and the relationships and relative ranks of its parts and\npositions.\n\nIn TypeScript the [type](series.organization.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `organization` series are defined in\n   [plotOptions.organization](plotOptions.organization).\n3. Options for one single series are given in\n   [the series instance array](series.organization).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        organization: {\n            // shared options for all organization series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'organization'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sankey"
          },
          "subtree": {
            "borderColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "borderColor",
                "excludes": {},
                "default": "#666666",
                "description": "The border color of the node cards."
              },
              "subtree": {}
            },
            "borderRadius": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderRadius",
                "excludes": {},
                "default": 3,
                "description": "The border radius of the node cards."
              },
              "subtree": {}
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": 1
              },
              "subtree": {}
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1,
                  "highcharts.seriesorganizationdatalabelsoptionsobject": 1,
                  "array": "Highcharts.SeriesOrganizationDataLabelsOptionsObject"
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "style": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "style",
                    "excludes": {}
                  },
                  "subtree": {}
                }
              }
            },
            "hangingIndent": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "hangingIndent",
                "excludes": {},
                "default": 20,
                "description": "The indentation in pixels of hanging nodes, nodes which parent has\n[layout](#series.organization.nodes.layout) set to `hanging`."
              },
              "subtree": {}
            },
            "linkColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "linkColor",
                "excludes": {},
                "default": "#666666",
                "description": "The color of the links between nodes."
              },
              "subtree": {}
            },
            "linkLineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "linkLineWidth",
                "excludes": {},
                "default": 1,
                "description": "The line width of the links connecting nodes, in pixels."
              },
              "subtree": {}
            },
            "linkRadius": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "linkRadius",
                "excludes": {},
                "default": 10,
                "description": "Radius for the rounded corners of the links between nodes."
              },
              "subtree": {}
            },
            "nodeWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "nodeWidth",
                "excludes": {},
                "default": 50,
                "description": "In a horizontal chart, the width of the nodes in pixels. Node that\nmost organization charts are vertical, so the name of this option\nis counterintuitive."
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "nodeFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "nodeFormat",
                    "excludes": {},
                    "default": "{point.name}<br>{point.title}<br>{point.description}"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "packedbubble": {
          "meta": {
            "types": {},
            "name": "packedbubble",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A packed bubble series is a two dimensional series type, where each point\nrenders a value in X, Y position. Each point is drawn as a bubble\nwhere the bubbles don't overlap with each other and the radius\nof the bubble relates to the value.\n\nIn TypeScript the [type](series.packedbubble.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `packedbubble` series are defined in\n   [plotOptions.packedbubble](plotOptions.packedbubble).\n3. Options for one single series are given in\n   [the series instance array](series.packedbubble).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        packedbubble: {\n            // shared options for all packedbubble series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'packedbubble'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.bubble"
          },
          "subtree": {
            "draggable": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "draggable",
                "excludes": {},
                "default": true,
                "description": "Flag to determine if nodes are draggable or not. Available for\ngraph with useSimulation set to true only."
              },
              "subtree": {}
            },
            "layoutAlgorithm": {
              "meta": {
                "types": {},
                "name": "layoutAlgorithm",
                "excludes": {},
                "description": "Options for layout algorithm when simulation is enabled. Inside there\nare options to change the speed, padding, initial bubbles positions\nand more.",
                "extends": "plotOptions.networkgraph.layoutAlgorithm"
              },
              "subtree": {
                "bubblePadding": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "bubblePadding",
                    "excludes": {},
                    "default": 5,
                    "description": "The distance between two bubbles, when the algorithm starts to\ntreat two bubbles as overlapping. The `bubblePadding` is also the\nexpected distance between all the bubbles on simulation end."
                  },
                  "subtree": {}
                },
                "dragBetweenSeries": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "dragBetweenSeries",
                    "excludes": {},
                    "default": false,
                    "description": "In case of split series, this option allows user to drag and\ndrop points between series, for changing point related series."
                  },
                  "subtree": {}
                },
                "enableSimulation": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enableSimulation",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "friction": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "friction",
                    "excludes": {},
                    "default": -0.981
                  },
                  "subtree": {}
                },
                "gravitationalConstant": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "gravitationalConstant",
                    "excludes": {},
                    "default": 0.01
                  },
                  "subtree": {}
                },
                "initialPositionRadius": {
                  "meta": {
                    "types": {},
                    "name": "initialPositionRadius",
                    "excludes": {},
                    "default": 20,
                    "extends": "plotOptions.networkgraph.layoutAlgorithm.initialPositionRadius"
                  },
                  "subtree": {}
                },
                "initialPositions": {
                  "meta": {
                    "types": {
                      "\"circle\"": 1,
                      "\"random\"": 1,
                      "function": 1
                    },
                    "name": "initialPositions",
                    "excludes": {},
                    "default": "circle",
                    "description": "Initial layout algorithm for positioning nodes. Can be one of\nthe built-in options (\"circle\", \"random\") or a function where\npositions should be set on each node (`this.nodes`) as\n`node.plotX` and `node.plotY`."
                  },
                  "subtree": {}
                },
                "maxIterations": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "maxIterations",
                    "excludes": {},
                    "default": 1000
                  },
                  "subtree": {}
                },
                "maxSpeed": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "maxSpeed",
                    "excludes": {},
                    "default": 5,
                    "description": "Max speed that node can get in one iteration. In terms of\nsimulation, it's a maximum translation (in pixels) that a node\ncan move (in both, x and y, dimensions). While `friction` is\napplied on all nodes, max speed is applied only for nodes that\nmove very fast, for example small or disconnected ones."
                  },
                  "subtree": {}
                },
                "parentNodeLimit": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "parentNodeLimit",
                    "excludes": {},
                    "default": false,
                    "description": "Whether bubbles should interact with their parentNode to keep\nthem inside."
                  },
                  "subtree": {}
                },
                "parentNodeOptions": {
                  "meta": {
                    "types": {},
                    "name": "parentNodeOptions",
                    "excludes": {},
                    "description": "Layout algorithm options for parent nodes.",
                    "extends": "plotOptions.networkgraph.layoutAlgorithm"
                  },
                  "subtree": {
                    "gravitationalConstant": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "gravitationalConstant",
                        "excludes": {},
                        "default": 0.03
                      },
                      "subtree": {}
                    },
                    "initialPositionRadius": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "initialPositionRadius",
                        "excludes": {},
                        "default": 100
                      },
                      "subtree": {}
                    },
                    "marker": {
                      "meta": {
                        "types": {},
                        "name": "marker",
                        "excludes": {},
                        "description": "Styling options for parentNodes markers. Similar to\nline.marker options.",
                        "extends": "plotOptions.series.marker"
                      },
                      "subtree": {
                        "fillColor": {
                          "meta": {
                            "types": {
                              "*": 1
                            },
                            "name": "fillColor",
                            "excludes": {},
                            "default": null
                          },
                          "subtree": {}
                        },
                        "fillOpacity": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "fillOpacity",
                            "excludes": {},
                            "default": 1
                          },
                          "subtree": {}
                        },
                        "lineColor": {
                          "meta": {
                            "types": {
                              "*": 1
                            },
                            "name": "lineColor",
                            "excludes": {},
                            "default": null
                          },
                          "subtree": {}
                        },
                        "lineWidth": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "lineWidth",
                            "excludes": {},
                            "default": 1
                          },
                          "subtree": {}
                        },
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "circle"
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "maxIterations": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "maxIterations",
                        "excludes": {},
                        "default": 400
                      },
                      "subtree": {}
                    },
                    "maxSpeed": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "maxSpeed",
                        "excludes": {},
                        "default": 50
                      },
                      "subtree": {}
                    },
                    "seriesInteraction": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "seriesInteraction",
                        "excludes": {},
                        "default": true
                      },
                      "subtree": {}
                    }
                  }
                },
                "seriesInteraction": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "seriesInteraction",
                    "excludes": {},
                    "default": true,
                    "description": "Whether series should interact with each other or not. When\n`parentNodeLimit` is set to true, thi option should be set to\nfalse to avoid sticking points in wrong series parentNode."
                  },
                  "subtree": {}
                },
                "splitSeries": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "splitSeries",
                    "excludes": {},
                    "default": "false",
                    "description": "Whether to split series into individual groups or to mix all\nseries together."
                  },
                  "subtree": {}
                }
              }
            },
            "maxSize": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "maxSize",
                "excludes": {},
                "default": "50%",
                "description": "Maximum bubble size. Bubbles will automatically size between the\n`minSize` and `maxSize` to reflect the value of each bubble.\nCan be either pixels (when no unit is given), or a percentage of\nthe smallest one of the plot width and height, divided by the square\nroot of total number of points."
              },
              "subtree": {}
            },
            "minSize": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "minSize",
                "excludes": {},
                "default": "10%",
                "description": "Minimum bubble size. Bubbles will automatically size between the\n`minSize` and `maxSize` to reflect the value of each bubble.\nCan be either pixels (when no unit is given), or a percentage of\nthe smallest one of the plot width and height, divided by the square\nroot of total number of points."
              },
              "subtree": {}
            },
            "sizeBy": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "sizeBy",
                "excludes": {},
                "default": "area"
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "Value: {point.value}"
                  },
                  "subtree": {}
                }
              }
            },
            "useSimulation": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "useSimulation",
                "excludes": {},
                "default": true,
                "description": "An option is giving a possibility to choose between using simulation\nfor calculating bubble positions. These reflects in both animation\nand final position of bubbles. Simulation is also adding options to\nthe series graph based on used layout. In case of big data sets, with\nany performance issues, it is possible to disable animation and pack\nbubble in a simple circular way."
              },
              "subtree": {}
            },
            "zoneAxis": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "zoneAxis",
                "excludes": {},
                "default": "y"
              },
              "subtree": {}
            }
          }
        },
        "pareto": {
          "meta": {
            "types": {},
            "name": "pareto",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A pareto diagram is a type of chart that contains both bars and a line\ngraph, where individual values are represented in descending order by\nbars, and the cumulative total is represented by the line.\n\nIn TypeScript the [type](series.pareto.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `pareto` series are defined in\n   [plotOptions.pareto](plotOptions.pareto).\n3. Options for one single series are given in\n   [the series instance array](series.pareto).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        pareto: {\n            // shared options for all pareto series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'pareto'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.line"
          },
          "subtree": {
            "zIndex": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zIndex",
                "excludes": {},
                "default": 3,
                "description": "Higher zIndex than column series to draw line above shapes."
              },
              "subtree": {}
            }
          }
        },
        "pc": {
          "meta": {
            "types": {},
            "name": "pc",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Price channel (PC). This series requires the `linkedTo` option to be\nset and should be loaded after the `stock/indicators/indicators.js`.\n\nIn TypeScript the [type](series.pc.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `pc` series are defined in\n   [plotOptions.pc](plotOptions.pc).\n3. Options for one single series are given in\n   [the series instance array](series.pc).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        pc: {\n            // shared options for all pc series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'pc'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "bottomLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "bottomLine",
                "excludes": {}
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the bottom line. If not set, it's inherited from\n[plotOptions.pc.color](#plotOptions.pc.color)."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "averages"
                  },
                  "subtree": {}
                }
              }
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 1
              },
              "subtree": {}
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 20
                  },
                  "subtree": {}
                }
              }
            },
            "topLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "topLine",
                "excludes": {}
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the top line. If not set, it's inherited from\n[plotOptions.pc.color](#plotOptions.pc.color)."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            }
          }
        },
        "pie": {
          "meta": {
            "types": {},
            "name": "pie",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A pie chart is a circular graphic which is divided into slices to\nillustrate numerical proportion.\n\nIn TypeScript the [type](series.pie.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `pie` series are defined in\n   [plotOptions.pie](plotOptions.pie).\n3. Options for one single series are given in\n   [the series instance array](series.pie).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        pie: {\n            // shared options for all pie series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'pie'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.line"
          },
          "subtree": {
            "borderColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "borderColor",
                "excludes": {},
                "default": "#ffffff",
                "products": {
                  "highcharts": 1
                },
                "description": "The color of the border surrounding each slice. When `null`, the\nborder takes the same color as the slice fill. This can be used\ntogether with a `borderWidth` to fill drawing gaps created by\nantialiazing artefacts in borderless pies.\n\nIn styled mode, the border stroke is given in the `.highcharts-point`\nclass."
              },
              "subtree": {}
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": 1,
                "products": {
                  "highcharts": 1
                },
                "description": "The width of the border surrounding each slice.\n\nWhen setting the border width to 0, there may be small gaps between\nthe slices due to SVG antialiasing artefacts. To work around this,\nkeep the border width at 0.5 or 1, but set the `borderColor` to\n`null` instead.\n\nIn styled mode, the border stroke width is given in the\n`.highcharts-point` class."
              },
              "subtree": {}
            },
            "center": {
              "meta": {
                "types": {
                  "array": "(number|string|null), (number|string|null)"
                },
                "name": "center",
                "excludes": {},
                "default": "[null, null]",
                "products": {
                  "highcharts": 1
                },
                "description": "The center of the pie chart relative to the plot area. Can be\npercentages or pixel values. The default behaviour (as of 3.0) is to\ncenter the pie so that all slices and data labels are within the plot\narea. As a consequence, the pie may actually jump around in a chart\nwith dynamic values, as the data labels move. In that case, the\ncenter should be explicitly set, for example to `[\"50%\", \"50%\"]`."
              },
              "subtree": {}
            },
            "clip": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "clip",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1
                }
              },
              "subtree": {}
            },
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "color",
                "excludes": {},
                "default": "#cccccc",
                "description": "The color of the pie series. A pie series is represented as an empty\ncircle if the total sum of its values is 0. Use this property to\ndefine the color of its border.\n\nIn styled mode, the color can be defined by the\n[colorIndex](#plotOptions.series.colorIndex) option. Also, the series\ncolor can be set with the `.highcharts-series`,\n`.highcharts-color-{n}`, `.highcharts-{type}-series` or\n`.highcharts-series-{n}` class, or individual classes given by the\n`className` option."
              },
              "subtree": {}
            },
            "colors": {
              "meta": {
                "types": {
                  "array": "(Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject)"
                },
                "name": "colors",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "A series specific or series type specific color set to use instead\nof the global [colors](#colors)."
              },
              "subtree": {}
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "extends": "plotOptions.series.dataLabels"
              },
              "subtree": {
                "allowOverlap": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "allowOverlap",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "connectorColor": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "connectorColor",
                    "excludes": {},
                    "default": "{point.color}",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The color of the line connecting the data label to the pie slice.\nThe default color is the same as the point's color.\n\nIn styled mode, the connector stroke is given in the\n`.highcharts-data-label-connector` class."
                  },
                  "subtree": {}
                },
                "connectorPadding": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "connectorPadding",
                    "excludes": {},
                    "default": "5",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The distance from the data label to the connector."
                  },
                  "subtree": {}
                },
                "connectorWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "connectorWidth",
                    "excludes": {},
                    "default": "1",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The width of the line connecting the data label to the pie slice.\n\n\nIn styled mode, the connector stroke width is given in the\n`.highcharts-data-label-connector` class."
                  },
                  "subtree": {}
                },
                "distance": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "distance",
                    "excludes": {},
                    "default": "30",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "The distance of the data label from the pie's edge. Negative numbers\nput the data label on top of the pie slices. Connectors are only\nshown for data labels outside the pie."
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true,
                    "products": {
                      "highcharts": 1
                    },
                    "description": "Enable or disable the data labels."
                  },
                  "subtree": {}
                },
                "formatter": {
                  "meta": {
                    "types": {},
                    "name": "formatter",
                    "excludes": {}
                  },
                  "subtree": {}
                },
                "softConnector": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "softConnector",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "description": "Whether to render the connector as a soft arc or a line with sharp\nbreak."
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {},
                    "name": "style",
                    "excludes": {}
                  },
                  "subtree": {}
                },
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "default": 0
                  },
                  "subtree": {}
                }
              }
            },
            "depth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "depth",
                "excludes": {},
                "default": "0",
                "products": {
                  "highcharts": 1
                },
                "description": "The thickness of a 3D pie."
              },
              "subtree": {}
            },
            "endAngle": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "endAngle",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "The end angle of the pie in degrees where 0 is top and 90 is right.\nDefaults to `startAngle` plus 360."
              },
              "subtree": {}
            },
            "events": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "events",
                "excludes": {}
              },
              "subtree": {
                "checkboxClick": {
                  "meta": {
                    "types": {
                      "function": 1
                    },
                    "name": "checkboxClick",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "description": "Fires when the checkbox next to the point name in the legend is\nclicked. One parameter, event, is passed to the function. The state\nof the checkbox is found by event.checked. The checked item is found\nby event.item. Return false to prevent the default action which is to\ntoggle the select state of the series."
                  },
                  "subtree": {}
                }
              }
            },
            "fillColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "fillColor",
                "excludes": {},
                "description": "If the total sum of the pie's values is 0, the series is represented\nas an empty circle . The `fillColor` option defines the color of that\ncircle. Use [pie.borderWidth](#plotOptions.pie.borderWidth) to set\nthe border thickness."
              },
              "subtree": {}
            },
            "ignoreHiddenPoint": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "ignoreHiddenPoint",
                "excludes": {},
                "default": true,
                "products": {
                  "highcharts": 1
                },
                "description": "Equivalent to [chart.ignoreHiddenSeries](#chart.ignoreHiddenSeries),\nthis option tells whether the series shall be redrawn as if the\nhidden point were `null`.\n\nThe default value changed from `false` to `true` with Highcharts\n3.0."
              },
              "subtree": {}
            },
            "innerSize": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "innerSize",
                "excludes": {},
                "default": "0",
                "products": {
                  "highcharts": 1
                },
                "description": "The size of the inner diameter for the pie. A size greater than 0\nrenders a donut chart. Can be a percentage or pixel value.\nPercentages are relative to the pie size. Pixel values are given as\nintegers.\n\n\nNote: in Highcharts < 4.1.2, the percentage was relative to the plot\narea, not the pie size."
              },
              "subtree": {}
            },
            "minSize": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "minSize",
                "excludes": {},
                "default": "80",
                "products": {
                  "highcharts": 1
                },
                "description": "The minimum size for a pie in response to auto margins. The pie will\ntry to shrink to make room for data labels in side the plot area,\n but only to this size."
              },
              "subtree": {}
            },
            "point": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "point",
                "excludes": {}
              },
              "subtree": {
                "events": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "events",
                    "excludes": {}
                  },
                  "subtree": {
                    "legendItemClick": {
                      "meta": {
                        "types": {
                          "highcharts.pointlegenditemclickcallbackfunction": 1
                        },
                        "name": "legendItemClick",
                        "excludes": {},
                        "products": {
                          "highcharts": 1
                        },
                        "description": "Fires when the legend item belonging to the pie point (slice) is\nclicked. The `this` keyword refers to the point itself. One\nparameter, `event`, is passed to the function, containing common\nevent information. The default action is to toggle the visibility of\nthe point. This can be prevented by calling `event.preventDefault()`."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "showInLegend": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showInLegend",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1
                },
                "description": "Whether to display this particular series or series type in the\nlegend. Since 2.1, pies are not shown in the legend by default."
              },
              "subtree": {}
            },
            "size": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1,
                  "null": 1
                },
                "name": "size",
                "excludes": {},
                "default": null,
                "products": {
                  "highcharts": 1
                },
                "description": "The diameter of the pie relative to the plot area. Can be a\npercentage or pixel value. Pixel values are given as integers. The\ndefault behaviour (as of 3.0) is to scale to the plot area and give\nroom for data labels within the plot area.\n[slicedOffset](#plotOptions.pie.slicedOffset) is also included in the\ndefault size calculation. As a consequence, the size of the pie may\nvary when points are updated and data labels more around. In that\ncase it is best to set a fixed value, for example `\"75%\"`."
              },
              "subtree": {}
            },
            "slicedOffset": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "slicedOffset",
                "excludes": {},
                "default": 10,
                "products": {
                  "highcharts": 1
                },
                "description": "If a point is sliced, moved out from the center, how many pixels\nshould it be moved?."
              },
              "subtree": {}
            },
            "startAngle": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "startAngle",
                "excludes": {},
                "default": "0",
                "products": {
                  "highcharts": 1
                },
                "description": "The start angle of the pie slices in degrees where 0 is top and 90\nright."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {},
                    "name": "hover",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "extends": "plotOptions.series.states.hover"
                  },
                  "subtree": {
                    "brightness": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "brightness",
                        "excludes": {},
                        "default": 0.1,
                        "products": {
                          "highcharts": 1
                        },
                        "description": "How much to brighten the point on interaction. Requires the\nmain color to be defined in hex or rgb(a) format.\n\nIn styled mode, the hover brightness is by default replaced\nby a fill-opacity given in the `.highcharts-point-hover`\nclass."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "stickyTracking": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "stickyTracking",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1
                },
                "description": "Sticky tracking of mouse events. When true, the `mouseOut` event\non a series isn't triggered until the mouse moves over another\nseries, or out of the plot area. When false, the `mouseOut` event on\na series is triggered when the mouse leaves the area around the\nseries'  graph or markers. This also implies the tooltip. When\n`stickyTracking` is false and `tooltip.shared` is false, the tooltip\nwill be hidden when moving the mouse between series."
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "followPointer": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "followPointer",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "pivotpoints": {
          "meta": {
            "types": {},
            "name": "pivotpoints",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Pivot points indicator. This series requires the `linkedTo` option to be\nset and should be loaded after `stock/indicators/indicators.js` file.\n\nIn TypeScript the [type](series.pivotpoints.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `pivotpoints` series are defined in\n   [plotOptions.pivotpoints](plotOptions.pivotpoints).\n3. Options for one single series are given in\n   [the series instance array](series.pivotpoints).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        pivotpoints: {\n            // shared options for all pivotpoints series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'pivotpoints'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "averages"
                  },
                  "subtree": {}
                }
              }
            },
            "enableMouseTracking": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enableMouseTracking",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "algorithm": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "algorithm",
                    "excludes": {},
                    "default": "standard",
                    "description": "Algorithm used to calculate ressistance and support lines based\non pivot points. Implemented algorithms: `'standard'`,\n`'fibonacci'` and `'camarilla'`"
                  },
                  "subtree": {}
                },
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 28
                  },
                  "subtree": {}
                }
              }
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "format": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "format",
                    "excludes": {},
                    "default": "{point.pivotLine}"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "polygon": {
          "meta": {
            "types": {},
            "name": "polygon",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "A polygon series can be used to draw any freeform shape in the cartesian\ncoordinate system. A fill is applied with the `color` option, and\nstroke is applied through `lineWidth` and `lineColor` options.\n\nIn TypeScript the [type](series.polygon.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `polygon` series are defined in\n   [plotOptions.polygon](plotOptions.polygon).\n3. Options for one single series are given in\n   [the series instance array](series.polygon).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        polygon: {\n            // shared options for all polygon series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'polygon'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.scatter"
          },
          "subtree": {
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "states": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "states",
                    "excludes": {}
                  },
                  "subtree": {
                    "hover": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "hover",
                        "excludes": {}
                      },
                      "subtree": {
                        "enabled": {
                          "meta": {
                            "types": {
                              "boolean": 1
                            },
                            "name": "enabled",
                            "excludes": {},
                            "default": false
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                }
              }
            },
            "stickyTracking": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "stickyTracking",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "followPointer": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "followPointer",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": ""
                  },
                  "subtree": {}
                }
              }
            },
            "trackByArea": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "trackByArea",
                "excludes": {},
                "default": true
              },
              "subtree": {}
            }
          }
        },
        "ppo": {
          "meta": {
            "types": {},
            "name": "ppo",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Percentage Price Oscillator. This series requires the\n`linkedTo` option to be set and should be loaded after the\n`stock/indicators/indicators.js` and `stock/indicators/ema.js`.\n\nIn TypeScript the [type](series.ppo.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `ppo` series are defined in\n   [plotOptions.ppo](plotOptions.ppo).\n3. Options for one single series are given in\n   [the series instance array](series.ppo).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        ppo: {\n            // shared options for all ppo series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'ppo'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.ema"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {},
                "description": "Paramters used in calculation of Percentage Price Oscillator series\npoints."
              },
              "subtree": {
                "periods": {
                  "meta": {
                    "types": {
                      "array": "number"
                    },
                    "name": "periods",
                    "excludes": {},
                    "default": "[12, 26]",
                    "description": "Periods for Percentage Price Oscillator calculations."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "priceenvelopes": {
          "meta": {
            "types": {},
            "name": "priceenvelopes",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Price envelopes indicator based on [SMA](#plotOptions.sma) calculations.\nThis series requires the `linkedTo` option to be set and should be loaded\nafter the `stock/indicators/indicators.js` file.\n\nIn TypeScript the [type](series.priceenvelopes.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `priceenvelopes` series are defined in\n   [plotOptions.priceenvelopes](plotOptions.priceenvelopes).\n3. Options for one single series are given in\n   [the series instance array](series.priceenvelopes).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        priceenvelopes: {\n            // shared options for all priceenvelopes series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'priceenvelopes'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "bottomLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "bottomLine",
                "excludes": {},
                "description": "Bottom line options."
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the line. If not set, it's inherited from\n[plotOptions.priceenvelopes.color](#plotOptions.priceenvelopes.color)."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "averages"
                  },
                  "subtree": {}
                }
              }
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "bottomBand": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "bottomBand",
                    "excludes": {},
                    "default": 0.1,
                    "description": "Percentage below the moving average that should be displayed.\n0.1 means 90%. Relative to the calculated value."
                  },
                  "subtree": {}
                },
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 20
                  },
                  "subtree": {}
                },
                "topBand": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "topBand",
                    "excludes": {},
                    "default": 0.1,
                    "description": "Percentage above the moving average that should be displayed.\n0.1 means 110%. Relative to the calculated value."
                  },
                  "subtree": {}
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span><b> {series.name}</b><br/>Top: {point.top}<br/>Middle: {point.middle}<br/>Bottom: {point.bottom}<br/>"
                  },
                  "subtree": {}
                }
              }
            },
            "topLine": {
              "meta": {
                "types": {},
                "name": "topLine",
                "excludes": {},
                "description": "Top line options.",
                "extends": "plotOptions.priceenvelopes.bottomLine"
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            }
          }
        },
        "psar": {
          "meta": {
            "types": {},
            "name": "psar",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Parabolic SAR. This series requires `linkedTo`\noption to be set and should be loaded\nafter `stock/indicators/indicators.js` file.\n\nIn TypeScript the [type](series.psar.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `psar` series are defined in\n   [plotOptions.psar](plotOptions.psar).\n3. Options for one single series are given in\n   [the series instance array](series.psar).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        psar: {\n            // shared options for all psar series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'psar'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                }
              }
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "decimals": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "decimals",
                    "excludes": {},
                    "default": 4,
                    "description": "Number of maximum decimals that are used in PSAR calculations."
                  },
                  "subtree": {}
                },
                "increment": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "increment",
                    "excludes": {},
                    "default": 0.02,
                    "description": "Acceleration factor increases by increment each time\nthe extreme point makes a new high."
                  },
                  "subtree": {}
                },
                "index": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "index",
                    "excludes": {},
                    "default": 2,
                    "description": "Index from which PSAR is starting calculation"
                  },
                  "subtree": {}
                },
                "initialAccelerationFactor": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "initialAccelerationFactor",
                    "excludes": {},
                    "default": 0.02,
                    "description": "The initial value for acceleration factor.\nAcceleration factor is starting with this value\nand increases by specified increment each time\nthe extreme point makes a new high.\nAF can reach a maximum of maxAccelerationFactor,\nno matter how long the uptrend extends."
                  },
                  "subtree": {}
                },
                "maxAccelerationFactor": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "maxAccelerationFactor",
                    "excludes": {},
                    "default": 0.2,
                    "description": "The Maximum value for acceleration factor.\nAF can reach a maximum of maxAccelerationFactor,\nno matter how long the uptrend extends."
                  },
                  "subtree": {}
                }
              }
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineWidthPlus": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidthPlus",
                        "excludes": {},
                        "default": 0
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            }
          }
        },
        "pyramid": {
          "meta": {
            "types": {},
            "name": "pyramid",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A pyramid series is a special type of funnel, without neck and reversed\nby default.\n\nIn TypeScript the [type](series.pyramid.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `pyramid` series are defined in\n   [plotOptions.pyramid](plotOptions.pyramid).\n3. Options for one single series are given in\n   [the series instance array](series.pyramid).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        pyramid: {\n            // shared options for all pyramid series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'pyramid'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.funnel"
          },
          "subtree": {
            "neckHeight": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "neckHeight",
                "excludes": {},
                "default": "0%",
                "description": "The pyramid neck width is zero by default, as opposed to the funnel,\nwhich shares the same layout logic."
              },
              "subtree": {}
            },
            "neckWidth": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "neckWidth",
                "excludes": {},
                "default": "0%",
                "description": "The pyramid neck width is zero by default, as opposed to the funnel,\nwhich shares the same layout logic."
              },
              "subtree": {}
            },
            "reversed": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "reversed",
                "excludes": {},
                "default": true,
                "description": "The pyramid is reversed by default, as opposed to the funnel, which\nshares the layout engine, and is not reversed."
              },
              "subtree": {}
            }
          }
        },
        "pyramid3d": {
          "meta": {
            "types": {},
            "name": "pyramid3d",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A pyramid3d is a 3d version of pyramid series type. Pyramid charts are\na type of chart often used to visualize stages in a sales project,\nwhere the top are the initial stages with the most clients.\n\nIn TypeScript the [type](series.pyramid3d.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `pyramid3d` series are defined in\n   [plotOptions.pyramid3d](plotOptions.pyramid3d).\n3. Options for one single series are given in\n   [the series instance array](series.pyramid3d).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        pyramid3d: {\n            // shared options for all pyramid3d series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'pyramid3d'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.funnel3d"
          },
          "subtree": {
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1,
                  "*": 1
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "top"
                  },
                  "subtree": {}
                }
              }
            },
            "neckHeight": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "neckHeight",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "neckWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "neckWidth",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "reversed": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "reversed",
                "excludes": {},
                "default": true,
                "products": {
                  "highcharts": 1
                },
                "description": "A reversed pyramid3d is funnel3d, but the latter supports neck\nrelated options: neckHeight and neckWidth"
              },
              "subtree": {}
            }
          }
        },
        "roc": {
          "meta": {
            "types": {},
            "name": "roc",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Rate of change indicator (ROC). The indicator value for each point\nis defined as:\n\n`(C - Cn) / Cn * 100`\n\nwhere: `C` is the close value of the point of the same x in the\nlinked series and `Cn` is the close value of the point `n` periods\nago. `n` is set through [period](#plotOptions.roc.params.period).\n\nThis series requires `linkedTo` option to be set.\n\nIn TypeScript the [type](series.roc.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `roc` series are defined in\n   [plotOptions.roc](plotOptions.roc).\n3. Options for one single series are given in\n   [the series instance array](series.roc).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        roc: {\n            // shared options for all roc series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'roc'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "index": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "index",
                    "excludes": {},
                    "default": 3
                  },
                  "subtree": {}
                },
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 9
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "rsi": {
          "meta": {
            "types": {},
            "name": "rsi",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Relative strength index (RSI) technical indicator. This series\nrequires the `linkedTo` option to be set and should be loaded after\nthe `stock/indicators/indicators.js` file.\n\nIn TypeScript the [type](series.rsi.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `rsi` series are defined in\n   [plotOptions.rsi](plotOptions.rsi).\n3. Options for one single series are given in\n   [the series instance array](series.rsi).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        rsi: {\n            // shared options for all rsi series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'rsi'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "decimals": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "decimals",
                    "excludes": {},
                    "default": 4,
                    "description": "Number of maximum decimals that are used in RSI calculations."
                  },
                  "subtree": {}
                },
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 14
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "sankey": {
          "meta": {
            "types": {},
            "name": "sankey",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A sankey diagram is a type of flow diagram, in which the width of the\nlink between two nodes is shown proportionally to the flow quantity.\n\nIn TypeScript the [type](series.sankey.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `sankey` series are defined in\n   [plotOptions.sankey](plotOptions.sankey).\n3. Options for one single series are given in\n   [the series instance array](series.sankey).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        sankey: {\n            // shared options for all sankey series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'sankey'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "colorByPoint": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "colorByPoint",
                "excludes": {},
                "default": true
              },
              "subtree": {}
            },
            "curveFactor": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "curveFactor",
                "excludes": {},
                "default": 0.33,
                "description": "Higher numbers makes the links in a sankey diagram or dependency\nwheelrender more curved. A `curveFactor` of 0 makes the lines\nstraight."
              },
              "subtree": {}
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {},
                "description": "Options for the data labels appearing on top of the nodes and links. For\nsankey charts, data labels are visible for the nodes by default, but\nhidden for links. This is controlled by modifying the `nodeFormat`, and\nthe `format` that applies to links and is an empty string by default."
              },
              "subtree": {
                "backgroundColor": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "backgroundColor",
                    "excludes": {},
                    "default": "none"
                  },
                  "subtree": {}
                },
                "crop": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "crop",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "format": {
                  "meta": {
                    "types": {},
                    "name": "format",
                    "excludes": {},
                    "description": "The [format string](https://www.highcharts.com/docs/chart-\nconcepts/labels-and-string-formatting) specifying what to show for\n_links_ in the sankey diagram. Defaults to an empty string returned\nfrom the `formatter`, in effect disabling the labels."
                  },
                  "subtree": {}
                },
                "formatter": {
                  "meta": {
                    "types": {},
                    "name": "formatter",
                    "excludes": {},
                    "description": "Callback to format data labels for _links_ in the sankey diagram.\nThe `format` option takes precedence over the `formatter`."
                  },
                  "subtree": {}
                },
                "inside": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "inside",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "nodeFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "nodeFormat",
                    "excludes": {},
                    "description": "The [format string](https://www.highcharts.com/docs/chart-\nconcepts/labels-and-string-formatting) specifying what to show\nfor _nodes_ in the sankey diagram. By default the\n`nodeFormatter` returns `{point.name}`."
                  },
                  "subtree": {}
                },
                "nodeFormatter": {
                  "meta": {
                    "types": {
                      "function": 1
                    },
                    "name": "nodeFormatter",
                    "excludes": {},
                    "description": "Callback to format data labels for _nodes_ in the sankey diagram.\nThe `nodeFormat` option takes precedence over the `nodeFormatter`."
                  },
                  "subtree": {}
                }
              }
            },
            "levels": {
              "meta": {
                "types": {
                  "array": "*"
                },
                "name": "levels",
                "excludes": {},
                "description": "Set options on specific levels. Takes precedence over series options,\nbut not node and link options."
              },
              "subtree": {
                "borderColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1
                    },
                    "name": "borderColor",
                    "excludes": {},
                    "description": "Can set `borderColor` on all nodes which lay on the same level."
                  },
                  "subtree": {}
                },
                "borderWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderWidth",
                    "excludes": {},
                    "description": "Can set `borderWidth` on all nodes which lay on the same level."
                  },
                  "subtree": {}
                },
                "color": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "description": "Can set `color` on all nodes which lay on the same level."
                  },
                  "subtree": {}
                },
                "colorByPoint": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "colorByPoint",
                    "excludes": {},
                    "default": "true",
                    "description": "Can set `colorByPoint` on all nodes which lay on the same level."
                  },
                  "subtree": {}
                },
                "level": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "level",
                    "excludes": {},
                    "description": "Decides which level takes effect from the options set in the levels\nobject."
                  },
                  "subtree": {}
                },
                "linkOpacity": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "linkOpacity",
                    "excludes": {},
                    "default": "0.5",
                    "description": "Can set `linkOpacity` on all points which lay on the same level."
                  },
                  "subtree": {}
                },
                "states": {
                  "meta": {
                    "types": {
                      "highcharts.pointstatesoptionsobject": 1
                    },
                    "name": "states",
                    "excludes": {},
                    "description": "Can set `states` on all nodes and points which lay on the same level."
                  },
                  "subtree": {}
                }
              }
            },
            "linkOpacity": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "linkOpacity",
                "excludes": {},
                "default": 0.5,
                "description": "Opacity for the links between nodes in the sankey diagram."
              },
              "subtree": {}
            },
            "minLinkWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "minLinkWidth",
                "excludes": {},
                "default": "0",
                "description": "The minimal width for a line of a sankey. By default,\n0 values are not shown."
              },
              "subtree": {}
            },
            "nodePadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "nodePadding",
                "excludes": {},
                "default": 10,
                "description": "The padding between nodes in a sankey diagram or dependency wheel, in\npixels."
              },
              "subtree": {}
            },
            "nodeWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "nodeWidth",
                "excludes": {},
                "default": 20,
                "description": "The pixel width of each node in a sankey diagram or dependency wheel,\nor the height in case the chart is inverted."
              },
              "subtree": {}
            },
            "showInLegend": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showInLegend",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {
                    "linkOpacity": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "linkOpacity",
                        "excludes": {},
                        "default": 1,
                        "description": "Opacity for the links between nodes in the sankey diagram in\nhover mode."
                      },
                      "subtree": {}
                    }
                  }
                },
                "inactive": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "inactive",
                    "excludes": {},
                    "description": "The opposite state of a hover for a single point node/link."
                  },
                  "subtree": {
                    "animation": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "animation",
                        "excludes": {}
                      },
                      "subtree": {
                        "duration": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "duration",
                            "excludes": {},
                            "default": 50
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "linkOpacity": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "linkOpacity",
                        "excludes": {},
                        "default": 0.1,
                        "description": "Opacity for the links between nodes in the sankey diagram in\ninactive mode."
                      },
                      "subtree": {}
                    },
                    "opacity": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "opacity",
                        "excludes": {},
                        "default": 0.1
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "followPointer": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "followPointer",
                    "excludes": {},
                    "default": true,
                    "description": "Whether the tooltip should follow the pointer or stay fixed on\nthe item."
                  },
                  "subtree": {}
                },
                "headerFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "headerFormat",
                    "excludes": {},
                    "default": "<span style=\"font-size: 10px\">{series.name}</span><br/>"
                  },
                  "subtree": {}
                },
                "nodeFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "nodeFormat",
                    "excludes": {},
                    "default": "{point.name}: <b>{point.sum}</b><br/>",
                    "description": "The\n[format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\nspecifying what to show for _nodes_ in tooltip of a diagram\nseries, as opposed to links."
                  },
                  "subtree": {}
                },
                "nodeFormatter": {
                  "meta": {
                    "types": {
                      "highcharts.formattercallbackfunction.<highcharts.sankeynodeobject>": 1
                    },
                    "name": "nodeFormatter",
                    "excludes": {},
                    "description": "A callback for defining the format for _nodes_ in the chart's\ntooltip, as opposed to links."
                  },
                  "subtree": {}
                },
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "{point.fromNode.name} → {point.toNode.name}: <b>{point.weight}</b><br/>"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "scatter": {
          "meta": {
            "types": {},
            "name": "scatter",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "A scatter plot uses cartesian coordinates to display values for two\nvariables for a set of data.\n\nIn TypeScript the [type](series.scatter.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `scatter` series are defined in\n   [plotOptions.scatter](plotOptions.scatter).\n3. Options for one single series are given in\n   [the series instance array](series.scatter).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        scatter: {\n            // shared options for all scatter series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'scatter'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.line"
          },
          "subtree": {
            "findNearestPointBy": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "findNearestPointBy",
                "excludes": {},
                "default": "xy"
              },
              "subtree": {}
            },
            "jitter": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "jitter",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Apply a jitter effect for the rendered markers. When plotting\ndiscrete values, a little random noise may help telling the points\napart. The jitter setting applies a random displacement of up to `n`\naxis units in either direction. So for example on a horizontal X\naxis, setting the `jitter.x` to 0.24 will render the point in a\nrandom position between 0.24 units to the left and 0.24 units to the\nright of the true axis position. On a category axis, setting it to\n0.5 will fill up the bin and make the data appear continuous.\n\nWhen rendered on top of a box plot or a column series, a jitter value\nof 0.24 will correspond to the underlying series' default\n[groupPadding](https://api.highcharts.com/highcharts/plotOptions.column.groupPadding)\nand [pointPadding](https://api.highcharts.com/highcharts/plotOptions.column.pointPadding)\nsettings."
              },
              "subtree": {
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "default": 0,
                    "description": "The maximal X offset for the random jitter effect."
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": 0,
                    "description": "The maximal Y offset for the random jitter effect."
                  },
                  "subtree": {}
                }
              }
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 0,
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "The width of the line connecting the data points."
              },
              "subtree": {}
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                }
              }
            },
            "stickyTracking": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "stickyTracking",
                "excludes": {},
                "default": "false",
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Sticky tracking of mouse events. When true, the `mouseOut` event\non a series isn't triggered until the mouse moves over another\nseries, or out of the plot area. When false, the `mouseOut` event on\na series is triggered when the mouse leaves the area around the\nseries' graph or markers. This also implies the tooltip. When\n`stickyTracking` is false and `tooltip.shared` is false, the tooltip\nwill be hidden when moving the mouse between series."
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "A configuration object for the tooltip rendering of each single\nseries. Properties are inherited from [tooltip](#tooltip).\nOverridable properties are `headerFormat`, `pointFormat`,\n`yDecimals`, `xDateFormat`, `yPrefix` and `ySuffix`. Unlike other\nseries, in a scatter plot the series.name by default shows in the\nheaderFormat and point.x and point.y in the pointFormat."
              },
              "subtree": {
                "headerFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "headerFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span> <span style=\"font-size: 10px\"> {series.name}</span><br/>"
                  },
                  "subtree": {}
                },
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "scatter3d": {
          "meta": {
            "types": {},
            "name": "scatter3d",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A 3D scatter plot uses x, y and z coordinates to display values for three\nvariables for a set of data.\n\nIn TypeScript the [type](series.scatter3d.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `scatter3d` series are defined in\n   [plotOptions.scatter3d](plotOptions.scatter3d).\n3. Options for one single series are given in\n   [the series instance array](series.scatter3d).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        scatter3d: {\n            // shared options for all scatter3d series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'scatter3d'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.scatter"
          },
          "subtree": {
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>z: <b>{point.z}</b><br/>"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "series": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "series",
            "excludes": {},
            "description": "General options for all series types.\n\nIn TypeScript the [type](series.line.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `line` series are defined in\n   [plotOptions.line](plotOptions.line).\n3. Options for one single series are given in\n   [the series instance array](series.line).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        line: {\n            // shared options for all line series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'line'\n    }]\n});\n```\n            "
          },
          "subtree": {
            "accessibility": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "accessibility",
                "excludes": {},
                "description": "Accessibility options for a series. Requires the accessibility module."
              },
              "subtree": {
                "description": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "description",
                    "excludes": {},
                    "default": "undefined",
                    "description": "Provide a description of the series, announced to screen readers."
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": "undefined",
                    "description": "Enable/disable accessibility functionality for a specific series."
                  },
                  "subtree": {}
                },
                "exposeAsGroupOnly": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "exposeAsGroupOnly",
                    "excludes": {},
                    "default": "undefined",
                    "description": "Expose only the series element to screen readers, not its points."
                  },
                  "subtree": {}
                },
                "keyboardNavigation": {
                  "meta": {
                    "types": {
                      "object": 1
                    },
                    "name": "keyboardNavigation",
                    "excludes": {},
                    "description": "Keyboard navigation for a series"
                  },
                  "subtree": {
                    "enabled": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "enabled",
                        "excludes": {},
                        "default": "undefined",
                        "description": "Enable/disable keyboard navigation support for a specific series."
                      },
                      "subtree": {}
                    }
                  }
                },
                "pointDescriptionFormatter": {
                  "meta": {
                    "types": {
                      "function": 1
                    },
                    "name": "pointDescriptionFormatter",
                    "excludes": {},
                    "default": "undefined",
                    "description": "Formatter function to use instead of the default for point\ndescriptions. Same as `accessibility.pointDescriptionFormatter`, but for\na single series."
                  },
                  "subtree": {}
                }
              }
            },
            "allAreas": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "allAreas",
                "excludes": {},
                "default": "true",
                "products": {
                  "highmaps": 1
                },
                "description": "Whether all areas of the map defined in `mapData` should be rendered.\nIf `true`, areas which don't correspond to a data point, are rendered\nas `null` points. If `false`, those areas are skipped."
              },
              "subtree": {}
            },
            "allowPointSelect": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "allowPointSelect",
                "excludes": {},
                "default": false,
                "description": "Allow this series' points to be selected by clicking on the graphic\n(columns, point markers, pie slices, map areas etc).\n\nThe selected points can be handled by point select and unselect\nevents, or collectively by the [getSelectedPoints](Highcharts.Chart#getSelectedPoints) function.\n\nAnd alternative way of selecting points is through dragging."
              },
              "subtree": {}
            },
            "animation": {
              "meta": {
                "types": {
                  "boolean": 1,
                  "highcharts.animationoptionsobject": 1
                },
                "name": "animation",
                "excludes": {},
                "description": "Enable or disable the initial animation when a series is displayed.\nThe animation can also be set as a configuration object. Please\nnote that this option only applies to the initial animation of the\nseries itself. For other animations, see [chart.animation](#chart.animation) and the animation parameter under the API methods.\nThe following properties are supported:\n\n- `duration`: The duration of the animation in milliseconds.\n\n- `easing`: Can be a string reference to an easing function set on\n  the `Math` object or a function. See the _Custom easing function_\n  demo below.\n\nDue to poor performance, animation is disabled in old IE browsers\nfor several chart types."
              },
              "subtree": {
                "duration": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "duration",
                    "excludes": {},
                    "default": "1000"
                  },
                  "subtree": {}
                }
              }
            },
            "animationLimit": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "animationLimit",
                "excludes": {},
                "description": "For some series, there is a limit that shuts down initial animation\nby default when the total number of points in the chart is too high.\nFor example, for a column chart and its derivatives, animation does\nnot run if there is more than 250 points totally. To disable this\ncap, set `animationLimit` to `Infinity`."
              },
              "subtree": {}
            },
            "boostBlending": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "boostBlending",
                "excludes": {},
                "default": "undefined",
                "description": "Sets the color blending in the boost module."
              },
              "subtree": {}
            },
            "boostThreshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "boostThreshold",
                "excludes": {},
                "default": "5000",
                "description": "Set the point threshold for when a series should enter boost mode.\n\nSetting it to e.g. 2000 will cause the series to enter boost mode when there\nare 2000 or more points in the series.\n\nTo disable boosting on the series, set the `boostThreshold` to 0. Setting it\nto 1 will force boosting.\n\nNote that the [cropThreshold](plotOptions.series.cropThreshold) also affects\nthis setting. When zooming in on a series that has fewer points than the\n`cropThreshold`, all points are rendered although outside the visible plot\narea, and the `boostThreshold` won't take effect."
              },
              "subtree": {}
            },
            "borderColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "borderColor",
                "excludes": {},
                "default": "'#cccccc'",
                "products": {
                  "highmaps": 1
                },
                "description": "The border color of the map areas.\n\nIn styled mode, the border stroke is given in the `.highcharts-point`\nclass."
              },
              "subtree": {}
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": "1",
                "products": {
                  "highmaps": 1
                },
                "description": "The border width of each map area.\n\nIn styled mode, the border stroke width is given in the\n`.highcharts-point` class."
              },
              "subtree": {}
            },
            "className": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "className",
                "excludes": {},
                "description": "An additional class name to apply to the series' graphical elements.\nThis option does not replace default class names of the graphical\nelement."
              },
              "subtree": {}
            },
            "clip": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "clip",
                "excludes": {},
                "default": "true",
                "description": "Disable this option to allow series rendering in the whole plotting\narea.\n\n**Note:** Clipping should be always enabled when\n[chart.zoomType](#chart.zoomType) is set"
              },
              "subtree": {}
            },
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "color",
                "excludes": {},
                "description": "The main color of the series. In line type series it applies to the\nline and the point markers unless otherwise specified. In bar type\nseries it applies to the bars unless a color is specified per point.\nThe default value is pulled from the `options.colors` array.\n\nIn styled mode, the color can be defined by the\n[colorIndex](#plotOptions.series.colorIndex) option. Also, the series\ncolor can be set with the `.highcharts-series`,\n`.highcharts-color-{n}`, `.highcharts-{type}-series` or\n`.highcharts-series-{n}` class, or individual classes given by the\n`className` option."
              },
              "subtree": {}
            },
            "colorAxis": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1,
                  "boolean": 1
                },
                "name": "colorAxis",
                "excludes": {},
                "default": "0",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "highmaps": 1
                },
                "description": "When using dual or multiple color axes, this number defines which\ncolorAxis the particular series is connected to. It refers to\neither the\n{@link #colorAxis.id|axis id}\nor the index of the axis in the colorAxis array, with 0 being the\nfirst. Set this option to false to prevent a series from connecting\nto the default color axis.\n\nSince v7.2.0 the option can also be an axis id or an axis index\ninstead of a boolean flag."
              },
              "subtree": {}
            },
            "colorIndex": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "colorIndex",
                "excludes": {},
                "description": "Styled mode only. A specific color index to use for the series, so\nits graphic representations are given the class name\n`highcharts-color-{n}`."
              },
              "subtree": {}
            },
            "colorKey": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "colorKey",
                "excludes": {},
                "default": "y",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "highmaps": 1
                },
                "description": "Determines what data value should be used to calculate point color\nif `colorAxis` is used. Requires to set `min` and `max` if some\ncustom point property is used or if approximation for data grouping\nis set to `'sum'`."
              },
              "subtree": {}
            },
            "compare": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "compare",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Compare the values of the series against the first non-null, non-\nzero value in the visible range. The y axis will show percentage\nor absolute change depending on whether `compare` is set to `\"percent\"`\nor `\"value\"`. When this is applied to multiple series, it allows\ncomparing the development of the series against each other. Adds\na `change` field to every point object."
              },
              "subtree": {}
            },
            "compareBase": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "compareBase",
                "excludes": {},
                "default": "0",
                "products": {
                  "highstock": 1
                },
                "description": "When [compare](#plotOptions.series.compare) is `percent`, this option\ndictates whether to use 0 or 100 as the base of comparison."
              },
              "subtree": {}
            },
            "compareStart": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "compareStart",
                "excludes": {},
                "default": "false",
                "products": {
                  "highstock": 1
                },
                "description": "Defines if comparison should start from the first point within the visible\nrange or should start from the first point <b>before</b> the range.\nIn other words, this flag determines if first point within the visible range\nwill have 0% (`compareStart=true`) or should have been already calculated\naccording to the previous point (`compareStart=false`)."
              },
              "subtree": {}
            },
            "connectEnds": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "connectEnds",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "Polar charts only. Whether to connect the ends of a line series\nplot across the extremes."
              },
              "subtree": {}
            },
            "connectNulls": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "connectNulls",
                "excludes": {},
                "default": "false",
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Whether to connect a graph line across null points, or render a gap\nbetween the two points on either side of the null."
              },
              "subtree": {}
            },
            "connectors": {
              "meta": {
                "types": {},
                "name": "connectors",
                "excludes": {},
                "products": {
                  "gantt": 1
                },
                "description": "Override Pathfinder connector options for a series. Requires Highcharts Gantt\nto be loaded.",
                "extends": "connectors"
              },
              "subtree": {}
            },
            "cropThreshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "cropThreshold",
                "excludes": {},
                "default": 300,
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "When the series contains less points than the crop threshold, all\npoints are drawn, even if the points fall outside the visible plot\narea at the current zoom. The advantage of drawing all points\n(including markers and columns), is that animation is performed on\nupdates. On the other hand, when the series contains more points than\nthe crop threshold, the series data is cropped to only contain points\nthat fall within the plot area. The advantage of cropping away\ninvisible points is to increase performance on large series."
              },
              "subtree": {}
            },
            "cursor": {
              "meta": {
                "types": {
                  "string": 1,
                  "highcharts.cursorvalue": 1
                },
                "name": "cursor",
                "excludes": {},
                "description": "You can set the cursor to \"pointer\" if you have click events attached\nto the series, to signal to the user that the points and lines can\nbe clicked.\n\nIn styled mode, the series cursor can be set with the same classes\nas listed under [series.color](#plotOptions.series.color)."
              },
              "subtree": {}
            },
            "dashStyle": {
              "meta": {
                "types": {
                  "highcharts.dashstylevalue": 1
                },
                "name": "dashStyle",
                "excludes": {},
                "default": "Solid",
                "description": "A name for the dash style to use for the graph, or for some series\ntypes the outline of each shape.\n\nIn styled mode, the\n[stroke dash-array](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/series-dashstyle/)\ncan be set with the same classes as listed under\n[series.color](#plotOptions.series.color)."
              },
              "subtree": {}
            },
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Data grouping is the concept of sampling the data values into larger\nblocks in order to ease readability and increase performance of the\nJavaScript charts. Highstock by default applies data grouping when\nthe points become closer than a certain pixel value, determined by\nthe `groupPixelWidth` option.\n\nIf data grouping is applied, the grouping information of grouped\npoints can be read from the [Point.dataGroup](/class-reference/Highcharts.Point#dataGroup). If point options other than\nthe data itself are set, for example `name` or `color` or custom properties,\nthe grouping logic doesn't know how to group it. In this case the options of\nthe first point instance are copied over to the group point. This can be\naltered through a custom `approximation` callback function."
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "highcharts.datagroupingapproximationvalue": 1,
                      "function": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "products": {
                      "highstock": 1
                    },
                    "description": "The method of approximation inside a group. When for example 30 days\nare grouped into one month, this determines what value should represent\nthe group. Possible values are \"average\", \"averages\", \"open\", \"high\",\n\"low\", \"close\" and \"sum\". For OHLC and candlestick series the approximation\nis \"ohlc\" by default, which finds the open, high, low and close values\nwithin all the grouped data. For ranges, the approximation is \"range\",\nwhich finds the low and high values. For multi-dimensional data,\nlike ranges and OHLC, \"averages\" will compute the average for each\ndimension.\n\nCustom aggregate methods can be added by assigning a callback function\nas the approximation. This function takes a numeric array as the\nargument and should return a single numeric value or `null`. Note\nthat the numeric array will never contain null values, only true\nnumbers. Instead, if null values are present in the raw data, the\nnumeric array will have an `.hasNulls` property set to `true`. For\nsingle-value data sets the data is available in the first argument\nof the callback function. For OHLC data sets, all the open values\nare in the first argument, all high values in the second etc.\n\nSince v4.2.7, grouping meta data is available in the approximation\ncallback from `this.dataGroupInfo`. It can be used to extract information\nfrom the raw data.\n\nDefaults to `average` for line-type series, `sum` for columns, `range`\nfor range series and `ohlc` for OHLC and candlestick."
                  },
                  "subtree": {}
                },
                "dateTimeLabelFormats": {
                  "meta": {
                    "types": {
                      "object": 1
                    },
                    "name": "dateTimeLabelFormats",
                    "excludes": {},
                    "products": {
                      "highstock": 1
                    },
                    "description": "Datetime formats for the header of the tooltip in a stock chart.\nThe format can vary within a chart depending on the currently selected\ntime range and the current data grouping.\n\nThe default formats are:\n\n<pre>{\n    millisecond: [\n        '%A, %b %e, %H:%M:%S.%L', '%A, %b %e, %H:%M:%S.%L', '-%H:%M:%S.%L'\n    ],\n    second: ['%A, %b %e, %H:%M:%S', '%A, %b %e, %H:%M:%S', '-%H:%M:%S'],\n    minute: ['%A, %b %e, %H:%M', '%A, %b %e, %H:%M', '-%H:%M'],\n    hour: ['%A, %b %e, %H:%M', '%A, %b %e, %H:%M', '-%H:%M'],\n    day: ['%A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],\n    week: ['Week from %A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],\n    month: ['%B %Y', '%B', '-%B %Y'],\n    year: ['%Y', '%Y', '-%Y']\n}</pre>\n\nFor each of these array definitions, the first item is the format\nused when the active time span is one unit. For instance, if the\ncurrent data applies to one week, the first item of the week array\nis used. The second and third items are used when the active time\nspan is more than two units. For instance, if the current data applies\nto two weeks, the second and third item of the week array are used,\n and applied to the start and end date of the time span."
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": "true",
                    "products": {
                      "highstock": 1
                    },
                    "description": "Enable or disable data grouping."
                  },
                  "subtree": {}
                },
                "forced": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "forced",
                    "excludes": {},
                    "default": "false",
                    "products": {
                      "highstock": 1
                    },
                    "description": "When data grouping is forced, it runs no matter how small the intervals\nare. This can be handy for example when the sum should be calculated\nfor values appearing at random times within each hour."
                  },
                  "subtree": {}
                },
                "groupAll": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "groupAll",
                    "excludes": {},
                    "default": "false",
                    "products": {
                      "highstock": 1
                    },
                    "description": "By default only points within the visible range are grouped. Enabling this\noption will force data grouping to calculate all grouped points for a given\ndataset. That option prevents for example a column series from calculating\na grouped point partially. The effect is similar to\n[Series.getExtremesFromAll](#plotOptions.series.getExtremesFromAll) but does\nnot affect yAxis extremes."
                  },
                  "subtree": {}
                },
                "groupPixelWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "groupPixelWidth",
                    "excludes": {},
                    "default": "2",
                    "products": {
                      "highstock": 1
                    },
                    "description": "The approximate pixel width of each group. If for example a series\nwith 30 points is displayed over a 600 pixel wide plot area, no grouping\nis performed. If however the series contains so many points that\nthe spacing is less than the groupPixelWidth, Highcharts will try\nto group it into appropriate groups so that each is more or less\ntwo pixels wide. If multiple series with different group pixel widths\nare drawn on the same x axis, all series will take the greatest width.\nFor example, line series have 2px default group width, while column\nseries have 10px. If combined, both the line and the column will\nhave 10px by default."
                  },
                  "subtree": {}
                },
                "smoothed": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "smoothed",
                    "excludes": {},
                    "default": "false",
                    "products": {
                      "highstock": 1
                    },
                    "description": "Normally, a group is indexed by the start of that group, so for example\nwhen 30 daily values are grouped into one month, that month's x value\nwill be the 1st of the month. This apparently shifts the data to\nthe left. When the smoothed option is true, this is compensated for.\nThe data is shifted to the middle of the group, and min and max\nvalues are preserved. Internally, this is used in the Navigator series."
                  },
                  "subtree": {}
                },
                "units": {
                  "meta": {
                    "types": {
                      "array": "Array.<string, (Array.<number"
                    },
                    "name": "units",
                    "excludes": {},
                    "products": {
                      "highstock": 1
                    },
                    "description": "An array determining what time intervals the data is allowed to be\ngrouped to. Each array item is an array where the first value is\nthe time unit and the second value another array of allowed multiples.\nDefaults to:\n\n<pre>units: [[\n    'millisecond', // unit name\n    [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n], [\n    'second',\n    [1, 2, 5, 10, 15, 30]\n], [\n    'minute',\n    [1, 2, 5, 10, 15, 30]\n], [\n    'hour',\n    [1, 2, 3, 4, 6, 8, 12]\n], [\n    'day',\n    [1]\n], [\n    'week',\n    [1]\n], [\n    'month',\n    [1, 3, 6]\n], [\n    'year',\n    null\n]]</pre>"
                  },
                  "subtree": {}
                }
              }
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {},
                "description": "Options for the series data labels, appearing next to each data point.\n\nIn styled mode, the data labels can be styled with the\n`.highcharts-data-label-box` and `.highcharts-data-label` class names\n([see example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/series-datalabels))."
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "default": "center",
                    "description": "The alignment of the data label compared to the point. If `right`,\nthe right side of the label should be touching the point. For\npoints with an extent, like columns, the alignments also dictates\nhow to align it inside the box, as given with the\n[inside](#plotOptions.column.dataLabels.inside) option. Can be one of\n`left`, `center` or `right`."
                  },
                  "subtree": {}
                },
                "allowOverlap": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "allowOverlap",
                    "excludes": {},
                    "default": "false",
                    "description": "Whether to allow data labels to overlap. To make the labels less\nsensitive for overlapping, the [dataLabels.padding](\n#plotOptions.series.dataLabels.padding) can be set to 0."
                  },
                  "subtree": {}
                },
                "backgroundColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1
                    },
                    "name": "backgroundColor",
                    "excludes": {},
                    "description": "The background color or gradient for the data label."
                  },
                  "subtree": {}
                },
                "borderColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1
                    },
                    "name": "borderColor",
                    "excludes": {},
                    "description": "The border color for the data label. Defaults to `undefined`."
                  },
                  "subtree": {}
                },
                "borderRadius": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderRadius",
                    "excludes": {},
                    "default": "0",
                    "description": "The border radius in pixels for the data label."
                  },
                  "subtree": {}
                },
                "borderWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderWidth",
                    "excludes": {},
                    "default": "0",
                    "description": "The border width in pixels for the data label."
                  },
                  "subtree": {}
                },
                "className": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "className",
                    "excludes": {},
                    "description": "A class name for the data label. Particularly in styled mode, this\ncan be used to give each series' or point's data label unique\nstyling. In addition to this option, a default color class name is\nadded so that we can give the labels a\n[contrast text shadow](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/data-label-contrast/)."
                  },
                  "subtree": {}
                },
                "color": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "description": "The text color for the data labels. Defaults to `undefined`. For\ncertain series types, like column or map, the data labels can be\ndrawn inside the points. In this case the data label will be drawn\nwith maximum contrast by default. Additionally, it will be given a\n`text-outline` style with the opposite color, to further increase the\ncontrast. This can be overridden by setting the `text-outline` style\nto `none` in the `dataLabels.style` option."
                  },
                  "subtree": {}
                },
                "crop": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "crop",
                    "excludes": {},
                    "default": "true",
                    "description": "Whether to hide data labels that are outside the plot area. By\ndefault, the data label is moved inside the plot area according to\nthe [overflow](#plotOptions.series.dataLabels.overflow) option."
                  },
                  "subtree": {}
                },
                "defer": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "defer",
                    "excludes": {},
                    "default": "true",
                    "products": {
                      "highcharts": 1,
                      "highstock": 1
                    },
                    "description": "Whether to defer displaying the data labels until the initial series\nanimation has finished."
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": "false",
                    "description": "Enable or disable the data labels."
                  },
                  "subtree": {}
                },
                "filter": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "filter",
                    "excludes": {},
                    "description": "A declarative filter for which data labels to display. The\ndeclarative filter is designed for use when callback functions are\nnot available, like when the chart options require a pure JSON\nstructure or for use with graphical editors. For programmatic\ncontrol, use the `formatter` instead, and return `undefined` to\ndisable a single data label."
                  },
                  "subtree": {
                    "operator": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "operator",
                        "excludes": {},
                        "description": "The operator to compare by. Can be one of `>`, `<`, `>=`, `<=`, `==`,\nand `===`."
                      },
                      "subtree": {}
                    },
                    "property": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "property",
                        "excludes": {},
                        "description": "The point property to filter by. Point options are passed directly to\nproperties, additionally there are `y` value, `percentage` and others\nlisted under [Point](https://api.highcharts.com/class-reference/Highcharts.Point)\nmembers."
                      },
                      "subtree": {}
                    },
                    "value": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "value",
                        "excludes": {},
                        "description": "The value to compare against."
                      },
                      "subtree": {}
                    }
                  }
                },
                "format": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "format",
                    "excludes": {},
                    "description": "A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\nfor the data label. Available variables are the same as for\n`formatter`."
                  },
                  "subtree": {}
                },
                "formatter": {
                  "meta": {
                    "types": {
                      "function": 1
                    },
                    "name": "formatter",
                    "excludes": {},
                    "description": "Callback JavaScript function to format the data label. Note that if a\n`format` is defined, the format takes precedence and the formatter is\nignored. Available data are:\n\n<table>\n\n<tbody>\n\n<tr>\n\n<td>`this.percentage`</td>\n\n<td>Stacked series and pies only. The point's percentage of the\ntotal.</td>\n\n</tr>\n\n<tr>\n\n<td>`this.point`</td>\n\n<td>The point object. The point name, if defined, is available\nthrough `this.point.name`.</td>\n\n</tr>\n\n<tr>\n\n<td>`this.series`:</td>\n\n<td>The series object. The series name is available through\n`this.series.name`.</td>\n\n</tr>\n\n<tr>\n\n<td>`this.total`</td>\n\n<td>Stacked series only. The total value at this point's x value.\n</td>\n\n</tr>\n\n<tr>\n\n<td>`this.x`:</td>\n\n<td>The x value.</td>\n\n</tr>\n\n<tr>\n\n<td>`this.y`:</td>\n\n<td>The y value.</td>\n\n</tr>\n\n</tbody>\n\n</table>"
                  },
                  "subtree": {}
                },
                "inside": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "inside",
                    "excludes": {},
                    "description": "For points with an extent, like columns or map areas, whether to\nalign the data label inside the box or to the actual value point.\nDefaults to `false` in most cases, `true` in stacked columns."
                  },
                  "subtree": {}
                },
                "overflow": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "overflow",
                    "excludes": {},
                    "default": "justify",
                    "description": "How to handle data labels that flow outside the plot area. The\ndefault is `justify`, which aligns them inside the plot area. For\ncolumns and bars, this means it will be moved inside the bar. To\ndisplay data labels outside the plot area, set `crop` to `false` and\n`overflow` to `\"none\"`."
                  },
                  "subtree": {}
                },
                "padding": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "padding",
                    "excludes": {},
                    "default": 5,
                    "description": "When either the `borderWidth` or the `backgroundColor` is set,\nthis is the padding within the box."
                  },
                  "subtree": {}
                },
                "rotation": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "rotation",
                    "excludes": {},
                    "default": "0",
                    "description": "Text rotation in degrees. Note that due to a more complex structure,\nbackgrounds, borders and padding will be lost on a rotated data\nlabel."
                  },
                  "subtree": {}
                },
                "shadow": {
                  "meta": {
                    "types": {
                      "*": 1,
                      "boolean": 1
                    },
                    "name": "shadow",
                    "excludes": {},
                    "default": "false",
                    "description": "The shadow of the box. Works best with `borderWidth` or\n`backgroundColor`. Since 2.3 the shadow can be an object\nconfiguration containing `color`, `offsetX`, `offsetY`, `opacity` and\n`width`."
                  },
                  "subtree": {}
                },
                "shape": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "shape",
                    "excludes": {},
                    "default": "square",
                    "description": "The name of a symbol to use for the border around the label. Symbols\nare predefined functions on the Renderer object."
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "highcharts.cssobject": 1
                    },
                    "name": "style",
                    "excludes": {},
                    "default": "{\"color\": \"contrast\", \"fontSize\": \"11px\", \"fontWeight\": \"bold\", \"textOutline\": \"1px contrast\" }",
                    "description": "Styles for the label. The default `color` setting is `\"contrast\"`,\nwhich is a pseudo color that Highcharts picks up and applies the\nmaximum contrast to the underlying point item, for example the\nbar in a bar chart.\n\nThe `textOutline` is a pseudo property that\napplies an outline of the given width with the given color, which\nby default is the maximum contrast to the text. So a bright text\ncolor will result in a black text outline for maximum readability\non a mixed background. In some cases, especially with grayscale\ntext, the text outline doesn't work well, in which cases it can\nbe disabled by setting it to `\"none\"`. When `useHTML` is true, the\n`textOutline` will not be picked up. In this, case, the same effect\ncan be acheived through the `text-shadow` CSS property."
                  },
                  "subtree": {
                    "color": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "color",
                        "excludes": {},
                        "default": "contrast"
                      },
                      "subtree": {}
                    },
                    "fontSize": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "fontSize",
                        "excludes": {},
                        "default": "11px"
                      },
                      "subtree": {}
                    },
                    "fontWeight": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "fontWeight",
                        "excludes": {},
                        "default": "bold"
                      },
                      "subtree": {}
                    },
                    "textOutline": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "textOutline",
                        "excludes": {},
                        "default": "1px contrast"
                      },
                      "subtree": {}
                    }
                  }
                },
                "useHTML": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "useHTML",
                    "excludes": {},
                    "default": "false",
                    "description": "Whether to\n[use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\nto render the labels."
                  },
                  "subtree": {}
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "bottom",
                    "description": "The vertical alignment of a data label. Can be one of `top`, `middle`\nor `bottom`. The default value depends on the data, for instance\nin a column chart, the label is above positive values and below\nnegative values."
                  },
                  "subtree": {}
                },
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "default": "0",
                    "description": "The x position offset of the label relative to the point in pixels."
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": "-6",
                    "description": "The y position offset of the label relative to the point in pixels."
                  },
                  "subtree": {}
                },
                "zIndex": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "zIndex",
                    "excludes": {},
                    "default": "6",
                    "description": "The Z index of the data labels. The default Z index puts it above\nthe series. Use a Z index of 2 to display it behind the series."
                  },
                  "subtree": {}
                }
              }
            },
            "description": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "description",
                "excludes": {},
                "description": "A description of the series to add to the screen reader information\nabout the series."
              },
              "subtree": {}
            },
            "dragDrop": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dragDrop",
                "excludes": {},
                "description": "The draggable-points module allows points to be moved around or modified in\nthe chart. In addition to the options mentioned under the `dragDrop` API\nstructure, the module fires three events,\n[point.dragStart](plotOptions.series.point.events.dragStart),\n[point.drag](plotOptions.series.point.events.drag) and\n[point.drop](plotOptions.series.point.events.drop)."
              },
              "subtree": {
                "dragHandle": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "dragHandle",
                    "excludes": {},
                    "description": "Options for the drag handles."
                  },
                  "subtree": {
                    "className": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "className",
                        "excludes": {},
                        "default": "highcharts-drag-handle",
                        "description": "The class name of the drag handles. Defaults to `highcharts-drag-handle`."
                      },
                      "subtree": {}
                    },
                    "color": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "color",
                        "excludes": {},
                        "default": "#fff",
                        "description": "The fill color of the drag handles."
                      },
                      "subtree": {}
                    },
                    "cursor": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "cursor",
                        "excludes": {},
                        "description": "The mouse cursor to use for the drag handles. By default this is\nintelligently switching between `ew-resize` and `ns-resize` depending on\nthe direction the point is being dragged."
                      },
                      "subtree": {}
                    },
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "default": "rgba(0, 0, 0, 0.6)",
                        "description": "The line color of the drag handles."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "The line width for the drag handles."
                      },
                      "subtree": {}
                    },
                    "pathFormatter": {
                      "meta": {
                        "types": {
                          "function": 1
                        },
                        "name": "pathFormatter",
                        "excludes": {},
                        "description": "Function to define the SVG path to use for the drag handles. Takes the\npoint as argument. Should return an SVG path in array format. The SVG\npath is automatically positioned on the point."
                      },
                      "subtree": {}
                    },
                    "zIndex": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "zIndex",
                        "excludes": {},
                        "default": 901,
                        "description": "The z index for the drag handles."
                      },
                      "subtree": {}
                    }
                  }
                },
                "dragMaxX": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "dragMaxX",
                    "excludes": {},
                    "description": "Set the maximum X value the points can be moved to."
                  },
                  "subtree": {}
                },
                "dragMaxY": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "dragMaxY",
                    "excludes": {},
                    "description": "Set the maximum Y value the points can be moved to."
                  },
                  "subtree": {}
                },
                "dragMinX": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "dragMinX",
                    "excludes": {},
                    "description": "Set the minimum X value the points can be moved to."
                  },
                  "subtree": {}
                },
                "dragMinY": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "dragMinY",
                    "excludes": {},
                    "description": "Set the minimum Y value the points can be moved to."
                  },
                  "subtree": {}
                },
                "dragPrecisionX": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "dragPrecisionX",
                    "excludes": {},
                    "default": "0",
                    "description": "The X precision value to drag to for this series. Set to 0 to disable. By\ndefault this is disabled, except for category axes, where the default is 1."
                  },
                  "subtree": {}
                },
                "dragPrecisionY": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "dragPrecisionY",
                    "excludes": {},
                    "default": "0",
                    "description": "The Y precision value to drag to for this series. Set to 0 to disable. By\ndefault this is disabled, except for category axes, where the default is 1."
                  },
                  "subtree": {}
                },
                "dragSensitivity": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "dragSensitivity",
                    "excludes": {},
                    "default": "2",
                    "description": "The amount of pixels to drag the pointer before it counts as a drag\noperation. This prevents drag/drop to fire when just clicking or selecting\npoints."
                  },
                  "subtree": {}
                },
                "draggableX": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableX",
                    "excludes": {},
                    "description": "Enable dragging in the X dimension."
                  },
                  "subtree": {}
                },
                "draggableY": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableY",
                    "excludes": {},
                    "description": "Enable dragging in the Y dimension. Note that this is not supported for\nTreeGrid axes (the default axis type in Gantt charts)."
                  },
                  "subtree": {}
                },
                "groupBy": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "groupBy",
                    "excludes": {},
                    "description": "Group the points by a property. Points with the same property value will be\ngrouped together when moving."
                  },
                  "subtree": {}
                },
                "guideBox": {
                  "meta": {
                    "types": {
                      "highcharts.dictionary.<highcharts.plotseriesdragdropguideboxdefaultoptions>": 1
                    },
                    "name": "guideBox",
                    "excludes": {},
                    "description": "Style options for the guide box. The guide box has one state by default, the\n`default` state."
                  },
                  "subtree": {
                    "default": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "default",
                        "excludes": {},
                        "description": "Style options for the guide box default state."
                      },
                      "subtree": {
                        "className": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "className",
                            "excludes": {},
                            "default": "highcharts-drag-box-default",
                            "description": "CSS class name of the guide box in this state. Defaults to\n`highcharts-drag-box-default`."
                          },
                          "subtree": {}
                        },
                        "color": {
                          "meta": {
                            "types": {
                              "highcharts.colorstring": 1,
                              "highcharts.gradientcolorobject": 1,
                              "highcharts.patternobject": 1
                            },
                            "name": "color",
                            "excludes": {},
                            "default": "rgba(0, 0, 0, 0.1)",
                            "description": "Guide box fill color."
                          },
                          "subtree": {}
                        },
                        "cursor": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "cursor",
                            "excludes": {},
                            "default": "move",
                            "description": "Guide box cursor."
                          },
                          "subtree": {}
                        },
                        "lineColor": {
                          "meta": {
                            "types": {
                              "highcharts.colorstring": 1
                            },
                            "name": "lineColor",
                            "excludes": {},
                            "default": "#888",
                            "description": "Color of the border around the guide box."
                          },
                          "subtree": {}
                        },
                        "lineWidth": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "lineWidth",
                            "excludes": {},
                            "default": 1,
                            "description": "Width of the line around the guide box."
                          },
                          "subtree": {}
                        },
                        "zIndex": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "zIndex",
                            "excludes": {},
                            "default": 900,
                            "description": "Guide box zIndex."
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                },
                "liveRedraw": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "liveRedraw",
                    "excludes": {},
                    "default": "true",
                    "description": "Update points as they are dragged. If false, a guide box is drawn to\nillustrate the new point size."
                  },
                  "subtree": {}
                }
              }
            },
            "enableMouseTracking": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enableMouseTracking",
                "excludes": {},
                "default": "true",
                "description": "Enable or disable the mouse tracking for a specific series. This\nincludes point tooltips and click events on graphs and points. For\nlarge datasets it improves performance."
              },
              "subtree": {}
            },
            "events": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "events",
                "excludes": {},
                "description": "General event handlers for the series items. These event hooks can\nalso be attached to the series at run time using the\n`Highcharts.addEvent` function."
              },
              "subtree": {
                "afterAnimate": {
                  "meta": {
                    "types": {
                      "highcharts.seriesafteranimatecallbackfunction": 1
                    },
                    "name": "afterAnimate",
                    "excludes": {},
                    "products": {
                      "highcharts": 1,
                      "highstock": 1,
                      "gantt": 1
                    },
                    "description": "Fires after the series has finished its initial animation, or in case\nanimation is disabled, immediately as the series is displayed."
                  },
                  "subtree": {}
                },
                "checkboxClick": {
                  "meta": {
                    "types": {
                      "highcharts.seriescheckboxclickcallbackfunction": 1
                    },
                    "name": "checkboxClick",
                    "excludes": {},
                    "description": "Fires when the checkbox next to the series' name in the legend is\nclicked. One parameter, `event`, is passed to the function. The state\nof the checkbox is found by `event.checked`. The checked item is\nfound by `event.item`. Return `false` to prevent the default action\nwhich is to toggle the select state of the series."
                  },
                  "subtree": {}
                },
                "click": {
                  "meta": {
                    "types": {
                      "highcharts.seriesclickcallbackfunction": 1
                    },
                    "name": "click",
                    "excludes": {},
                    "description": "Fires when the series is clicked. One parameter, `event`, is passed\nto the function, containing common event information. Additionally,\n`event.point` holds a pointer to the nearest point on the graph."
                  },
                  "subtree": {}
                },
                "hide": {
                  "meta": {
                    "types": {
                      "highcharts.serieshidecallbackfunction": 1
                    },
                    "name": "hide",
                    "excludes": {},
                    "description": "Fires when the series is hidden after chart generation time, either\nby clicking the legend item or by calling `.hide()`."
                  },
                  "subtree": {}
                },
                "legendItemClick": {
                  "meta": {
                    "types": {
                      "highcharts.serieslegenditemclickcallbackfunction": 1
                    },
                    "name": "legendItemClick",
                    "excludes": {},
                    "description": "Fires when the legend item belonging to the series is clicked. One\nparameter, `event`, is passed to the function. The default action\nis to toggle the visibility of the series. This can be prevented\nby returning `false` or calling `event.preventDefault()`."
                  },
                  "subtree": {}
                },
                "mouseOut": {
                  "meta": {
                    "types": {
                      "highcharts.seriesmouseoutcallbackfunction": 1
                    },
                    "name": "mouseOut",
                    "excludes": {},
                    "description": "Fires when the mouse leaves the graph. One parameter, `event`, is\npassed to the function, containing common event information. If the\n[stickyTracking](#plotOptions.series) option is true, `mouseOut`\ndoesn't happen before the mouse enters another graph or leaves the\nplot area."
                  },
                  "subtree": {}
                },
                "mouseOver": {
                  "meta": {
                    "types": {
                      "highcharts.seriesmouseovercallbackfunction": 1
                    },
                    "name": "mouseOver",
                    "excludes": {},
                    "description": "Fires when the mouse enters the graph. One parameter, `event`, is\npassed to the function, containing common event information."
                  },
                  "subtree": {}
                },
                "show": {
                  "meta": {
                    "types": {
                      "highcharts.seriesshowcallbackfunction": 1
                    },
                    "name": "show",
                    "excludes": {},
                    "description": "Fires when the series is shown after chart generation time, either\nby clicking the legend item or by calling `.show()`."
                  },
                  "subtree": {}
                }
              }
            },
            "findNearestPointBy": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "findNearestPointBy",
                "excludes": {},
                "default": "x",
                "description": "Determines whether the series should look for the nearest point\nin both dimensions or just the x-dimension when hovering the series.\nDefaults to `'xy'` for scatter series and `'x'` for most other\nseries. If the data has duplicate x-values, it is recommended to\nset this to `'xy'` to allow hovering over all points.\n\nApplies only to series types using nearest neighbor search (not\ndirect hover) for tooltip."
              },
              "subtree": {}
            },
            "gapSize": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "gapSize",
                "excludes": {},
                "default": "0",
                "products": {
                  "highstock": 1
                },
                "description": "Defines when to display a gap in the graph, together with the\n[gapUnit](plotOptions.series.gapUnit) option.\n\nIn case when `dataGrouping` is enabled, points can be grouped into a\nlarger time span. This can make the grouped points to have a greater\ndistance than the absolute value of `gapSize` property, which will result\nin disappearing graph completely. To prevent this situation the mentioned\ndistance between grouped points is used instead of previously defined\n`gapSize`.\n\nIn practice, this option is most often used to visualize gaps in\ntime series. In a stock chart, intraday data is available for daytime\nhours, while gaps will appear in nights and weekends."
              },
              "subtree": {}
            },
            "gapUnit": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "gapUnit",
                "excludes": {},
                "default": "relative",
                "products": {
                  "highstock": 1
                },
                "description": "Together with [gapSize](plotOptions.series.gapSize), this option defines\nwhere to draw gaps in the graph.\n\nWhen the `gapUnit` is `relative` (default), a gap size of 5 means\nthat if the distance between two points is greater than five times\nthat of the two closest points, the graph will be broken.\n\nWhen the `gapUnit` is `value`, the gap is based on absolute axis values,\nwhich on a datetime axis is milliseconds. This also applies to the\nnavigator series that inherits gap options from the base series."
              },
              "subtree": {}
            },
            "getExtremesFromAll": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "getExtremesFromAll",
                "excludes": {},
                "default": "false",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "Whether to use the Y extremes of the total chart width or only the\nzoomed area when zooming in on parts of the X axis. By default, the\nY axis adjusts to the min and max of the visible data. Cartesian\nseries only."
              },
              "subtree": {}
            },
            "includeInDataExport": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "includeInDataExport",
                "excludes": {},
                "description": "When set to `false` will prevent the series data from being included in\nany form of data export.\n\nSince version 6.0.0 until 7.1.0 the option was existing undocumented\nas `includeInCSVExport`."
              },
              "subtree": {}
            },
            "joinBy": {
              "meta": {
                "types": {
                  "string": 1,
                  "array": "string"
                },
                "name": "joinBy",
                "excludes": {},
                "default": "hc-key",
                "products": {
                  "highmaps": 1
                },
                "description": "What property to join the `mapData` to the value data. For example,\nif joinBy is \"code\", the mapData items with a specific code is merged\ninto the data with the same code. For maps loaded from GeoJSON, the\nkeys may be held in each point's `properties` object.\n\nThe joinBy option can also be an array of two values, where the first\npoints to a key in the `mapData`, and the second points to another\nkey in the `data`.\n\nWhen joinBy is `null`, the map items are joined by their position in\nthe array, which performs much better in maps with many data points.\nThis is the recommended option if you are printing more than a\nthousand data points and have a backend that can preprocess the data\ninto a parallel array of the mapData."
              },
              "subtree": {}
            },
            "keys": {
              "meta": {
                "types": {
                  "array": "string"
                },
                "name": "keys",
                "excludes": {},
                "description": "An array specifying which option maps to which key in the data point\narray. This makes it convenient to work with unstructured data arrays\nfrom different sources."
              },
              "subtree": {}
            },
            "label": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "label",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "Series labels are placed as close to the series as possible in a\nnatural way, seeking to avoid other series. The goal of this\nfeature is to make the chart more easily readable, like if a\nhuman designer placed the labels in the optimal position.\n\nThe series labels currently work with series types having a\n`graph` or an `area`."
              },
              "subtree": {
                "boxesToAvoid": {
                  "meta": {
                    "types": {
                      "array": "Highcharts.LabelIntersectBoxObject"
                    },
                    "name": "boxesToAvoid",
                    "excludes": {},
                    "description": "An array of boxes to avoid when laying out the labels. Each\nitem has a `left`, `right`, `top` and `bottom` property."
                  },
                  "subtree": {}
                },
                "connectorAllowed": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "connectorAllowed",
                    "excludes": {},
                    "default": false,
                    "description": "Allow labels to be placed distant to the graph if necessary,\nand draw a connector line to the graph. Setting this option\nto true may decrease the performance significantly, since the\nalgorithm with systematically search for open spaces in the\nwhole plot area. Visually, it may also result in a more\ncluttered chart, though more of the series will be labeled."
                  },
                  "subtree": {}
                },
                "connectorNeighbourDistance": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "connectorNeighbourDistance",
                    "excludes": {},
                    "default": 24,
                    "description": "If the label is closer than this to a neighbour graph, draw a\nconnector."
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true,
                    "description": "Enable the series label per series."
                  },
                  "subtree": {}
                },
                "maxFontSize": {
                  "meta": {
                    "types": {
                      "number": 1,
                      "null": 1
                    },
                    "name": "maxFontSize",
                    "excludes": {},
                    "default": null,
                    "description": "For area-like series, allow the font size to vary so that\nsmall areas get a smaller font size. The default applies this\neffect to area-like series but not line-like series."
                  },
                  "subtree": {}
                },
                "minFontSize": {
                  "meta": {
                    "types": {
                      "number": 1,
                      "null": 1
                    },
                    "name": "minFontSize",
                    "excludes": {},
                    "default": null,
                    "description": "For area-like series, allow the font size to vary so that\nsmall areas get a smaller font size. The default applies this\neffect to area-like series but not line-like series."
                  },
                  "subtree": {}
                },
                "onArea": {
                  "meta": {
                    "types": {
                      "boolean": 1,
                      "null": 1
                    },
                    "name": "onArea",
                    "excludes": {},
                    "default": null,
                    "description": "Draw the label on the area of an area series. By default it\nis drawn on the area. Set it to `false` to draw it next to\nthe graph instead."
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "highcharts.cssobject": 1
                    },
                    "name": "style",
                    "excludes": {},
                    "default": "{\"font-weight\": \"bold\"}",
                    "description": "Styles for the series label. The color defaults to the series\ncolor, or a contrast color if `onArea`."
                  },
                  "subtree": {}
                }
              }
            },
            "lastPrice": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "lastPrice",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "The line marks the last price from all points."
              },
              "subtree": {
                "color": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "default": "red",
                    "products": {
                      "highstock": 1
                    },
                    "description": "The color of the line of last price."
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": "true",
                    "products": {
                      "highstock": 1
                    },
                    "description": "Enable or disable the indicator."
                  },
                  "subtree": {}
                }
              }
            },
            "lastVisiblePrice": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "lastVisiblePrice",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "The line marks the last price from visible range of points."
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": "true",
                    "products": {
                      "highstock": 1
                    },
                    "description": "Enable or disable the indicator."
                  },
                  "subtree": {}
                },
                "label": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "label",
                    "excludes": {}
                  },
                  "subtree": {
                    "enabled": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "enabled",
                        "excludes": {},
                        "default": "true",
                        "products": {
                          "highstock": 1
                        },
                        "description": "Enable or disable the label."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 2,
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Pixel width of the graph line."
              },
              "subtree": {}
            },
            "linecap": {
              "meta": {
                "types": {
                  "highcharts.serieslinecapvalue": 1
                },
                "name": "linecap",
                "excludes": {},
                "default": "round",
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "The line cap used for line ends and line joins on the graph."
              },
              "subtree": {}
            },
            "linkedTo": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "linkedTo",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "The [id](#series.id) of another series to link to. Additionally,\nthe value can be \":previous\" to link to the previous series. When\ntwo series are linked, only the first one appears in the legend.\nToggling the visibility of this also toggles the linked series."
              },
              "subtree": {}
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {},
                "description": "Options for the point markers of line-like series. Properties like\n`fillColor`, `lineColor` and `lineWidth` define the visual appearance\nof the markers. Other series types, like column series, don't have\nmarkers, but have visual options on the series level instead.\n\nIn styled mode, the markers can be styled with the\n`.highcharts-point`, `.highcharts-point-hover` and\n`.highcharts-point-select` class names."
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "description": "Enable or disable the point marker. If `undefined`, the markers\nare hidden when the data is dense, and shown for more widespread\ndata points."
                  },
                  "subtree": {}
                },
                "enabledThreshold": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "enabledThreshold",
                    "excludes": {},
                    "default": 2,
                    "description": "The threshold for how dense the point markers should be before\nthey are hidden, given that `enabled` is not defined. The number\nindicates the horizontal distance between the two closest points\nin the series, as multiples of the `marker.radius`. In other\nwords, the default value of 2 means points are hidden if\noverlapping horizontally."
                  },
                  "subtree": {}
                },
                "fillColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "fillColor",
                    "excludes": {},
                    "description": "The fill color of the point marker. When `undefined`, the series'\nor point's color is used."
                  },
                  "subtree": {}
                },
                "height": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "height",
                    "excludes": {},
                    "description": "Image markers only. Set the image width explicitly. When using\nthis option, a `width` must also be set."
                  },
                  "subtree": {}
                },
                "lineColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "lineColor",
                    "excludes": {},
                    "default": "#ffffff",
                    "description": "The color of the point marker's outline. When `undefined`, the\nseries' or point's color is used."
                  },
                  "subtree": {}
                },
                "lineWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "lineWidth",
                    "excludes": {},
                    "default": 0,
                    "description": "The width of the point marker's outline."
                  },
                  "subtree": {}
                },
                "radius": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "radius",
                    "excludes": {},
                    "default": 4,
                    "description": "The radius of the point marker."
                  },
                  "subtree": {}
                },
                "states": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "states",
                    "excludes": {},
                    "description": "States for a single point marker."
                  },
                  "subtree": {
                    "hover": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "hover",
                        "excludes": {},
                        "description": "The hover state for a single point marker."
                      },
                      "subtree": {
                        "animation": {
                          "meta": {
                            "types": {
                              "boolean": 1,
                              "highcharts.animationoptionsobject": 1
                            },
                            "name": "animation",
                            "excludes": {},
                            "default": "{\"duration\": 50}",
                            "description": "Animation when hovering over the marker."
                          },
                          "subtree": {}
                        },
                        "enabled": {
                          "meta": {
                            "types": {
                              "boolean": 1
                            },
                            "name": "enabled",
                            "excludes": {},
                            "default": true,
                            "description": "Enable or disable the point marker."
                          },
                          "subtree": {}
                        },
                        "fillColor": {
                          "meta": {
                            "types": {
                              "highcharts.colorstring": 1,
                              "highcharts.gradientcolorobject": 1,
                              "highcharts.patternobject": 1
                            },
                            "name": "fillColor",
                            "excludes": {},
                            "description": "The fill color of the marker in hover state. When\n`undefined`, the series' or point's fillColor for normal\nstate is used."
                          },
                          "subtree": {}
                        },
                        "lineColor": {
                          "meta": {
                            "types": {
                              "highcharts.colorstring": 1,
                              "highcharts.gradientcolorobject": 1,
                              "highcharts.patternobject": 1
                            },
                            "name": "lineColor",
                            "excludes": {},
                            "description": "The color of the point marker's outline. When\n`undefined`, the series' or point's lineColor for normal\nstate is used."
                          },
                          "subtree": {}
                        },
                        "lineWidth": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "lineWidth",
                            "excludes": {},
                            "description": "The width of the point marker's outline. When\n`undefined`, the series' or point's lineWidth for normal\nstate is used."
                          },
                          "subtree": {}
                        },
                        "lineWidthPlus": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "lineWidthPlus",
                            "excludes": {},
                            "default": 1,
                            "description": "The additional line width for a hovered point."
                          },
                          "subtree": {}
                        },
                        "radius": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "radius",
                            "excludes": {},
                            "description": "The radius of the point marker. In hover state, it\ndefaults to the normal state's radius + 2 as per the\n[radiusPlus](#plotOptions.series.marker.states.hover.radiusPlus)\noption."
                          },
                          "subtree": {}
                        },
                        "radiusPlus": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "radiusPlus",
                            "excludes": {},
                            "default": 2,
                            "description": "The number of pixels to increase the radius of the\nhovered point."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "inactive": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "inactive",
                        "excludes": {}
                      },
                      "subtree": {
                        "animation": {
                          "meta": {
                            "types": {
                              "boolean": 1,
                              "highcharts.animationoptionsobject": 1
                            },
                            "name": "animation",
                            "excludes": {},
                            "description": "Animation when not hovering over the marker."
                          },
                          "subtree": {}
                        },
                        "opacity": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "opacity",
                            "excludes": {},
                            "description": "Opacity of inactive markers."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "normal": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "normal",
                        "excludes": {},
                        "description": "The normal state of a single point marker. Currently only\nused for setting animation when returning to normal state\nfrom hover."
                      },
                      "subtree": {
                        "animation": {
                          "meta": {
                            "types": {
                              "boolean": 1,
                              "highcharts.animationoptionsobject": 1
                            },
                            "name": "animation",
                            "excludes": {},
                            "default": true,
                            "description": "Animation when returning to normal state after hovering."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "select": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "select",
                        "excludes": {},
                        "description": "The appearance of the point marker when selected. In order to\nallow a point to be selected, set the\n`series.allowPointSelect` option to true."
                      },
                      "subtree": {
                        "enabled": {
                          "meta": {
                            "types": {
                              "boolean": 1
                            },
                            "name": "enabled",
                            "excludes": {},
                            "default": "true",
                            "description": "Enable or disable visible feedback for selection."
                          },
                          "subtree": {}
                        },
                        "fillColor": {
                          "meta": {
                            "types": {
                              "highcharts.colorstring": 1,
                              "highcharts.gradientcolorobject": 1,
                              "highcharts.patternobject": 1
                            },
                            "name": "fillColor",
                            "excludes": {},
                            "default": "#cccccc",
                            "description": "The fill color of the point marker."
                          },
                          "subtree": {}
                        },
                        "lineColor": {
                          "meta": {
                            "types": {
                              "highcharts.colorstring": 1,
                              "highcharts.gradientcolorobject": 1,
                              "highcharts.patternobject": 1
                            },
                            "name": "lineColor",
                            "excludes": {},
                            "default": "#000000",
                            "description": "The color of the point marker's outline. When\n`undefined`, the series' or point's color is used."
                          },
                          "subtree": {}
                        },
                        "lineWidth": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "lineWidth",
                            "excludes": {},
                            "default": 2,
                            "description": "The width of the point marker's outline."
                          },
                          "subtree": {}
                        },
                        "radius": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "radius",
                            "excludes": {},
                            "description": "The radius of the point marker. In hover state, it\ndefaults to the normal state's radius + 2."
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                },
                "symbol": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "symbol",
                    "excludes": {},
                    "description": "A predefined shape or symbol for the marker. When undefined, the\nsymbol is pulled from options.symbols. Other possible values are\n\"circle\", \"square\", \"diamond\", \"triangle\" and \"triangle-down\".\n\nAdditionally, the URL to a graphic can be given on this form:\n\"url(graphic.png)\". Note that for the image to be applied to\nexported charts, its URL needs to be accessible by the export\nserver.\n\nCustom callbacks for symbol path generation can also be added to\n`Highcharts.SVGRenderer.prototype.symbols`. The callback is then\nused by its method name, as shown in the demo."
                  },
                  "subtree": {}
                },
                "width": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "width",
                    "excludes": {},
                    "description": "Image markers only. Set the image width explicitly. When using\nthis option, a `height` must also be set."
                  },
                  "subtree": {}
                }
              }
            },
            "navigatorOptions": {
              "meta": {
                "types": {
                  "highcharts.plotseriesoptions": 1
                },
                "name": "navigatorOptions",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Options for the corresponding navigator series if `showInNavigator`\nis `true` for this series. Available options are the same as any\nseries, documented at [plotOptions](#plotOptions.series) and\n[series](#series).\n\nThese options are merged with options in [navigator.series](#navigator.series), and will take precedence if the same option is\ndefined both places."
              },
              "subtree": {}
            },
            "negativeColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "negativeColor",
                "excludes": {},
                "description": "The color for the parts of the graph or points that are below the\n[threshold](#plotOptions.series.threshold)."
              },
              "subtree": {}
            },
            "opacity": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "opacity",
                "excludes": {},
                "default": 1,
                "description": "Opacity of a series parts: line, fill (e.g. area) and dataLabels."
              },
              "subtree": {}
            },
            "point": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "point",
                "excludes": {},
                "description": "Properties for each single point."
              },
              "subtree": {
                "events": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "events",
                    "excludes": {},
                    "description": "Events for each single point."
                  },
                  "subtree": {
                    "click": {
                      "meta": {
                        "types": {
                          "highcharts.pointclickcallbackfunction": 1
                        },
                        "name": "click",
                        "excludes": {},
                        "description": "Fires when a point is clicked. One parameter, `event`, is passed\nto the function, containing common event information.\n\nIf the `series.allowPointSelect` option is true, the default\naction for the point's click event is to toggle the point's\nselect state. Returning `false` cancels this action."
                      },
                      "subtree": {}
                    },
                    "drag": {
                      "meta": {
                        "types": {
                          "highcharts.pointdragcallbackfunction": 1
                        },
                        "name": "drag",
                        "excludes": {},
                        "description": "Callback that fires while dragging a point. The mouse event is passed in as\nparameter. The original data can be accessed from `e.origin`, and the new\npoint values can be accessed from `e.newPoints`. If there is only a single\npoint being updated, it can be accessed from `e.newPoint` for simplicity, and\nits ID can be accessed from `e.newPointId`. The `this` context is the point\nbeing dragged. To stop the default drag action, return false. See\n[drag and drop options](plotOptions.series.dragDrop)."
                      },
                      "subtree": {}
                    },
                    "dragStart": {
                      "meta": {
                        "types": {
                          "highcharts.pointdragstartcallbackfunction": 1
                        },
                        "name": "dragStart",
                        "excludes": {},
                        "description": "Callback that fires when starting to drag a point. The mouse event object is\npassed in as an argument. If a drag handle is used, `e.updateProp` is set to\nthe data property being dragged. The `this` context is the point. See\n[drag and drop options](plotOptions.series.dragDrop)."
                      },
                      "subtree": {}
                    },
                    "drop": {
                      "meta": {
                        "types": {
                          "highcharts.pointdropcallbackfunction": 1
                        },
                        "name": "drop",
                        "excludes": {},
                        "description": "Callback that fires when the point is dropped. The parameters passed are the\nsame as for [drag](#plotOptions.series.point.events.drag). To stop the\ndefault drop action, return false. See\n[drag and drop options](plotOptions.series.dragDrop)."
                      },
                      "subtree": {}
                    },
                    "mouseOut": {
                      "meta": {
                        "types": {
                          "highcharts.pointmouseoutcallbackfunction": 1
                        },
                        "name": "mouseOut",
                        "excludes": {},
                        "description": "Fires when the mouse leaves the area close to the point. One\nparameter, `event`, is passed to the function, containing common\nevent information."
                      },
                      "subtree": {}
                    },
                    "mouseOver": {
                      "meta": {
                        "types": {
                          "highcharts.pointmouseovercallbackfunction": 1
                        },
                        "name": "mouseOver",
                        "excludes": {},
                        "description": "Fires when the mouse enters the area close to the point. One\nparameter, `event`, is passed to the function, containing common\nevent information."
                      },
                      "subtree": {}
                    },
                    "remove": {
                      "meta": {
                        "types": {
                          "highcharts.pointremovecallbackfunction": 1
                        },
                        "name": "remove",
                        "excludes": {},
                        "description": "Fires when the point is removed using the `.remove()` method. One\nparameter, `event`, is passed to the function. Returning `false`\ncancels the operation."
                      },
                      "subtree": {}
                    },
                    "select": {
                      "meta": {
                        "types": {
                          "highcharts.pointselectcallbackfunction": 1
                        },
                        "name": "select",
                        "excludes": {},
                        "description": "Fires when the point is selected either programmatically or\nfollowing a click on the point. One parameter, `event`, is passed\nto the function. Returning `false` cancels the operation."
                      },
                      "subtree": {}
                    },
                    "unselect": {
                      "meta": {
                        "types": {
                          "highcharts.pointunselectcallbackfunction": 1
                        },
                        "name": "unselect",
                        "excludes": {},
                        "description": "Fires when the point is unselected either programmatically or\nfollowing a click on the point. One parameter, `event`, is passed\nto the function.\n Returning `false` cancels the operation."
                      },
                      "subtree": {}
                    },
                    "update": {
                      "meta": {
                        "types": {
                          "highcharts.pointupdatecallbackfunction": 1
                        },
                        "name": "update",
                        "excludes": {},
                        "description": "Fires when the point is updated programmatically through the\n`.update()` method. One parameter, `event`, is passed to the\nfunction. The new point options can be accessed through\n`event.options`. Returning `false` cancels the operation."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "pointDescriptionFormatter": {
              "meta": {
                "types": {
                  "function": 1
                },
                "name": "pointDescriptionFormatter",
                "excludes": {},
                "description": "Same as\n[accessibility.pointDescriptionFormatter](#accessibility.pointDescriptionFormatter),\nbut for an individual series. Overrides the chart wide configuration."
              },
              "subtree": {}
            },
            "pointInterval": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointInterval",
                "excludes": {},
                "default": "1",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "If no x values are given for the points in a series, `pointInterval`\ndefines the interval of the x values. For example, if a series\ncontains one value every decade starting from year 0, set\n`pointInterval` to `10`. In true `datetime` axes, the `pointInterval`\nis set in milliseconds.\n\nIt can be also be combined with `pointIntervalUnit` to draw irregular\ntime intervals.\n\nPlease note that this options applies to the _series data_, not the\ninterval of the axis ticks, which is independent."
              },
              "subtree": {}
            },
            "pointIntervalUnit": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "pointIntervalUnit",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "On datetime series, this allows for setting the\n[pointInterval](#plotOptions.series.pointInterval) to irregular time\nunits, `day`, `month` and `year`. A day is usually the same as 24\nhours, but `pointIntervalUnit` also takes the DST crossover into\nconsideration when dealing with local time. Combine this option with\n`pointInterval` to draw weeks, quarters, 6 months, 10 years etc.\n\nPlease note that this options applies to the _series data_, not the\ninterval of the axis ticks, which is independent."
              },
              "subtree": {}
            },
            "pointPlacement": {
              "meta": {
                "types": {
                  "string": 1,
                  "number": 1
                },
                "name": "pointPlacement",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "Possible values: `\"on\"`, `\"between\"`, `number`.\n\nIn a column chart, when pointPlacement is `\"on\"`, the point will not\ncreate any padding of the X axis. In a polar column chart this means\nthat the first column points directly north. If the pointPlacement is\n`\"between\"`, the columns will be laid out between ticks. This is\nuseful for example for visualising an amount between two points in\ntime or in a certain sector of a polar chart.\n\nSince Highcharts 3.0.2, the point placement can also be numeric,\nwhere 0 is on the axis value, -0.5 is between this value and the\nprevious, and 0.5 is between this value and the next. Unlike the\ntextual options, numeric point placement options won't affect axis\npadding.\n\nNote that pointPlacement needs a [pointRange](#plotOptions.series.pointRange) to work. For column series this is\ncomputed, but for line-type series it needs to be set.\n\nFor the `xrange` series type and gantt charts, if the Y axis is a\ncategory axis, the `pointPlacement` applies to the Y axis rather than\nthe (typically datetime) X axis.\n\nDefaults to `undefined` in cartesian charts, `\"between\"` in polar\ncharts."
              },
              "subtree": {}
            },
            "pointRange": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointRange",
                "excludes": {},
                "default": 0,
                "products": {
                  "highstock": 1
                },
                "description": "The width of each point on the x axis. For example in a column chart\nwith one value each day, the pointRange would be 1 day (= 24 * 3600\n* 1000 milliseconds). This is normally computed automatically, but\nthis option can be used to override the automatic value."
              },
              "subtree": {}
            },
            "pointStart": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointStart",
                "excludes": {},
                "default": "0",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "If no x values are given for the points in a series, pointStart\ndefines on what value to start. For example, if a series contains one\nyearly value starting from 1945, set pointStart to 1945."
              },
              "subtree": {}
            },
            "selected": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "selected",
                "excludes": {},
                "default": "false",
                "description": "Whether to select the series initially. If `showCheckbox` is true,\nthe checkbox next to the series name in the legend will be checked\nfor a selected series."
              },
              "subtree": {}
            },
            "shadow": {
              "meta": {
                "types": {
                  "boolean": 1,
                  "highcharts.shadowoptionsobject": 1
                },
                "name": "shadow",
                "excludes": {},
                "default": "false",
                "description": "Whether to apply a drop shadow to the graph line. Since 2.3 the\nshadow can be an object configuration containing `color`, `offsetX`,\n`offsetY`, `opacity` and `width`."
              },
              "subtree": {}
            },
            "showCheckbox": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showCheckbox",
                "excludes": {},
                "default": false,
                "description": "If true, a checkbox is displayed next to the legend item to allow\nselecting the series. The state of the checkbox is determined by\nthe `selected` option."
              },
              "subtree": {}
            },
            "showInLegend": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showInLegend",
                "excludes": {},
                "description": "Whether to display this particular series or series type in the\nlegend. Standalone series are shown in legend by default, and linked\nseries are not. Since v7.2.0 it is possible to show series that use\ncolorAxis by setting this option to `true`."
              },
              "subtree": {}
            },
            "showInNavigator": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showInNavigator",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "Whether or not to show the series in the navigator. Takes precedence\nover [navigator.baseSeries](#navigator.baseSeries) if defined."
              },
              "subtree": {}
            },
            "skipKeyboardNavigation": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "skipKeyboardNavigation",
                "excludes": {},
                "description": "If set to `true`, the accessibility module will skip past the points\nin this series for keyboard navigation."
              },
              "subtree": {}
            },
            "softThreshold": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "softThreshold",
                "excludes": {},
                "default": true,
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "When this is true, the series will not cause the Y axis to cross\nthe zero plane (or [threshold](#plotOptions.series.threshold) option)\nunless the data actually crosses the plane.\n\nFor example, if `softThreshold` is `false`, a series of 0, 1, 2,\n3 will make the Y axis show negative values according to the\n`minPadding` option. If `softThreshold` is `true`, the Y axis starts\nat 0."
              },
              "subtree": {}
            },
            "stacking": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "stacking",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Whether to stack the values of each series on top of each other.\nPossible values are `undefined` to disable, `\"normal\"` to stack by\nvalue or `\"percent\"`. When stacking is enabled, data must be sorted\nin ascending X order. A special stacking option is with the\nstreamgraph series type, where the stacking option is set to\n`\"stream\"`. The second one is `\"overlap\"`, which only applies to\nwaterfall series."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {},
                    "description": "Options for the hovered series. These settings override the\nnormal state options when a series is moused over or touched."
                  },
                  "subtree": {
                    "animation": {
                      "meta": {
                        "types": {
                          "boolean": 1,
                          "highcharts.animationoptionsobject": 1
                        },
                        "name": "animation",
                        "excludes": {},
                        "products": {
                          "highcharts": 1,
                          "highstock": 1
                        },
                        "description": "Animation setting for hovering the graph in line-type series."
                      },
                      "subtree": {
                        "duration": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "duration",
                            "excludes": {},
                            "default": 50,
                            "description": "The duration of the hover animation in milliseconds. By\ndefault the hover state animates quickly in, and slowly\nback to normal."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "borderColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "borderColor",
                        "excludes": {},
                        "products": {
                          "highmaps": 1
                        },
                        "description": "The border color of the point in this state."
                      },
                      "subtree": {}
                    },
                    "borderWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "borderWidth",
                        "excludes": {},
                        "products": {
                          "highmaps": 1
                        },
                        "description": "The border width of the point in this state"
                      },
                      "subtree": {}
                    },
                    "brightness": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "brightness",
                        "excludes": {},
                        "default": "0.2",
                        "products": {
                          "highmaps": 1
                        },
                        "description": "The relative brightness of the point when hovered, relative\nto the normal point color."
                      },
                      "subtree": {}
                    },
                    "color": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "color",
                        "excludes": {},
                        "products": {
                          "highmaps": 1
                        },
                        "description": "The color of the shape in this state."
                      },
                      "subtree": {}
                    },
                    "enabled": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "enabled",
                        "excludes": {},
                        "default": "true",
                        "description": "Enable separate styles for the hovered series to visualize\nthat the user hovers either the series itself or the legend."
                      },
                      "subtree": {}
                    },
                    "halo": {
                      "meta": {
                        "types": {
                          "null": 1,
                          "*": 1
                        },
                        "name": "halo",
                        "excludes": {},
                        "products": {
                          "highcharts": 1,
                          "highstock": 1
                        },
                        "description": "Options for the halo appearing around the hovered point in\nline-type series as well as outside the hovered slice in pie\ncharts. By default the halo is filled by the current point or\nseries color with an opacity of 0.25\\. The halo can be\ndisabled by setting the `halo` option to `null`.\n\nIn styled mode, the halo is styled with the\n`.highcharts-halo` class, with colors inherited from\n`.highcharts-color-{n}`."
                      },
                      "subtree": {
                        "attributes": {
                          "meta": {
                            "types": {
                              "highcharts.svgattributes": 1
                            },
                            "name": "attributes",
                            "excludes": {},
                            "products": {
                              "highcharts": 1,
                              "highstock": 1
                            },
                            "description": "A collection of SVG attributes to override the appearance\nof the halo, for example `fill`, `stroke` and\n`stroke-width`."
                          },
                          "subtree": {}
                        },
                        "opacity": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "opacity",
                            "excludes": {},
                            "default": 0.25,
                            "products": {
                              "highcharts": 1,
                              "highstock": 1
                            },
                            "description": "Opacity for the halo unless a specific fill is overridden\nusing the `attributes` setting. Note that Highcharts is\nonly able to apply opacity to colors of hex or rgb(a)\nformats."
                          },
                          "subtree": {}
                        },
                        "size": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "size",
                            "excludes": {},
                            "default": 10,
                            "products": {
                              "highcharts": 1,
                              "highstock": 1
                            },
                            "description": "The pixel size of the halo. For point markers this is the\nradius of the halo. For pie slices it is the width of the\nhalo outside the slice. For bubbles it defaults to 5 and\nis the width of the halo outside the bubble."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "products": {
                          "highcharts": 1,
                          "highstock": 1
                        },
                        "description": "Pixel width of the graph line. By default this property is\nundefined, and the `lineWidthPlus` property dictates how much\nto increase the linewidth from normal state."
                      },
                      "subtree": {}
                    },
                    "lineWidthPlus": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidthPlus",
                        "excludes": {},
                        "default": 1,
                        "products": {
                          "highcharts": 1,
                          "highstock": 1
                        },
                        "description": "The additional line width for the graph of a hovered series."
                      },
                      "subtree": {}
                    },
                    "marker": {
                      "meta": {
                        "types": {},
                        "name": "marker",
                        "excludes": {},
                        "products": {
                          "highcharts": 1,
                          "highstock": 1
                        },
                        "description": "In Highcharts 1.0, the appearance of all markers belonging\nto the hovered series. For settings on the hover state of the\nindividual point, see\n[marker.states.hover](#plotOptions.series.marker.states.hover).",
                        "extends": "plotOptions.series.marker"
                      },
                      "subtree": {}
                    }
                  }
                },
                "inactive": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "inactive",
                    "excludes": {},
                    "description": "The opposite state of a hover for series."
                  },
                  "subtree": {
                    "animation": {
                      "meta": {
                        "types": {
                          "boolean": 1,
                          "highcharts.animationoptionsobject": 1
                        },
                        "name": "animation",
                        "excludes": {},
                        "description": "The animation for entering the inactive state."
                      },
                      "subtree": {
                        "duration": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "duration",
                            "excludes": {},
                            "default": 50
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "opacity": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "opacity",
                        "excludes": {},
                        "default": 0.2,
                        "description": "Opacity of series elements (dataLabels, line, area). Set to 1\nto disable inactive state."
                      },
                      "subtree": {}
                    }
                  }
                },
                "normal": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "normal",
                    "excludes": {},
                    "description": "The normal state of a series, or for point items in column, pie\nand similar series. Currently only used for setting animation\nwhen returning to normal state from hover."
                  },
                  "subtree": {
                    "animation": {
                      "meta": {
                        "types": {
                          "boolean": 1,
                          "highcharts.animationoptionsobject": 1
                        },
                        "name": "animation",
                        "excludes": {},
                        "default": true,
                        "description": "Animation when returning to normal state after hovering."
                      },
                      "subtree": {}
                    }
                  }
                },
                "select": {
                  "meta": {
                    "types": {},
                    "name": "select",
                    "excludes": {},
                    "description": "Specific options for point in selected states, after being\nselected by\n[allowPointSelect](#plotOptions.series.allowPointSelect)\nor programmatically.",
                    "extends": "plotOptions.series.states.hover"
                  },
                  "subtree": {
                    "animation": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "animation",
                        "excludes": {}
                      },
                      "subtree": {
                        "duration": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "duration",
                            "excludes": {},
                            "default": 0
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "color": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1,
                          "highcharts.gradientcolorobject": 1,
                          "highcharts.patternobject": 1
                        },
                        "name": "color",
                        "excludes": {},
                        "default": "#cccccc",
                        "products": {
                          "highmaps": 1
                        }
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "step": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "step",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Whether to apply steps to the line. Possible values are `left`,\n`center` and `right`."
              },
              "subtree": {}
            },
            "stickyTracking": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "stickyTracking",
                "excludes": {},
                "default": true,
                "description": "Sticky tracking of mouse events. When true, the `mouseOut` event on a\nseries isn't triggered until the mouse moves over another series, or\nout of the plot area. When false, the `mouseOut` event on a series is\ntriggered when the mouse leaves the area around the series' graph or\nmarkers. This also implies the tooltip when not shared. When\n`stickyTracking` is false and `tooltip.shared` is false, the tooltip\nwill be hidden when moving the mouse between series. Defaults to true\nfor line and area type series, but to false for columns, pies etc.\n\n**Note:** The boost module will force this option because of\ntechnical limitations."
              },
              "subtree": {}
            },
            "threshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "threshold",
                "excludes": {},
                "default": "0",
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "The threshold, also called zero level or base level. For line type\nseries this is only used in conjunction with\n[negativeColor](#plotOptions.series.negativeColor)."
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {},
                "name": "tooltip",
                "excludes": {},
                "description": "A configuration object for the tooltip rendering of each single\nseries. Properties are inherited from [tooltip](#tooltip), but only\nthe following properties can be defined on a series level.",
                "extends": "tooltip"
              },
              "subtree": {}
            },
            "turboThreshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "turboThreshold",
                "excludes": {},
                "default": 1000,
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "When a series contains a data array that is longer than this, only\none dimensional arrays of numbers, or two dimensional arrays with\nx and y values are allowed. Also, only the first point is tested,\nand the rest are assumed to be the same format. This saves expensive\ndata checking and indexing in long series. Set it to `0` disable.\n\nNote:\nIn boost mode turbo threshold is forced. Only array of numbers or\ntwo dimensional arrays are allowed."
              },
              "subtree": {}
            },
            "visible": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "visible",
                "excludes": {},
                "default": "true",
                "description": "Set the initial visibility of the series."
              },
              "subtree": {}
            },
            "zIndex": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zIndex",
                "excludes": {},
                "products": {
                  "highmaps": 1
                },
                "description": "Define the z index of the series."
              },
              "subtree": {}
            },
            "zoneAxis": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "zoneAxis",
                "excludes": {},
                "default": "y",
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Defines the Axis on which the zones are applied."
              },
              "subtree": {}
            },
            "zones": {
              "meta": {
                "types": {
                  "array": "*"
                },
                "name": "zones",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "An array defining zones within a series. Zones can be applied to the\nX axis, Y axis or Z axis for bubbles, according to the `zoneAxis`\noption. The zone definitions have to be in ascending order regarding\nto the value.\n\nIn styled mode, the color zones are styled with the\n`.highcharts-zone-{n}` class, or custom classed from the `className`\noption\n([view live demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/color-zones/))."
              },
              "subtree": {
                "className": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "className",
                    "excludes": {},
                    "description": "Styled mode only. A custom class name for the zone."
                  },
                  "subtree": {}
                },
                "color": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "products": {
                      "highcharts": 1,
                      "highstock": 1
                    },
                    "description": "Defines the color of the series."
                  },
                  "subtree": {}
                },
                "dashStyle": {
                  "meta": {
                    "types": {
                      "highcharts.dashstylevalue": 1
                    },
                    "name": "dashStyle",
                    "excludes": {},
                    "products": {
                      "highcharts": 1,
                      "highstock": 1
                    },
                    "description": "A name for the dash style to use for the graph."
                  },
                  "subtree": {}
                },
                "fillColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "fillColor",
                    "excludes": {},
                    "products": {
                      "highcharts": 1,
                      "highstock": 1
                    },
                    "description": "Defines the fill color for the series (in area type series)"
                  },
                  "subtree": {}
                },
                "value": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "value",
                    "excludes": {},
                    "products": {
                      "highcharts": 1,
                      "highstock": 1
                    },
                    "description": "The value up to where the zone extends, if undefined the zones\nstretches to the last value in the series."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "sma": {
          "meta": {
            "types": {},
            "name": "sma",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Simple moving average indicator (SMA). This series requires `linkedTo`\noption to be set.\n\nIn TypeScript the [type](series.sma.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `sma` series are defined in\n   [plotOptions.sma](plotOptions.sma).\n3. Options for one single series are given in\n   [the series instance array](series.sma).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        sma: {\n            // shared options for all sma series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'sma'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.line"
          },
          "subtree": {
            "compareToMain": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "compareToMain",
                "excludes": {},
                "default": false,
                "description": "Whether to compare indicator to the main series values\nor indicator values."
              },
              "subtree": {}
            },
            "linkedTo": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "linkedTo",
                "excludes": {},
                "description": "The main series ID that indicator will be based on. Required for this\nindicator."
              },
              "subtree": {}
            },
            "name": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "name",
                "excludes": {},
                "description": "The name of the series as shown in the legend, tooltip etc. If not\nset, it will be based on a technical indicator type and default\nparams."
              },
              "subtree": {}
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {},
                "description": "Paramters used in calculation of regression series' points."
              },
              "subtree": {
                "index": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "index",
                    "excludes": {},
                    "default": 0,
                    "description": "The point index which indicator calculations will base. For\nexample using OHLC data, index=2 means the indicator will be\ncalculated using Low values."
                  },
                  "subtree": {}
                },
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 14,
                    "description": "The base period for indicator calculations. This is the number of\ndata points which are taken into account for the indicator\ncalculations."
                  },
                  "subtree": {}
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "valueDecimals": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "valueDecimals",
                    "excludes": {},
                    "default": 4,
                    "description": "Number of decimals in indicator series."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "solidgauge": {
          "meta": {
            "types": {},
            "name": "solidgauge",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A solid gauge is a circular gauge where the value is indicated by a filled\narc, and the color of the arc may variate with the value.\n\nIn TypeScript the [type](series.solidgauge.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `solidgauge` series are defined in\n   [plotOptions.solidgauge](plotOptions.solidgauge).\n3. Options for one single series are given in\n   [the series instance array](series.solidgauge).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        solidgauge: {\n            // shared options for all solidgauge series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'solidgauge'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.gauge"
          },
          "subtree": {
            "colorByPoint": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "colorByPoint",
                "excludes": {},
                "default": true,
                "description": "Whether to give each point an individual color."
              },
              "subtree": {}
            },
            "innerRadius": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "innerRadius",
                "excludes": {},
                "default": "60",
                "products": {
                  "highcharts": 1
                },
                "description": "The inner radius for points in a solid gauge. Can be given as a number\n(pixels) or percentage string."
              },
              "subtree": {}
            },
            "linecap": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "linecap",
                "excludes": {},
                "default": "round",
                "products": {
                  "highcharts": 1
                },
                "description": "Whether the strokes of the solid gauge should be `round` or `square`."
              },
              "subtree": {}
            },
            "overshoot": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "overshoot",
                "excludes": {},
                "default": "0",
                "products": {
                  "highcharts": 1
                },
                "description": "Allow the gauge to overshoot the end of the perimeter axis by this\nmany degrees. Say if the gauge axis goes from 0 to 60, a value of\n100, or 1000, will show 5 degrees beyond the end of the axis when this\noption is set to 5."
              },
              "subtree": {}
            },
            "radius": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "radius",
                "excludes": {},
                "default": "100",
                "products": {
                  "highcharts": 1
                },
                "description": "The outer radius for points in a solid gauge. Can be given as a number\n(pixels) or percentage string."
              },
              "subtree": {}
            },
            "rounded": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "rounded",
                "excludes": {},
                "default": "false",
                "products": {
                  "highcharts": 1
                },
                "description": "Wether to draw rounded edges on the gauge."
              },
              "subtree": {}
            },
            "threshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "threshold",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "The threshold or base level for the gauge."
              },
              "subtree": {}
            }
          }
        },
        "spline": {
          "meta": {
            "types": {},
            "name": "spline",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "A spline series is a special type of line series, where the segments\nbetween the data points are smoothed.\n\nIn TypeScript the [type](series.spline.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `spline` series are defined in\n   [plotOptions.spline](plotOptions.spline).\n3. Options for one single series are given in\n   [the series instance array](series.spline).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        spline: {\n            // shared options for all spline series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'spline'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.series"
          },
          "subtree": {}
        },
        "stochastic": {
          "meta": {
            "types": {},
            "name": "stochastic",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Stochastic oscillator. This series requires the `linkedTo` option to be\nset and should be loaded after the `stock/indicators/indicators.js` file.\n\nIn TypeScript the [type](series.stochastic.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `stochastic` series are defined in\n   [plotOptions.stochastic](plotOptions.stochastic).\n3. Options for one single series are given in\n   [the series instance array](series.stochastic).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        stochastic: {\n            // shared options for all stochastic series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'stochastic'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "averages"
                  },
                  "subtree": {}
                }
              }
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "periods": {
                  "meta": {
                    "types": {
                      "array": "number, number"
                    },
                    "name": "periods",
                    "excludes": {},
                    "default": "[14, 3]",
                    "description": "Periods for Stochastic oscillator: [%K, %D]."
                  },
                  "subtree": {}
                }
              }
            },
            "smoothedLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "smoothedLine",
                "excludes": {},
                "description": "Smoothed line options."
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {},
                    "description": "Styles for a smoothed line."
                  },
                  "subtree": {
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "description": "Color of the line. If not set, it's inherited from\n[plotOptions.stochastic.color](#plotOptions.stochastic.color)."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span><b> {series.name}</b><br/>%K: {point.y}<br/>%D: {point.smoothed}<br/>"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "streamgraph": {
          "meta": {
            "types": {},
            "name": "streamgraph",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "A streamgraph is a type of stacked area graph which is displaced around a\ncentral axis, resulting in a flowing, organic shape.\n\nIn TypeScript the [type](series.streamgraph.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `streamgraph` series are defined in\n   [plotOptions.streamgraph](plotOptions.streamgraph).\n3. Options for one single series are given in\n   [the series instance array](series.streamgraph).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        streamgraph: {\n            // shared options for all streamgraph series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'streamgraph'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.areaspline"
          },
          "subtree": {
            "fillOpacity": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "fillOpacity",
                "excludes": {},
                "default": 1
              },
              "subtree": {}
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "stacking": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "stacking",
                "excludes": {},
                "default": "stream"
              },
              "subtree": {}
            }
          }
        },
        "sunburst": {
          "meta": {
            "types": {},
            "name": "sunburst",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A Sunburst displays hierarchical data, where a level in the hierarchy is\nrepresented by a circle. The center represents the root node of the tree.\nThe visualization bears a resemblance to both treemap and pie charts.\n\nIn TypeScript the [type](series.sunburst.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `sunburst` series are defined in\n   [plotOptions.sunburst](plotOptions.sunburst).\n3. Options for one single series are given in\n   [the series instance array](series.sunburst).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        sunburst: {\n            // shared options for all sunburst series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'sunburst'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.pie"
          },
          "subtree": {
            "allowDrillToNode": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "allowDrillToNode",
                "excludes": {},
                "default": "false",
                "products": {
                  "highcharts": 1
                },
                "description": "When enabled the user can click on a point which is a parent and\nzoom in on its children. Deprecated and replaced by\n[allowTraversingTree](#plotOptions.sunburst.allowTraversingTree)."
              },
              "subtree": {}
            },
            "allowTraversingTree": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "allowTraversingTree",
                "excludes": {},
                "default": "false",
                "products": {
                  "highcharts": 1
                },
                "description": "When enabled the user can click on a point which is a parent and\nzoom in on its children."
              },
              "subtree": {}
            },
            "center": {
              "meta": {
                "types": {
                  "array": "(number|string)"
                },
                "name": "center",
                "excludes": {},
                "default": "[\"50%\", \"50%\"]",
                "products": {
                  "highcharts": 1
                },
                "description": "The center of the sunburst chart relative to the plot area. Can be\npercentages or pixel values."
              },
              "subtree": {}
            },
            "colorByPoint": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "colorByPoint",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {},
                "extends": "plotOptions.series.dataLabels"
              },
              "subtree": {
                "allowOverlap": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "allowOverlap",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "defer": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "defer",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "rotationMode": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "rotationMode",
                    "excludes": {},
                    "default": "auto",
                    "description": "Decides how the data label will be rotated relative to the perimeter\nof the sunburst. Valid values are `auto`, `parallel` and\n`perpendicular`. When `auto`, the best fit will be computed for the\npoint.\n\nThe `series.rotation` option takes precedence over `rotationMode`."
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "object": 1
                    },
                    "name": "style",
                    "excludes": {}
                  },
                  "subtree": {
                    "textOverflow": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "textOverflow",
                        "excludes": {},
                        "default": "ellipsis"
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "levelIsConstant": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "levelIsConstant",
                "excludes": {},
                "default": true,
                "description": "Used together with the levels and `allowDrillToNode` options. When\nset to false the first level visible when drilling is considered\nto be level one. Otherwise the level will be the same as the tree\nstructure."
              },
              "subtree": {}
            },
            "levelSize": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "levelSize",
                "excludes": {},
                "description": "Determines the width of the ring per level."
              },
              "subtree": {
                "unit": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "unit",
                    "excludes": {},
                    "default": "weight",
                    "description": "How to interpret `levelSize.value`.\n\n- `percentage` gives a width relative to result of outer radius minus\n  inner radius.\n\n- `pixels` gives the ring a fixed width in pixels.\n\n- `weight` takes the remaining width after percentage and pixels, and\n  distributes it accross all \"weighted\" levels. The value relative to\n  the sum of all weights determines the width."
                  },
                  "subtree": {}
                },
                "value": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "value",
                    "excludes": {},
                    "default": 1,
                    "description": "The value used for calculating the width of the ring. Its' affect is\ndetermined by `levelSize.unit`."
                  },
                  "subtree": {}
                }
              }
            },
            "levels": {
              "meta": {
                "types": {
                  "array": "*"
                },
                "name": "levels",
                "excludes": {},
                "description": "Set options on specific levels. Takes precedence over series options,\nbut not point options."
              },
              "subtree": {
                "borderColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1
                    },
                    "name": "borderColor",
                    "excludes": {},
                    "description": "Can set a `borderColor` on all points which lies on the same level."
                  },
                  "subtree": {}
                },
                "borderDashStyle": {
                  "meta": {
                    "types": {
                      "highcharts.dashstylevalue": 1
                    },
                    "name": "borderDashStyle",
                    "excludes": {},
                    "description": "Can set a `borderDashStyle` on all points which lies on the same level."
                  },
                  "subtree": {}
                },
                "borderWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderWidth",
                    "excludes": {},
                    "description": "Can set a `borderWidth` on all points which lies on the same level."
                  },
                  "subtree": {}
                },
                "color": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "description": "Can set a `color` on all points which lies on the same level."
                  },
                  "subtree": {}
                },
                "colorVariation": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "colorVariation",
                    "excludes": {},
                    "description": "Can set a `colorVariation` on all points which lies on the same level."
                  },
                  "subtree": {
                    "key": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "key",
                        "excludes": {},
                        "description": "The key of a color variation. Currently supports `brightness` only."
                      },
                      "subtree": {}
                    },
                    "to": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "to",
                        "excludes": {},
                        "description": "The ending value of a color variation. The last sibling will receive this\nvalue."
                      },
                      "subtree": {}
                    }
                  }
                },
                "levelSize": {
                  "meta": {
                    "types": {
                      "object": 1
                    },
                    "name": "levelSize",
                    "excludes": {},
                    "description": "Can set a `levelSize` on all points which lies on the same level."
                  },
                  "subtree": {}
                },
                "rotation": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "rotation",
                    "excludes": {},
                    "description": "Can set a `rotation` on all points which lies on the same level."
                  },
                  "subtree": {}
                },
                "rotationMode": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "rotationMode",
                    "excludes": {},
                    "description": "Can set a `rotationMode` on all points which lies on the same level."
                  },
                  "subtree": {}
                }
              }
            },
            "rootId": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "rootId",
                "excludes": {},
                "description": "Which point to use as a root in the visualization."
              },
              "subtree": {}
            },
            "slicedOffset": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "slicedOffset",
                "excludes": {},
                "default": 10,
                "description": "If a point is sliced, moved out from the center, how many pixels\nshould it be moved?."
              },
              "subtree": {}
            },
            "traverseUpButton": {
              "meta": {
                "types": {},
                "name": "traverseUpButton",
                "excludes": {},
                "description": "Options for the button appearing when traversing down in a treemap.",
                "extends": "plotOptions.treemap.traverseUpButton"
              },
              "subtree": {}
            }
          }
        },
        "supertrend": {
          "meta": {
            "types": {},
            "name": "supertrend",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Supertrend indicator. This series requires the `linkedTo` option to be\nset and should be loaded after the `stock/indicators/indicators.js` and\n`stock/indicators/sma.js`.\n\nIn TypeScript the [type](series.supertrend.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `supertrend` series are defined in\n   [plotOptions.supertrend](plotOptions.supertrend).\n3. Options for one single series are given in\n   [the series instance array](series.supertrend).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        supertrend: {\n            // shared options for all supertrend series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'supertrend'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "changeTrendLine": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "changeTrendLine",
                "excludes": {},
                "description": "The styles for the Supertrend line that intersect main series."
              },
              "subtree": {
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "dashStyle": {
                      "meta": {
                        "types": {
                          "highcharts.dashstylevalue": 1
                        },
                        "name": "dashStyle",
                        "excludes": {},
                        "default": "LongDash",
                        "description": "The dash or dot style of the grid lines. For possible\nvalues, see\n[this demonstration](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/)."
                      },
                      "subtree": {}
                    },
                    "lineColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "lineColor",
                        "excludes": {},
                        "default": "#333333",
                        "description": "Color of the line."
                      },
                      "subtree": {}
                    },
                    "lineWidth": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidth",
                        "excludes": {},
                        "default": 1,
                        "description": "Pixel width of the line."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "fallingTrendColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "fallingTrendColor",
                "excludes": {},
                "default": "#F21313",
                "description": "Color of the Supertrend series line that is above the main series."
              },
              "subtree": {}
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {},
                "description": "Paramters used in calculation of Supertrend indicator series points."
              },
              "subtree": {
                "multiplier": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "multiplier",
                    "excludes": {},
                    "default": 3,
                    "description": "Multiplier for Supertrend Indicator."
                  },
                  "subtree": {}
                },
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 10,
                    "description": "The base period for indicator Supertrend Indicator calculations.\nThis is the number of data points which are taken into account\nfor the indicator calculations."
                  },
                  "subtree": {}
                }
              }
            },
            "risingTrendColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "risingTrendColor",
                "excludes": {},
                "default": "#06B535",
                "description": "Color of the Supertrend series line that is beneath the main series."
              },
              "subtree": {}
            }
          }
        },
        "tema": {
          "meta": {
            "types": {},
            "name": "tema",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Triple exponential moving average (TEMA) indicator. This series requires\n`linkedTo` option to be set and should be loaded after the\n`stock/indicators/indicators.js` and `stock/indicators/ema.js`.\n\nIn TypeScript the [type](series.tema.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `tema` series are defined in\n   [plotOptions.tema](plotOptions.tema).\n3. Options for one single series are given in\n   [the series instance array](series.tema).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        tema: {\n            // shared options for all tema series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'tema'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.ema"
          },
          "subtree": {}
        },
        "tilemap": {
          "meta": {
            "types": {},
            "name": "tilemap",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highmaps": 1
            },
            "description": "A tilemap series is a type of heatmap where the tile shapes are\nconfigurable.\n\nIn TypeScript the [type](series.tilemap.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `tilemap` series are defined in\n   [plotOptions.tilemap](plotOptions.tilemap).\n3. Options for one single series are given in\n   [the series instance array](series.tilemap).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        tilemap: {\n            // shared options for all tilemap series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'tilemap'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.heatmap"
          },
          "subtree": {
            "colsize": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "colsize",
                "excludes": {},
                "default": "1",
                "products": {
                  "highcharts": 1,
                  "highmaps": 1
                },
                "description": "The column size - how many X axis units each column in the tilemap\nshould span. Works as in [Heatmaps](#plotOptions.heatmap.colsize)."
              },
              "subtree": {}
            },
            "pointPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointPadding",
                "excludes": {},
                "default": 2,
                "description": "The padding between points in the tilemap."
              },
              "subtree": {}
            },
            "rowsize": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "rowsize",
                "excludes": {},
                "default": "1",
                "products": {
                  "highcharts": 1,
                  "highmaps": 1
                },
                "description": "The row size - how many Y axis units each tilemap row should span.\nAnalogous to [colsize](#plotOptions.tilemap.colsize)."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {
                    "halo": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "halo",
                        "excludes": {}
                      },
                      "subtree": {
                        "attributes": {
                          "meta": {
                            "types": {
                              "*": 1
                            },
                            "name": "attributes",
                            "excludes": {}
                          },
                          "subtree": {
                            "zIndex": {
                              "meta": {
                                "types": {
                                  "number": 1
                                },
                                "name": "zIndex",
                                "excludes": {},
                                "default": 3
                              },
                              "subtree": {}
                            }
                          }
                        },
                        "enabled": {
                          "meta": {
                            "types": {
                              "boolean": 1
                            },
                            "name": "enabled",
                            "excludes": {},
                            "default": true
                          },
                          "subtree": {}
                        },
                        "opacity": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "opacity",
                            "excludes": {},
                            "default": 0.5
                          },
                          "subtree": {}
                        },
                        "size": {
                          "meta": {
                            "types": {
                              "number": 1
                            },
                            "name": "size",
                            "excludes": {},
                            "default": 2
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                }
              }
            },
            "tileShape": {
              "meta": {
                "types": {
                  "highcharts.tilemapshapevalue": 1
                },
                "name": "tileShape",
                "excludes": {},
                "default": "hexagon",
                "description": "The shape of the tiles in the tilemap. Possible values are `hexagon`,\n`circle`, `diamond`, and `square`."
              },
              "subtree": {}
            }
          }
        },
        "timeline": {
          "meta": {
            "types": {},
            "name": "timeline",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "The timeline series presents given events along a drawn line.\n\nIn TypeScript the [type](series.timeline.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `timeline` series are defined in\n   [plotOptions.timeline](plotOptions.timeline).\n3. Options for one single series are given in\n   [the series instance array](series.timeline).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        timeline: {\n            // shared options for all timeline series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'timeline'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.line"
          },
          "subtree": {
            "colorByPoint": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "colorByPoint",
                "excludes": {},
                "default": true
              },
              "subtree": {}
            },
            "colorKey": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "colorKey",
                "excludes": {},
                "default": "x"
              },
              "subtree": {}
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1,
                  "highcharts.timelinedatalabelsoptionsobject": 1,
                  "array": "Highcharts.TimelineDataLabelsOptionsObject"
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "allowOverlap": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "allowOverlap",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "alternate": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "alternate",
                    "excludes": {},
                    "default": true,
                    "description": "Whether to position data labels alternately. For example, if\n[distance](#plotOptions.timeline.dataLabels.distance) is set\nequal to `100`, then data labels will be positioned alternately\n(on both sides of the point) at a distance of 100px."
                  },
                  "subtree": {}
                },
                "backgroundColor": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "backgroundColor",
                    "excludes": {},
                    "default": "#ffffff"
                  },
                  "subtree": {}
                },
                "borderColor": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "borderColor",
                    "excludes": {},
                    "default": "#999999"
                  },
                  "subtree": {}
                },
                "borderRadius": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderRadius",
                    "excludes": {},
                    "default": 3
                  },
                  "subtree": {}
                },
                "borderWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderWidth",
                    "excludes": {},
                    "default": 1
                  },
                  "subtree": {}
                },
                "color": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "default": "#333333"
                  },
                  "subtree": {}
                },
                "connectorColor": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "connectorColor",
                    "excludes": {},
                    "description": "The color of the line connecting the data label to the point.\nThe default color is the same as the point's color.\n\nIn styled mode, the connector stroke is given in the\n`.highcharts-data-label-connector` class."
                  },
                  "subtree": {}
                },
                "connectorWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "connectorWidth",
                    "excludes": {},
                    "default": 1,
                    "description": "The width of the line connecting the data label to the point.\n\n\nIn styled mode, the connector stroke width is given in the\n`.highcharts-data-label-connector` class."
                  },
                  "subtree": {}
                },
                "distance": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "distance",
                    "excludes": {},
                    "default": 100,
                    "description": "A pixel value defining the distance between the data label\nand the point. Negative numbers puts the label on top\nof the point."
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "formatter": {
                  "meta": {
                    "types": {
                      "highcharts.formattercallbackfunction.<object>": 1
                    },
                    "name": "formatter",
                    "excludes": {},
                    "default": "function () {\n\n var format;\n\n if (!this.series.chart.styledMode) {\n      format = '<span style=\"color:' + this.point.color +\n          '\">● </span>';\n  } else {\n      format = '<span>● </span>';\n  }\n  format += '<span>' + (this.key || '') + '</span><br/>' +\n      (this.point.label || '');\n  return format;\n}"
                  },
                  "subtree": {}
                },
                "shadow": {
                  "meta": {
                    "types": {
                      "boolean": 1,
                      "highcharts.cssobject": 1
                    },
                    "name": "shadow",
                    "excludes": {},
                    "default": false,
                    "description": "Shadow options for the data label."
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "style",
                    "excludes": {}
                  },
                  "subtree": {
                    "fontSize": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "fontSize",
                        "excludes": {},
                        "default": "12px"
                      },
                      "subtree": {}
                    },
                    "fontWeight": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "fontWeight",
                        "excludes": {},
                        "default": "normal"
                      },
                      "subtree": {}
                    },
                    "textOutline": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "textOutline",
                        "excludes": {},
                        "default": "none"
                      },
                      "subtree": {}
                    }
                  }
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "middle"
                  },
                  "subtree": {}
                }
              }
            },
            "ignoreHiddenPoint": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "ignoreHiddenPoint",
                "excludes": {},
                "default": true
              },
              "subtree": {}
            },
            "legendType": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "legendType",
                "excludes": {},
                "default": "point"
              },
              "subtree": {}
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 4
              },
              "subtree": {}
            },
            "marker": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "marker",
                "excludes": {}
              },
              "subtree": {
                "enabledThreshold": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "enabledThreshold",
                    "excludes": {},
                    "default": 0
                  },
                  "subtree": {}
                },
                "height": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "height",
                    "excludes": {},
                    "default": 15
                  },
                  "subtree": {}
                },
                "lineWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "lineWidth",
                    "excludes": {},
                    "default": 2
                  },
                  "subtree": {}
                },
                "radius": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "radius",
                    "excludes": {},
                    "default": 6
                  },
                  "subtree": {}
                },
                "symbol": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "symbol",
                    "excludes": {},
                    "default": "square"
                  },
                  "subtree": {}
                }
              }
            },
            "showInLegend": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showInLegend",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineWidthPlus": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidthPlus",
                        "excludes": {},
                        "default": 0
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "stickyTracking": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "stickyTracking",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "headerFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "headerFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span> <span style=\"font-size: 10px\"> {point.key}</span><br/>"
                  },
                  "subtree": {}
                },
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "{point.description}"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "treemap": {
          "meta": {
            "types": {},
            "name": "treemap",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A treemap displays hierarchical data using nested rectangles. The data\ncan be laid out in varying ways depending on options.\n\nIn TypeScript the [type](series.treemap.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `treemap` series are defined in\n   [plotOptions.treemap](plotOptions.treemap).\n3. Options for one single series are given in\n   [the series instance array](series.treemap).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        treemap: {\n            // shared options for all treemap series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'treemap'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.scatter"
          },
          "subtree": {
            "allowDrillToNode": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "allowDrillToNode",
                "excludes": {},
                "default": "false",
                "products": {
                  "highcharts": 1
                },
                "description": "When enabled the user can click on a point which is a parent and\nzoom in on its children. Deprecated and replaced by\n[allowTraversingTree](#plotOptions.treemap.allowTraversingTree)."
              },
              "subtree": {}
            },
            "allowTraversingTree": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "allowTraversingTree",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1
                },
                "description": "When enabled the user can click on a point which is a parent and\nzoom in on its children."
              },
              "subtree": {}
            },
            "alternateStartingDirection": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "alternateStartingDirection",
                "excludes": {},
                "default": false,
                "description": "Enabling this option will make the treemap alternate the drawing\ndirection between vertical and horizontal. The next levels starting\ndirection will always be the opposite of the previous."
              },
              "subtree": {}
            },
            "animationLimit": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "animationLimit",
                "excludes": {},
                "default": 250
              },
              "subtree": {}
            },
            "borderColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "borderColor",
                "excludes": {},
                "default": "#e6e6e6",
                "description": "The color of the border surrounding each tree map item."
              },
              "subtree": {}
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": 1,
                "description": "The width of the border surrounding each tree map item."
              },
              "subtree": {}
            },
            "colorByPoint": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "colorByPoint",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1
                },
                "description": "When using automatic point colors pulled from the `options.colors`\ncollection, this option determines whether the chart should receive\none color per series or one color per point."
              },
              "subtree": {}
            },
            "colorKey": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "colorKey",
                "excludes": {},
                "default": "colorValue"
              },
              "subtree": {}
            },
            "colors": {
              "meta": {
                "types": {
                  "array": "(Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject)"
                },
                "name": "colors",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "A series specific or series type specific color set to apply instead\nof the global [colors](#colors) when\n[colorByPoint](#plotOptions.treemap.colorByPoint) is true."
              },
              "subtree": {}
            },
            "cropThreshold": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "cropThreshold",
                "excludes": {},
                "default": "300",
                "products": {
                  "highcharts": 1
                },
                "description": "When the series contains less points than the crop threshold, all\npoints are drawn, event if the points fall outside the visible plot\narea at the current zoom. The advantage of drawing all points\n(including markers and columns), is that animation is performed on\nupdates. On the other hand, when the series contains more points than\nthe crop threshold, the series data is cropped to only contain points\nthat fall within the plot area. The advantage of cropping away\ninvisible points is to increase performance on large series."
              },
              "subtree": {}
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "extends": "plotOptions.heatmap.dataLabels"
              },
              "subtree": {
                "defer": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "defer",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "formatter": {
                  "meta": {
                    "types": {},
                    "name": "formatter",
                    "excludes": {}
                  },
                  "subtree": {}
                },
                "inside": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "inside",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "middle"
                  },
                  "subtree": {}
                }
              }
            },
            "drillUpButton": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "drillUpButton",
                "excludes": {},
                "description": "Options for the button appearing when drilling down in a treemap.\nDeprecated and replaced by\n[traverseUpButton](#plotOptions.treemap.traverseUpButton)."
              },
              "subtree": {
                "position": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "position",
                    "excludes": {},
                    "description": "The position of the button."
                  },
                  "subtree": {
                    "align": {
                      "meta": {
                        "types": {
                          "highcharts.alignvalue": 1
                        },
                        "name": "align",
                        "excludes": {},
                        "default": "right",
                        "description": "Horizontal alignment of the button."
                      },
                      "subtree": {}
                    },
                    "verticalAlign": {
                      "meta": {
                        "types": {
                          "highcharts.verticalalignvalue": 1
                        },
                        "name": "verticalAlign",
                        "excludes": {},
                        "default": "top",
                        "products": {
                          "highcharts": 1
                        },
                        "description": "Vertical alignment of the button."
                      },
                      "subtree": {}
                    },
                    "x": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "x",
                        "excludes": {},
                        "default": -10,
                        "description": "Horizontal offset of the button."
                      },
                      "subtree": {}
                    },
                    "y": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "y",
                        "excludes": {},
                        "default": 10,
                        "description": "Vertical offset of the button."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "events": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "events",
                "excludes": {}
              },
              "subtree": {
                "setRootNode": {
                  "meta": {
                    "types": {
                      "function": 1
                    },
                    "name": "setRootNode",
                    "excludes": {},
                    "default": "undefined",
                    "products": {
                      "highcharts": 1
                    },
                    "description": "Fires on a request for change of root node for the tree, before the\nupdate is made. An event object is passed to the function, containing\nadditional properties `newRootId`, `previousRootId`, `redraw` and\n`trigger`."
                  },
                  "subtree": {}
                }
              }
            },
            "ignoreHiddenPoint": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "ignoreHiddenPoint",
                "excludes": {},
                "default": true,
                "description": "Whether to ignore hidden points when the layout algorithm runs.\nIf `false`, hidden points will leave open spaces."
              },
              "subtree": {}
            },
            "interactByLeaf": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "interactByLeaf",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "This option decides if the user can interact with the parent nodes\nor just the leaf nodes. When this option is undefined, it will be\ntrue by default. However when allowTraversingTree is true, then it\nwill be false by default."
              },
              "subtree": {}
            },
            "layoutAlgorithm": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "layoutAlgorithm",
                "excludes": {},
                "default": "sliceAndDice",
                "description": "This option decides which algorithm is used for setting position\nand dimensions of the points."
              },
              "subtree": {}
            },
            "layoutStartingDirection": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "layoutStartingDirection",
                "excludes": {},
                "default": "vertical",
                "description": "Defines which direction the layout algorithm will start drawing."
              },
              "subtree": {}
            },
            "levelIsConstant": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "levelIsConstant",
                "excludes": {},
                "default": true,
                "description": "Used together with the levels and allowTraversingTree options. When\nset to false the first level visible to be level one, which is\ndynamic when traversing the tree. Otherwise the level will be the\nsame as the tree structure."
              },
              "subtree": {}
            },
            "levels": {
              "meta": {
                "types": {
                  "array": "*"
                },
                "name": "levels",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "Set options on specific levels. Takes precedence over series options,\nbut not point options."
              },
              "subtree": {
                "borderColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1
                    },
                    "name": "borderColor",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "description": "Can set a `borderColor` on all points which lies on the same level."
                  },
                  "subtree": {}
                },
                "borderDashStyle": {
                  "meta": {
                    "types": {
                      "highcharts.dashstylevalue": 1
                    },
                    "name": "borderDashStyle",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "description": "Set the dash style of the border of all the point which lies on the\nlevel. See <a href\"#plotoptions.scatter.dashstyle\">\nplotOptions.scatter.dashStyle</a> for possible options."
                  },
                  "subtree": {}
                },
                "borderWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderWidth",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "description": "Can set the borderWidth on all points which lies on the same level."
                  },
                  "subtree": {}
                },
                "color": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "description": "Can set a color on all points which lies on the same level."
                  },
                  "subtree": {}
                },
                "colorVariation": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "colorVariation",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "description": "A configuration object to define how the color of a child varies from\nthe parent's color. The variation is distributed among the children\nof node. For example when setting brightness, the brightness change\nwill range from the parent's original brightness on the first child,\nto the amount set in the `to` setting on the last node. This allows a\ngradient-like color scheme that sets children out from each other\nwhile highlighting the grouping on treemaps and sectors on sunburst\ncharts."
                  },
                  "subtree": {
                    "key": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "key",
                        "excludes": {},
                        "products": {
                          "highcharts": 1
                        },
                        "description": "The key of a color variation. Currently supports `brightness` only."
                      },
                      "subtree": {}
                    },
                    "to": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "to",
                        "excludes": {},
                        "products": {
                          "highcharts": 1
                        },
                        "description": "The ending value of a color variation. The last sibling will receive\nthis value."
                      },
                      "subtree": {}
                    }
                  }
                },
                "layoutAlgorithm": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "layoutAlgorithm",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "description": "Can set the layoutAlgorithm option on a specific level."
                  },
                  "subtree": {}
                },
                "layoutStartingDirection": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "layoutStartingDirection",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "description": "Can set the layoutStartingDirection option on a specific level."
                  },
                  "subtree": {}
                },
                "level": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "level",
                    "excludes": {},
                    "products": {
                      "highcharts": 1
                    },
                    "description": "Decides which level takes effect from the options set in the levels\nobject."
                  },
                  "subtree": {}
                }
              }
            },
            "opacity": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "opacity",
                "excludes": {},
                "default": 0.15,
                "description": "The opacity of a point in treemap. When a point has children, the\nvisibility of the children is determined by the opacity."
              },
              "subtree": {}
            },
            "showInLegend": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showInLegend",
                "excludes": {},
                "default": false,
                "description": "Whether to display this series type or specific series item in the\nlegend."
              },
              "subtree": {}
            },
            "sortIndex": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "sortIndex",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "The sort index of the point inside the treemap level."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {},
                "name": "states",
                "excludes": {},
                "description": "A wrapper object for all the series options in specific states.",
                "extends": "plotOptions.heatmap.states"
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {},
                    "name": "hover",
                    "excludes": {},
                    "description": "Options for the hovered series",
                    "extends": "plotOptions.heatmap.states.hover"
                  },
                  "subtree": {
                    "borderColor": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "borderColor",
                        "excludes": {},
                        "default": "#999999",
                        "description": "The border color for the hovered state."
                      },
                      "subtree": {}
                    },
                    "brightness": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "brightness",
                        "excludes": {},
                        "default": "undefined",
                        "description": "Brightness for the hovered point. Defaults to 0 if the\nheatmap series is loaded first, otherwise 0.1."
                      },
                      "subtree": {}
                    },
                    "halo": {
                      "meta": {
                        "types": {},
                        "name": "halo",
                        "excludes": {},
                        "default": false,
                        "extends": "plotOptions.heatmap.states.hover.halo"
                      },
                      "subtree": {}
                    },
                    "opacity": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "opacity",
                        "excludes": {},
                        "default": 0.75,
                        "description": "The opacity of a point in treemap. When a point has children,\nthe visibility of the children is determined by the opacity."
                      },
                      "subtree": {}
                    },
                    "shadow": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "shadow",
                        "excludes": {},
                        "default": false,
                        "description": "The shadow option for hovered state."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "headerFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "headerFormat",
                    "excludes": {},
                    "default": ""
                  },
                  "subtree": {}
                },
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<b>{point.name}</b>: {point.value}<br/>"
                  },
                  "subtree": {}
                }
              }
            },
            "traverseUpButton": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "traverseUpButton",
                "excludes": {},
                "description": "Options for the button appearing when traversing down in a treemap."
              },
              "subtree": {
                "position": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "position",
                    "excludes": {},
                    "description": "The position of the button."
                  },
                  "subtree": {
                    "align": {
                      "meta": {
                        "types": {
                          "highcharts.alignvalue": 1
                        },
                        "name": "align",
                        "excludes": {},
                        "default": "right",
                        "description": "Horizontal alignment of the button."
                      },
                      "subtree": {}
                    },
                    "verticalAlign": {
                      "meta": {
                        "types": {
                          "highcharts.verticalalignvalue": 1
                        },
                        "name": "verticalAlign",
                        "excludes": {},
                        "default": "top",
                        "products": {
                          "highcharts": 1
                        },
                        "description": "Vertical alignment of the button."
                      },
                      "subtree": {}
                    },
                    "x": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "x",
                        "excludes": {},
                        "default": -10,
                        "description": "Horizontal offset of the button."
                      },
                      "subtree": {}
                    },
                    "y": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "y",
                        "excludes": {},
                        "default": 10,
                        "description": "Vertical offset of the button."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            }
          }
        },
        "trendline": {
          "meta": {
            "types": {},
            "name": "trendline",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Trendline (linear regression) fits a straight line to the selected data\nusing a method called the Sum Of Least Squares. This series requires the\n`linkedTo` option to be set.\n\nIn TypeScript the [type](series.trendline.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `trendline` series are defined in\n   [plotOptions.trendline](plotOptions.trendline).\n3. Options for one single series are given in\n   [the series instance array](series.trendline).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        trendline: {\n            // shared options for all trendline series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'trendline'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "index": {
                  "meta": {
                    "types": {
                      "number": 1,
                      "string": 1
                    },
                    "name": "index",
                    "excludes": {},
                    "default": "3",
                    "description": "The point index which indicator calculations will base. For\nexample using OHLC data, index=2 means the indicator will be\ncalculated using Low values."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "trix": {
          "meta": {
            "types": {},
            "name": "trix",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Triple exponential average (TRIX) oscillator. This series requires\n`linkedTo` option to be set.\n\nRequires https://code.highcharts.com/stock/indicators/ema.js\nand https://code.highcharts.com/stock/indicators/tema.js.\n\nIn TypeScript the [type](series.trix.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `trix` series are defined in\n   [plotOptions.trix](plotOptions.trix).\n3. Options for one single series are given in\n   [the series instance array](series.trix).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        trix: {\n            // shared options for all trix series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'trix'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.tema"
          },
          "subtree": {}
        },
        "variablepie": {
          "meta": {
            "types": {},
            "name": "variablepie",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A variable pie series is a two dimensional series type, where each point\nrenders an Y and Z value.  Each point is drawn as a pie slice where the\nsize (arc) of the slice relates to the Y value and the radius of pie\nslice relates to the Z value.\n\nIn TypeScript the [type](series.variablepie.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `variablepie` series are defined in\n   [plotOptions.variablepie](plotOptions.variablepie).\n3. Options for one single series are given in\n   [the series instance array](series.variablepie).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        variablepie: {\n            // shared options for all variablepie series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'variablepie'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.pie"
          },
          "subtree": {
            "maxPointSize": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "maxPointSize",
                "excludes": {},
                "default": "100%",
                "description": "The maximum size of the points' radius related to chart's `plotArea`.\nIf a number is set, it applies in pixels."
              },
              "subtree": {}
            },
            "minPointSize": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "minPointSize",
                "excludes": {},
                "default": "10%",
                "description": "The minimum size of the points' radius related to chart's `plotArea`.\nIf a number is set, it applies in pixels."
              },
              "subtree": {}
            },
            "sizeBy": {
              "meta": {
                "types": {
                  "highcharts.variablepiesizebyvalue": 1
                },
                "name": "sizeBy",
                "excludes": {},
                "default": "area",
                "description": "Whether the pie slice's value should be represented by the area or\nthe radius of the slice. Can be either `area` or `radius`. The\ndefault, `area`, corresponds best to the human perception of the size\nof each pie slice."
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span> {series.name}<br/>Value: {point.y}<br/>Size: {point.z}<br/>"
                  },
                  "subtree": {}
                }
              }
            },
            "zMax": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zMax",
                "excludes": {},
                "description": "The maximum possible z value for the point's radius calculation. If\nthe point's Z value is bigger than zMax, the slice will be drawn\naccording to the zMax value"
              },
              "subtree": {}
            },
            "zMin": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zMin",
                "excludes": {},
                "description": "The minimum possible z value for the point's radius calculation. If\nthe point's Z value is smaller than zMin, the slice will be drawn\naccording to the zMin value."
              },
              "subtree": {}
            }
          }
        },
        "variwide": {
          "meta": {
            "types": {},
            "name": "variwide",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A variwide chart (related to marimekko chart) is a column chart with a\nvariable width expressing a third dimension.\n\nIn TypeScript the [type](series.variwide.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `variwide` series are defined in\n   [plotOptions.variwide](plotOptions.variwide).\n3. Options for one single series are given in\n   [the series instance array](series.variwide).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        variwide: {\n            // shared options for all variwide series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'variwide'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "groupPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "groupPadding",
                "excludes": {},
                "default": 0,
                "description": "In a variwide chart, the group padding is 0 in order to express the\nhorizontal stacking of items."
              },
              "subtree": {}
            },
            "pointPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointPadding",
                "excludes": {},
                "default": 0,
                "description": "In a variwide chart, the point padding is 0 in order to express the\nhorizontal stacking of items."
              },
              "subtree": {}
            }
          }
        },
        "vbp": {
          "meta": {
            "types": {},
            "name": "vbp",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Volume By Price indicator.\n\nThis series requires `linkedTo` option to be set.\n\nIn TypeScript the [type](series.vbp.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `vbp` series are defined in\n   [plotOptions.vbp](plotOptions.vbp).\n3. Options for one single series are given in\n   [the series instance array](series.vbp).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        vbp: {\n            // shared options for all vbp series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'vbp'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "animationLimit": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "animationLimit",
                "excludes": {},
                "default": 1000
              },
              "subtree": {}
            },
            "crisp": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "crisp",
                "excludes": {},
                "default": true
              },
              "subtree": {}
            },
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {}
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "enableMouseTracking": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enableMouseTracking",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "ranges": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "ranges",
                    "excludes": {},
                    "default": 12,
                    "description": "The number of price zones."
                  },
                  "subtree": {}
                },
                "volumeSeriesID": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "volumeSeriesID",
                    "excludes": {},
                    "default": "volume",
                    "description": "The id of volume series which is mandatory. For example using\nOHLC data, volumeSeriesID='volume' means the indicator will be\ncalculated using OHLC and volume values."
                  },
                  "subtree": {}
                }
              }
            },
            "pointPadding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointPadding",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "volumeDivision": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "volumeDivision",
                "excludes": {},
                "description": "The styles for bars when volume is divided into positive/negative."
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true,
                    "description": "Option to control if volume is divided."
                  },
                  "subtree": {}
                },
                "styles": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "styles",
                    "excludes": {}
                  },
                  "subtree": {
                    "negativeColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "negativeColor",
                        "excludes": {},
                        "default": "rgba(244, 91, 91, 0.8)",
                        "description": "Color of negative volume bars."
                      },
                      "subtree": {}
                    },
                    "positiveColor": {
                      "meta": {
                        "types": {
                          "highcharts.colorstring": 1
                        },
                        "name": "positiveColor",
                        "excludes": {},
                        "default": "rgba(144, 237, 125, 0.8)",
                        "description": "Color of positive volume bars."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "zIndex": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zIndex",
                "excludes": {},
                "default": -1
              },
              "subtree": {}
            },
            "zoneLines": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "zoneLines",
                "excludes": {},
                "description": "The styles for lines which determine price zones."
              },
              "subtree": {
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true,
                    "description": "Enable/disable zone lines."
                  },
                  "subtree": {}
                },
                "styles": {
                  "meta": {
                    "types": {
                      "highcharts.cssobject": 1
                    },
                    "name": "styles",
                    "excludes": {},
                    "default": "{\"color\": \"#0A9AC9\", \"dashStyle\": \"LongDash\", \"lineWidth\": 1}",
                    "description": "Specify the style of zone lines."
                  },
                  "subtree": {}
                }
              }
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "allowOverlap": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "allowOverlap",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "format": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "format",
                    "excludes": {},
                    "default": "P: {point.volumePos:.2f} | N: {point.volumeNeg:.2f}"
                  },
                  "subtree": {}
                },
                "padding": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "padding",
                    "excludes": {},
                    "default": 0
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "object": 1
                    },
                    "name": "style",
                    "excludes": {}
                  },
                  "subtree": {
                    "fontSize": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "fontSize",
                        "excludes": {},
                        "default": "7px"
                      },
                      "subtree": {}
                    }
                  }
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "top"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "vector": {
          "meta": {
            "types": {},
            "name": "vector",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "A vector plot is a type of cartesian chart where each point has an X and\nY position, a length and a direction. Vectors are drawn as arrows.\n\nIn TypeScript the [type](series.vector.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `vector` series are defined in\n   [plotOptions.vector](plotOptions.vector).\n3. Options for one single series are given in\n   [the series instance array](series.vector).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        vector: {\n            // shared options for all vector series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'vector'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.scatter"
          },
          "subtree": {
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 2,
                "description": "The line width for each vector arrow."
              },
              "subtree": {}
            },
            "rotationOrigin": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "rotationOrigin",
                "excludes": {},
                "default": "center",
                "description": "What part of the vector it should be rotated around. Can be one of\n`start`, `center` and `end`. When `start`, the vectors will start\nfrom the given [x, y] position, and when `end` the vectors will end\nin the [x, y] position."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineWidthPlus": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidthPlus",
                        "excludes": {},
                        "default": 1,
                        "description": "Additonal line width for the vector errors when they are\nhovered."
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "[{point.x}, {point.y}] Length: {point.length} Direction: {point.direction}°"
                  },
                  "subtree": {}
                }
              }
            },
            "vectorLength": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "vectorLength",
                "excludes": {},
                "default": 20,
                "description": "Maximum length of the arrows in the vector plot. The individual arrow\nlength is computed between 0 and this value."
              },
              "subtree": {}
            }
          }
        },
        "venn": {
          "meta": {
            "types": {},
            "name": "venn",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A Venn diagram displays all possible logical relations between a collection\nof different sets. The sets are represented by circles, and the relation\nbetween the sets are displayed by the overlap or lack of overlap between\nthem. The venn diagram is a special case of Euler diagrams, which can also\nbe displayed by this series type.\n\nIn TypeScript the [type](series.venn.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `venn` series are defined in\n   [plotOptions.venn](plotOptions.venn).\n3. Options for one single series are given in\n   [the series instance array](series.venn).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        venn: {\n            // shared options for all venn series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'venn'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.scatter"
          },
          "subtree": {
            "borderColor": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "borderColor",
                "excludes": {},
                "default": "#cccccc"
              },
              "subtree": {}
            },
            "borderDashStyle": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "borderDashStyle",
                "excludes": {},
                "default": "solid"
              },
              "subtree": {}
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": 1
              },
              "subtree": {}
            },
            "brighten": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "brighten",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "clip": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "clip",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "colorByPoint": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "colorByPoint",
                "excludes": {},
                "default": true
              },
              "subtree": {}
            },
            "marker": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "marker",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "opacity": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "opacity",
                "excludes": {},
                "default": 0.75
              },
              "subtree": {}
            },
            "showInLegend": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showInLegend",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {
                    "borderColor": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "borderColor",
                        "excludes": {},
                        "default": "#333333"
                      },
                      "subtree": {}
                    },
                    "opacity": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "opacity",
                        "excludes": {},
                        "default": 1
                      },
                      "subtree": {}
                    }
                  }
                },
                "select": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "select",
                    "excludes": {}
                  },
                  "subtree": {
                    "animation": {
                      "meta": {
                        "types": {
                          "boolean": 1
                        },
                        "name": "animation",
                        "excludes": {},
                        "default": false
                      },
                      "subtree": {}
                    },
                    "borderColor": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "borderColor",
                        "excludes": {},
                        "default": "#000000"
                      },
                      "subtree": {}
                    },
                    "color": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "color",
                        "excludes": {},
                        "default": "#cccccc"
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "{point.name}: {point.value}"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "vwap": {
          "meta": {
            "types": {},
            "name": "vwap",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Volume Weighted Average Price indicator.\n\nThis series requires `linkedTo` option to be set.\n\nIn TypeScript the [type](series.vwap.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `vwap` series are defined in\n   [plotOptions.vwap](plotOptions.vwap).\n3. Options for one single series are given in\n   [the series instance array](series.vwap).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        vwap: {\n            // shared options for all vwap series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'vwap'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 30
                  },
                  "subtree": {}
                },
                "volumeSeriesID": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "volumeSeriesID",
                    "excludes": {},
                    "default": "volume",
                    "description": "The id of volume series which is mandatory. For example using\nOHLC data, volumeSeriesID='volume' means the indicator will be\ncalculated using OHLC and volume values."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "waterfall": {
          "meta": {
            "types": {},
            "name": "waterfall",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A waterfall chart displays sequentially introduced positive or negative\nvalues in cumulative columns.\n\nIn TypeScript the [type](series.waterfall.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `waterfall` series are defined in\n   [plotOptions.waterfall](plotOptions.waterfall).\n3. Options for one single series are given in\n   [the series instance array](series.waterfall).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        waterfall: {\n            // shared options for all waterfall series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'waterfall'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "borderColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "borderColor",
                "excludes": {},
                "default": "#333333",
                "products": {
                  "highcharts": 1
                },
                "description": "The color of the border of each waterfall column.\n\nIn styled mode, the border stroke can be set with the\n`.highcharts-point` class."
              },
              "subtree": {}
            },
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "color",
                "excludes": {}
              },
              "subtree": {}
            },
            "dashStyle": {
              "meta": {
                "types": {
                  "highcharts.dashstylevalue": 1
                },
                "name": "dashStyle",
                "excludes": {},
                "default": "Dot",
                "products": {
                  "highcharts": 1
                },
                "description": "A name for the dash style to use for the line connecting the columns\nof the waterfall series. Possible values: Dash, DashDot, Dot, LongDash,\nLongDashDot, LongDashDotDot, ShortDash, ShortDashDot, ShortDashDotDot,\nShortDot, Solid\n\nIn styled mode, the stroke dash-array can be set with the\n`.highcharts-graph` class."
              },
              "subtree": {}
            },
            "lineColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "lineColor",
                "excludes": {},
                "default": "#333333",
                "products": {
                  "highcharts": 1
                },
                "description": "The color of the line that connects columns in a waterfall series.\n\nIn styled mode, the stroke can be set with the `.highcharts-graph` class."
              },
              "subtree": {}
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 1,
                "products": {
                  "highcharts": 1
                },
                "description": "The width of the line connecting waterfall columns."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineWidthPlus": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidthPlus",
                        "excludes": {},
                        "default": 0
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "upColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "upColor",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "The color used specifically for positive point columns. When not\nspecified, the general series color is used.\n\nIn styled mode, the waterfall colors can be set with the\n`.highcharts-point-negative`, `.highcharts-sum` and\n`.highcharts-intermediate-sum` classes."
              },
              "subtree": {}
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "inside": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "inside",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "williamsr": {
          "meta": {
            "types": {},
            "name": "williamsr",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Williams %R. This series requires the `linkedTo` option to be\nset and should be loaded after the `stock/indicators/indicators.js`.\n\nIn TypeScript the [type](series.williamsr.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `williamsr` series are defined in\n   [plotOptions.williamsr](plotOptions.williamsr).\n3. Options for one single series are given in\n   [the series instance array](series.williamsr).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        williamsr: {\n            // shared options for all williamsr series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'williamsr'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {},
                "description": "Paramters used in calculation of Williams %R series points."
              },
              "subtree": {
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 14,
                    "description": "Period for Williams %R oscillator"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "windbarb": {
          "meta": {
            "types": {},
            "name": "windbarb",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "Wind barbs are a convenient way to represent wind speed and direction in\none graphical form. Wind direction is given by the stem direction, and\nwind speed by the number and shape of barbs.\n\nIn TypeScript the [type](series.windbarb.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `windbarb` series are defined in\n   [plotOptions.windbarb](plotOptions.windbarb).\n3. Options for one single series are given in\n   [the series instance array](series.windbarb).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        windbarb: {\n            // shared options for all windbarb series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'windbarb'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "colorKey": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "colorKey",
                "excludes": {},
                "default": "value"
              },
              "subtree": {}
            },
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Data grouping options for the wind barbs. In Highcharts, this\nrequires the `modules/datagrouping.js` module to be loaded. In\nHighstock, data grouping is included."
              },
              "subtree": {
                "approximation": {
                  "meta": {
                    "types": {
                      "string": 1,
                      "function": 1
                    },
                    "name": "approximation",
                    "excludes": {},
                    "default": "windbarb",
                    "products": {
                      "highcharts": 1,
                      "highstock": 1
                    },
                    "description": "Approximation function for the data grouping. The default\nreturns an average of wind speed and a vector average direction\nweighted by wind speed."
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": true,
                    "products": {
                      "highcharts": 1,
                      "highstock": 1
                    },
                    "description": "Whether to enable data grouping."
                  },
                  "subtree": {}
                },
                "groupPixelWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "groupPixelWidth",
                    "excludes": {},
                    "default": 30,
                    "products": {
                      "highcharts": 1,
                      "highstock": 1
                    },
                    "description": "The approximate data group width."
                  },
                  "subtree": {}
                }
              }
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 2,
                "description": "The line width of the wind barb symbols."
              },
              "subtree": {}
            },
            "onSeries": {
              "meta": {
                "types": {
                  "string": 1,
                  "null": 1
                },
                "name": "onSeries",
                "excludes": {},
                "default": null,
                "description": "The id of another series in the chart that the wind barbs are\nprojected on. When `null`, the wind symbols are drawn on the X axis,\nbut offset up or down by the `yOffset` setting."
              },
              "subtree": {}
            },
            "states": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "states",
                "excludes": {}
              },
              "subtree": {
                "hover": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "hover",
                    "excludes": {}
                  },
                  "subtree": {
                    "lineWidthPlus": {
                      "meta": {
                        "types": {
                          "number": 1
                        },
                        "name": "lineWidthPlus",
                        "excludes": {},
                        "default": 0
                      },
                      "subtree": {}
                    }
                  }
                }
              }
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span> {series.name}: <b>{point.value}</b> ({point.beaufort})<br/>",
                    "description": "The default point format for the wind barb tooltip. Note the\n`point.beaufort` property that refers to the Beaufort wind scale.\nThe names can be internationalized by modifying\n`Highcharts.seriesTypes.windbarb.prototype.beaufortNames`."
                  },
                  "subtree": {}
                }
              }
            },
            "vectorLength": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "vectorLength",
                "excludes": {},
                "default": 20,
                "description": "Pixel length of the stems."
              },
              "subtree": {}
            },
            "xOffset": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "xOffset",
                "excludes": {},
                "default": 0,
                "description": "Horizontal offset from the cartesian position, in pixels. When the\nchart is inverted, this option allows translation like\n[yOffset](#plotOptions.windbarb.yOffset) in non inverted charts."
              },
              "subtree": {}
            },
            "yOffset": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "yOffset",
                "excludes": {},
                "default": -20,
                "description": "Vertical offset from the cartesian position, in pixels. The default\nvalue makes sure the symbols don't overlap the X axis when `onSeries`\nis `null`, and that they don't overlap the linked series when\n`onSeries` is given."
              },
              "subtree": {}
            }
          }
        },
        "wma": {
          "meta": {
            "types": {},
            "name": "wma",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Weighted moving average indicator (WMA). This series requires `linkedTo`\noption to be set.\n\nIn TypeScript the [type](series.wma.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `wma` series are defined in\n   [plotOptions.wma](plotOptions.wma).\n3. Options for one single series are given in\n   [the series instance array](series.wma).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        wma: {\n            // shared options for all wma series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'wma'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "index": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "index",
                    "excludes": {},
                    "default": 3
                  },
                  "subtree": {}
                },
                "period": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "period",
                    "excludes": {},
                    "default": 9
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "wordcloud": {
          "meta": {
            "types": {},
            "name": "wordcloud",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "A word cloud is a visualization of a set of words, where the size and\nplacement of a word is determined by how it is weighted.\n\nIn TypeScript the [type](series.wordcloud.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `wordcloud` series are defined in\n   [plotOptions.wordcloud](plotOptions.wordcloud).\n3. Options for one single series are given in\n   [the series instance array](series.wordcloud).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        wordcloud: {\n            // shared options for all wordcloud series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'wordcloud'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "allowExtendPlayingField": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "allowExtendPlayingField",
                "excludes": {},
                "default": true,
                "description": "If there is no space for a word on the playing field, then this option\nwill allow the playing field to be extended to fit the word. If false\nthen the word will be dropped from the visualization.\n\nNB! This option is currently not decided to be published in the API, and\nis therefore marked as private."
              },
              "subtree": {}
            },
            "animation": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "animation",
                "excludes": {}
              },
              "subtree": {
                "duration": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "duration",
                    "excludes": {},
                    "default": 500
                  },
                  "subtree": {}
                }
              }
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "clip": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "clip",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "colorByPoint": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "colorByPoint",
                "excludes": {},
                "default": true
              },
              "subtree": {}
            },
            "maxFontSize": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "maxFontSize",
                "excludes": {},
                "default": 25,
                "description": "The word with the largest weight will have a font size equal to this\nvalue. The font size of a word is the ratio between its weight and the\nlargest occuring weight, multiplied with the value of maxFontSize."
              },
              "subtree": {}
            },
            "minFontSize": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "minFontSize",
                "excludes": {},
                "default": 1,
                "description": "A threshold determining the minimum font size that can be applied to a\nword."
              },
              "subtree": {}
            },
            "placementStrategy": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "placementStrategy",
                "excludes": {},
                "default": "center",
                "description": "This option decides which algorithm is used for placement, and rotation\nof a word. The choice of algorith is therefore a crucial part of the\nresulting layout of the wordcloud. It is possible for users to add their\nown custom placement strategies for use in word cloud. Read more about it\nin our\n[documentation](https://www.highcharts.com/docs/chart-and-series-types/word-cloud-series#custom-placement-strategies)"
              },
              "subtree": {}
            },
            "rotation": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "rotation",
                "excludes": {},
                "description": "Rotation options for the words in the wordcloud."
              },
              "subtree": {
                "from": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "from",
                    "excludes": {},
                    "default": 0,
                    "description": "The smallest degree of rotation for a word."
                  },
                  "subtree": {}
                },
                "orientations": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "orientations",
                    "excludes": {},
                    "default": 2,
                    "description": "The number of possible orientations for a word, within the range of\n`rotation.from` and `rotation.to`. Must be a number larger than 0."
                  },
                  "subtree": {}
                },
                "to": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "to",
                    "excludes": {},
                    "default": 90,
                    "description": "The largest degree of rotation for a word."
                  },
                  "subtree": {}
                }
              }
            },
            "showInLegend": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showInLegend",
                "excludes": {},
                "default": false
              },
              "subtree": {}
            },
            "spiral": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "spiral",
                "excludes": {},
                "default": "rectangular",
                "description": "Spiral used for placing a word after the initial position experienced a\ncollision with either another word or the borders.\nIt is possible for users to add their own custom spiralling algorithms\nfor use in word cloud. Read more about it in our\n[documentation](https://www.highcharts.com/docs/chart-and-series-types/word-cloud-series#custom-spiralling-algorithm)"
              },
              "subtree": {}
            },
            "style": {
              "meta": {
                "types": {
                  "highcharts.cssobject": 1
                },
                "name": "style",
                "excludes": {},
                "default": "{\"fontFamily\":\"sans-serif\", \"fontWeight\": \"900\"}",
                "description": "CSS styles for the words."
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "followPointer": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "followPointer",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span> {series.name}: <b>{point.weight}</b><br/>"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "xrange": {
          "meta": {
            "types": {},
            "name": "xrange",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "The X-range series displays ranges on the X axis, typically time\nintervals with a start and end date.\n\nIn TypeScript the [type](series.xrange.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `xrange` series are defined in\n   [plotOptions.xrange](plotOptions.xrange).\n3. Options for one single series are given in\n   [the series instance array](series.xrange).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        xrange: {\n            // shared options for all xrange series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'xrange'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.column"
          },
          "subtree": {
            "borderRadius": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderRadius",
                "excludes": {},
                "default": 3
              },
              "subtree": {}
            },
            "colorByPoint": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "colorByPoint",
                "excludes": {},
                "default": true,
                "description": "In an X-range series, this option makes all points of the same Y-axis\ncategory the same color."
              },
              "subtree": {}
            },
            "dragDrop": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dragDrop",
                "excludes": {}
              },
              "subtree": {
                "draggableX1": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableX1",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow x value to be dragged individually."
                  },
                  "subtree": {}
                },
                "draggableX2": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "draggableX2",
                    "excludes": {},
                    "default": "true",
                    "description": "Allow x2 value to be dragged individually."
                  },
                  "subtree": {}
                }
              }
            },
            "partialFill": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "partialFill",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "A partial fill for each point, typically used to visualize how much\nof a task is performed. The partial fill object can be set either on\nseries or point level."
              },
              "subtree": {
                "fill": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "fill",
                    "excludes": {},
                    "products": {
                      "highcharts": 1,
                      "highstock": 1,
                      "gantt": 1
                    },
                    "description": "The fill color to be used for partial fills. Defaults to a darker\nshade of the point color."
                  },
                  "subtree": {}
                }
              }
            },
            "pointRange": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "pointRange",
                "excludes": {},
                "default": 0
              },
              "subtree": {}
            },
            "tooltip": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "tooltip",
                "excludes": {}
              },
              "subtree": {
                "headerFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "headerFormat",
                    "excludes": {},
                    "default": "<span style=\"font-size: 10px\">{point.x} - {point.x2}</span><br/>"
                  },
                  "subtree": {}
                },
                "pointFormat": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "pointFormat",
                    "excludes": {},
                    "default": "<span style=\"color:{point.color}\">●</span> {series.name}: <b>{point.yCategory}</b><br/>"
                  },
                  "subtree": {}
                }
              }
            },
            "dataLabels": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "dataLabels",
                "excludes": {}
              },
              "subtree": {
                "formatter": {
                  "meta": {
                    "types": {},
                    "name": "formatter",
                    "excludes": {},
                    "description": "The default formatter for X-range data labels displays the percentage\nof the partial fill amount."
                  },
                  "subtree": {}
                },
                "inside": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "inside",
                    "excludes": {},
                    "default": true
                  },
                  "subtree": {}
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "middle"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "zigzag": {
          "meta": {
            "types": {},
            "name": "zigzag",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Zig Zag indicator.\n\nThis series requires `linkedTo` option to be set.\n\nIn TypeScript the [type](series.zigzag.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `zigzag` series are defined in\n   [plotOptions.zigzag](plotOptions.zigzag).\n3. Options for one single series are given in\n   [the series instance array](series.zigzag).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        zigzag: {\n            // shared options for all zigzag series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'zigzag'\n    }]\n});\n```\n            ",
            "extends": "plotOptions.sma"
          },
          "subtree": {
            "params": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "params",
                "excludes": {}
              },
              "subtree": {
                "deviation": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "deviation",
                    "excludes": {},
                    "default": 1,
                    "description": "The threshold for the value change.\n\nFor example deviation=1 means the indicator will ignore all price\nmovements less than 1%."
                  },
                  "subtree": {}
                },
                "highIndex": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "highIndex",
                    "excludes": {},
                    "default": 1,
                    "description": "The point index which indicator calculations will base - high\nvalue.\n\nFor example using OHLC data, index=1 means the indicator will be\ncalculated using High values."
                  },
                  "subtree": {}
                },
                "lowIndex": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "lowIndex",
                    "excludes": {},
                    "default": 2,
                    "description": "The point index which indicator calculations will base - low\nvalue.\n\nFor example using OHLC data, index=2 means the indicator will be\ncalculated using Low values."
                  },
                  "subtree": {}
                }
              }
            }
          }
        }
      }
    },
    "rangeSelector": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "rangeSelector",
        "excludes": {},
        "products": {
          "highstock": 1,
          "gantt": 1
        },
        "description": "The range selector is a tool for selecting ranges to display within\nthe chart. It provides buttons to select preconfigured ranges in\nthe chart, like 1 day, 1 week, 1 month etc. It also provides input\nboxes where min and max dates can be manually input."
      },
      "subtree": {
        "allButtonsEnabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "allButtonsEnabled",
            "excludes": {},
            "default": "false",
            "description": "Whether to enable all buttons from the start. By default buttons are\nonly enabled if the corresponding time range exists on the X axis,\nbut enabling all buttons allows for dynamically loading different\ntime ranges."
          },
          "subtree": {}
        },
        "buttonPosition": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "buttonPosition",
            "excludes": {},
            "description": "Positioning for the button row."
          },
          "subtree": {
            "align": {
              "meta": {
                "types": {
                  "highcharts.alignvalue": 1
                },
                "name": "align",
                "excludes": {},
                "default": "left",
                "description": "The alignment of the input box. Allowed properties are `left`,\n`center`, `right`."
              },
              "subtree": {}
            },
            "x": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "x",
                "excludes": {},
                "default": 0,
                "description": "X offset of the button row."
              },
              "subtree": {}
            },
            "y": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "y",
                "excludes": {},
                "default": 0,
                "description": "Y offset of the button row."
              },
              "subtree": {}
            }
          }
        },
        "buttonSpacing": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "buttonSpacing",
            "excludes": {},
            "default": "0",
            "description": "The space in pixels between the buttons in the range selector."
          },
          "subtree": {}
        },
        "buttonTheme": {
          "meta": {
            "types": {
              "highcharts.svgattributes": 1
            },
            "name": "buttonTheme",
            "excludes": {},
            "description": "A collection of attributes for the buttons. The object takes SVG\nattributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\na collection of CSS properties for the text.\n\nThe object can also be extended with states, so you can set\npresentational options for `hover`, `select` or `disabled` button\nstates.\n\nCSS styles for the text label.\n\nIn styled mode, the buttons are styled by the\n`.highcharts-range-selector-buttons .highcharts-button` rule with its\ndifferent states."
          },
          "subtree": {}
        },
        "buttons": {
          "meta": {
            "types": {
              "array": "*"
            },
            "name": "buttons",
            "excludes": {},
            "description": "An array of configuration objects for the buttons.\n\nDefaults to\n\n<pre>buttons: [{\n    type: 'month',\n    count: 1,\n    text: '1m'\n}, {\n    type: 'month',\n    count: 3,\n    text: '3m'\n}, {\n    type: 'month',\n    count: 6,\n    text: '6m'\n}, {\n    type: 'ytd',\n    text: 'YTD'\n}, {\n    type: 'year',\n    count: 1,\n    text: '1y'\n}, {\n    type: 'all',\n    text: 'All'\n}]</pre>"
          },
          "subtree": {
            "count": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "count",
                "excludes": {},
                "default": "1",
                "description": "How many units of the defined type the button should span. If `type`\nis \"month\" and `count` is 3, the button spans three months."
              },
              "subtree": {}
            },
            "dataGrouping": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "dataGrouping",
                "excludes": {},
                "description": "A custom data grouping object for each button.",
                "extends": "plotOptions.series.dataGrouping"
              },
              "subtree": {}
            },
            "events": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "events",
                "excludes": {}
              },
              "subtree": {
                "click": {
                  "meta": {
                    "types": {
                      "highcharts.rangeselectorclickcallbackfunction": 1
                    },
                    "name": "click",
                    "excludes": {},
                    "description": "Fires when clicking on the rangeSelector button. One parameter,\nevent, is passed to the function, containing common event\ninformation.\n\n<pre>\nclick: function(e) {\n  console.log(this);\n}\n</pre>\n\nReturn false to stop default button's click action."
                  },
                  "subtree": {}
                }
              }
            },
            "offsetMax": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "offsetMax",
                "excludes": {},
                "default": "0",
                "description": "Additional range (in milliseconds) added to the end of the calculated\ntime span."
              },
              "subtree": {}
            },
            "offsetMin": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "offsetMin",
                "excludes": {},
                "default": "0",
                "description": "Additional range (in milliseconds) added to the start of the\ncalculated time span."
              },
              "subtree": {}
            },
            "preserveDataGrouping": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "preserveDataGrouping",
                "excludes": {},
                "default": "false",
                "description": "When buttons apply dataGrouping on a series, by default zooming\nin/out will deselect buttons and unset dataGrouping. Enable this\noption to keep buttons selected when extremes change."
              },
              "subtree": {}
            },
            "text": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "text",
                "excludes": {},
                "description": "The text for the button itself."
              },
              "subtree": {}
            },
            "type": {
              "meta": {
                "types": {
                  "highcharts.rangeselectorbuttontypevalue": 1
                },
                "name": "type",
                "excludes": {},
                "description": "Defined the time span for the button. Can be one of `millisecond`,\n`second`, `minute`, `hour`, `day`, `week`, `month`, `year`, `ytd`,\nand `all`."
              },
              "subtree": {}
            }
          }
        },
        "enabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enabled",
            "excludes": {},
            "default": "true",
            "description": "Enable or disable the range selector."
          },
          "subtree": {}
        },
        "floating": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "floating",
            "excludes": {},
            "default": false,
            "description": "When the rangeselector is floating, the plot area does not reserve\nspace for it. This opens for positioning anywhere on the chart."
          },
          "subtree": {}
        },
        "height": {
          "meta": {
            "types": {
              "number": 1,
              "undefined": 1
            },
            "name": "height",
            "excludes": {},
            "description": "Deprecated. The height of the range selector. Currently it is\ncalculated dynamically."
          },
          "subtree": {}
        },
        "inputBoxBorderColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1
            },
            "name": "inputBoxBorderColor",
            "excludes": {},
            "default": "#cccccc",
            "description": "The border color of the date input boxes."
          },
          "subtree": {}
        },
        "inputBoxHeight": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "inputBoxHeight",
            "excludes": {},
            "default": "17",
            "description": "The pixel height of the date input boxes."
          },
          "subtree": {}
        },
        "inputBoxStyle": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "inputBoxStyle",
            "excludes": {},
            "description": "CSS for the container DIV holding the input boxes. Deprecated as\nof 1.2.5\\. Use [inputPosition](#rangeSelector.inputPosition) instead."
          },
          "subtree": {}
        },
        "inputBoxWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "inputBoxWidth",
            "excludes": {},
            "default": "90",
            "description": "The pixel width of the date input boxes."
          },
          "subtree": {}
        },
        "inputDateFormat": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "inputDateFormat",
            "excludes": {},
            "default": "%b %e, %Y",
            "description": "The date format in the input boxes when not selected for editing.\nDefaults to `%b %e, %Y`."
          },
          "subtree": {}
        },
        "inputDateParser": {
          "meta": {
            "types": {
              "highcharts.rangeselectorparsecallbackfunction": 1
            },
            "name": "inputDateParser",
            "excludes": {},
            "description": "A custom callback function to parse values entered in the input boxes\nand return a valid JavaScript time as milliseconds since 1970."
          },
          "subtree": {}
        },
        "inputEditDateFormat": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "inputEditDateFormat",
            "excludes": {},
            "default": "%Y-%m-%d",
            "description": "The date format in the input boxes when they are selected for\nediting. This must be a format that is recognized by JavaScript\nDate.parse."
          },
          "subtree": {}
        },
        "inputEnabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "inputEnabled",
            "excludes": {},
            "default": "true",
            "description": "Enable or disable the date input boxes. Defaults to enabled when\nthere is enough space, disabled if not (typically mobile)."
          },
          "subtree": {}
        },
        "inputPosition": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "inputPosition",
            "excludes": {},
            "description": "Positioning for the input boxes. Allowed properties are `align`,\n `x` and `y`."
          },
          "subtree": {
            "align": {
              "meta": {
                "types": {
                  "highcharts.alignvalue": 1
                },
                "name": "align",
                "excludes": {},
                "default": "right",
                "description": "The alignment of the input box. Allowed properties are `left`,\n`center`, `right`."
              },
              "subtree": {}
            },
            "x": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "x",
                "excludes": {},
                "default": 0,
                "description": "X offset of the input row."
              },
              "subtree": {}
            },
            "y": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "y",
                "excludes": {},
                "default": 0,
                "description": "Y offset of the input row."
              },
              "subtree": {}
            }
          }
        },
        "inputStyle": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "inputStyle",
            "excludes": {},
            "description": "CSS for the HTML inputs in the range selector.\n\nIn styled mode, the inputs are styled by the\n`.highcharts-range-input text` rule in SVG mode, and\n`input.highcharts-range-selector` when active."
          },
          "subtree": {}
        },
        "labelStyle": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "labelStyle",
            "excludes": {},
            "description": "CSS styles for the labels - the Zoom, From and To texts.\n\nIn styled mode, the labels are styled by the\n`.highcharts-range-label` class."
          },
          "subtree": {}
        },
        "selected": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "selected",
            "excludes": {},
            "description": "The index of the button to appear pre-selected."
          },
          "subtree": {}
        },
        "verticalAlign": {
          "meta": {
            "types": {
              "highcharts.verticalalignvalue": 1
            },
            "name": "verticalAlign",
            "excludes": {},
            "default": "top",
            "description": "The vertical alignment of the rangeselector box. Allowed properties\nare `top`, `middle`, `bottom`."
          },
          "subtree": {}
        },
        "x": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "x",
            "excludes": {},
            "default": 0,
            "description": "The x offset of the range selector relative to its horizontal\nalignment within `chart.spacingLeft` and `chart.spacingRight`."
          },
          "subtree": {}
        },
        "y": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "y",
            "excludes": {},
            "default": 0,
            "description": "The y offset of the range selector relative to its horizontal\nalignment within `chart.spacingLeft` and `chart.spacingRight`."
          },
          "subtree": {}
        }
      }
    },
    "responsive": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "responsive",
        "excludes": {},
        "description": "Allows setting a set of rules to apply for different screen or chart\nsizes. Each rule specifies additional chart options."
      },
      "subtree": {
        "rules": {
          "meta": {
            "types": {
              "array": "*"
            },
            "name": "rules",
            "excludes": {},
            "description": "A set of rules for responsive settings. The rules are executed from\nthe top down."
          },
          "subtree": {
            "chartOptions": {
              "meta": {
                "types": {
                  "highcharts.options": 1
                },
                "name": "chartOptions",
                "excludes": {},
                "description": "A full set of chart options to apply as overrides to the general\nchart options. The chart options are applied when the given rule\nis active.\n\nA special case is configuration objects that take arrays, for example\n[xAxis](#xAxis), [yAxis](#yAxis) or [series](#series). For these\ncollections, an `id` option is used to map the new option set to\nan existing object. If an existing object of the same id is not found,\nthe item of the same indexupdated. So for example, setting `chartOptions`\nwith two series items without an `id`, will cause the existing chart's\ntwo series to be updated with respective options."
              },
              "subtree": {}
            },
            "condition": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "condition",
                "excludes": {},
                "description": "Under which conditions the rule applies."
              },
              "subtree": {
                "callback": {
                  "meta": {
                    "types": {
                      "highcharts.responsivecallbackfunction": 1
                    },
                    "name": "callback",
                    "excludes": {},
                    "description": "A callback function to gain complete control on when the responsive\nrule applies. Return `true` if it applies. This opens for checking\nagainst other metrics than the chart size, for example the document\nsize or other elements."
                  },
                  "subtree": {}
                },
                "maxHeight": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "maxHeight",
                    "excludes": {},
                    "description": "The responsive rule applies if the chart height is less than this."
                  },
                  "subtree": {}
                },
                "maxWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "maxWidth",
                    "excludes": {},
                    "description": "The responsive rule applies if the chart width is less than this."
                  },
                  "subtree": {}
                },
                "minHeight": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "minHeight",
                    "excludes": {},
                    "default": "0",
                    "description": "The responsive rule applies if the chart height is greater than this."
                  },
                  "subtree": {}
                },
                "minWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "minWidth",
                    "excludes": {},
                    "default": "0",
                    "description": "The responsive rule applies if the chart width is greater than this."
                  },
                  "subtree": {}
                }
              }
            }
          }
        }
      }
    },
    "scrollbar": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "scrollbar",
        "excludes": {},
        "products": {
          "highstock": 1,
          "gantt": 1
        },
        "description": "The scrollbar is a means of panning over the X axis of a stock chart.\nScrollbars can  also be applied to other types of axes.\n\nAnother approach to scrollable charts is the [chart.scrollablePlotArea](https://api.highcharts.com/highcharts/chart.scrollablePlotArea) option that\nis especially suitable for simpler cartesian charts on mobile.\n\nIn styled mode, all the presentational options for the\nscrollbar are replaced by the classes `.highcharts-scrollbar-thumb`,\n`.highcharts-scrollbar-arrow`, `.highcharts-scrollbar-button`,\n`.highcharts-scrollbar-rifles` and `.highcharts-scrollbar-track`."
      },
      "subtree": {
        "barBackgroundColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "barBackgroundColor",
            "excludes": {},
            "default": "#cccccc",
            "description": "The background color of the scrollbar itself."
          },
          "subtree": {}
        },
        "barBorderColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "barBorderColor",
            "excludes": {},
            "default": "#cccccc",
            "description": "The color of the scrollbar's border."
          },
          "subtree": {}
        },
        "barBorderRadius": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "barBorderRadius",
            "excludes": {},
            "default": 0,
            "description": "The border rounding radius of the bar."
          },
          "subtree": {}
        },
        "barBorderWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "barBorderWidth",
            "excludes": {},
            "default": 1,
            "description": "The width of the bar's border."
          },
          "subtree": {}
        },
        "buttonArrowColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "buttonArrowColor",
            "excludes": {},
            "default": "#333333",
            "description": "The color of the small arrow inside the scrollbar buttons."
          },
          "subtree": {}
        },
        "buttonBackgroundColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "buttonBackgroundColor",
            "excludes": {},
            "default": "#e6e6e6",
            "description": "The color of scrollbar buttons."
          },
          "subtree": {}
        },
        "buttonBorderColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "buttonBorderColor",
            "excludes": {},
            "default": "#cccccc",
            "description": "The color of the border of the scrollbar buttons."
          },
          "subtree": {}
        },
        "buttonBorderRadius": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "buttonBorderRadius",
            "excludes": {},
            "default": 0,
            "description": "The corner radius of the scrollbar buttons."
          },
          "subtree": {}
        },
        "buttonBorderWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "buttonBorderWidth",
            "excludes": {},
            "default": 1,
            "description": "The border width of the scrollbar buttons."
          },
          "subtree": {}
        },
        "enabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enabled",
            "excludes": {},
            "default": "true",
            "description": "Enable or disable the scrollbar."
          },
          "subtree": {}
        },
        "height": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "height",
            "excludes": {},
            "default": "20/14",
            "description": "The height of the scrollbar. The height also applies to the width\nof the scroll arrows so that they are always squares. Defaults to\n20 for touch devices and 14 for mouse devices."
          },
          "subtree": {}
        },
        "liveRedraw": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "liveRedraw",
            "excludes": {},
            "description": "Whether to redraw the main chart as the scrollbar or the navigator\nzoomed window is moved. Defaults to `true` for modern browsers and\n`false` for legacy IE browsers as well as mobile devices."
          },
          "subtree": {}
        },
        "margin": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "margin",
            "excludes": {},
            "default": 10,
            "description": "The margin between the scrollbar and its axis when the scrollbar is\napplied directly to an axis."
          },
          "subtree": {}
        },
        "minWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "minWidth",
            "excludes": {},
            "default": 6,
            "description": "The minimum width of the scrollbar."
          },
          "subtree": {}
        },
        "rifleColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "rifleColor",
            "excludes": {},
            "default": "#333333",
            "description": "The color of the small rifles in the middle of the scrollbar."
          },
          "subtree": {}
        },
        "showFull": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "showFull",
            "excludes": {},
            "default": "true",
            "description": "Whether to show or hide the scrollbar when the scrolled content is\nzoomed out to it full extent."
          },
          "subtree": {}
        },
        "step": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "step",
            "excludes": {},
            "default": 0.2
          },
          "subtree": {}
        },
        "trackBackgroundColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "trackBackgroundColor",
            "excludes": {},
            "default": "#f2f2f2",
            "description": "The color of the track background."
          },
          "subtree": {}
        },
        "trackBorderColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "trackBorderColor",
            "excludes": {},
            "default": "#f2f2f2",
            "description": "The color of the border of the scrollbar track."
          },
          "subtree": {}
        },
        "trackBorderRadius": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "trackBorderRadius",
            "excludes": {},
            "default": "0",
            "description": "The corner radius of the border of the scrollbar track."
          },
          "subtree": {}
        },
        "trackBorderWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "trackBorderWidth",
            "excludes": {},
            "default": 1,
            "description": "The width of the border of the scrollbar track."
          },
          "subtree": {}
        },
        "zIndex": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "zIndex",
            "excludes": {},
            "default": 3,
            "description": "The z index of the scrollbar group."
          },
          "subtree": {}
        }
      }
    },
    "series": {
      "meta": {
        "types": {
          "array": "series"
        },
        "name": "series",
        "excludes": {},
        "description": "Series options for specific data and the data itself. In TypeScript you\nhave to cast the series options to specific series types, to get all\npossible options for a series.",
        "extends": ",plotOptions.series,plotOptions.abands,plotOptions.ad,plotOptions.ao,plotOptions.apo,plotOptions.area,plotOptions.arearange,plotOptions.areaspline,plotOptions.areasplinerange,plotOptions.aroon,plotOptions.aroonoscillator,plotOptions.atr,plotOptions.bar,plotOptions.bb,plotOptions.bellcurve,plotOptions.boxplot,plotOptions.bubble,plotOptions.bullet,plotOptions.candlestick,plotOptions.cci,plotOptions.chaikin,plotOptions.cmf,plotOptions.column,plotOptions.columnpyramid,plotOptions.columnrange,plotOptions.cylinder,plotOptions.ema,plotOptions.dependencywheel,plotOptions.dpo,plotOptions.ema,plotOptions.errorbar,plotOptions.flags,plotOptions.funnel,plotOptions.funnel3d,plotOptions.gantt,plotOptions.gauge,plotOptions.heatmap,plotOptions.histogram,plotOptions.ikh,plotOptions.item,plotOptions.keltnerchannels,plotOptions.line,plotOptions.linearregression,plotOptions.linearregressionangle,plotOptions.linearregressionintercept,plotOptions.linearregressionslope,plotOptions.macd,plotOptions.map,plotOptions.mapbubble,plotOptions.mapline,plotOptions.mappoint,plotOptions.mfi,plotOptions.momentum,plotOptions.natr,plotOptions.networkgraph,plotOptions.ohlc,plotOptions.organization,plotOptions.packedbubble,plotOptions.pareto,plotOptions.pc,plotOptions.pie,plotOptions.pivotpoints,plotOptions.polygon,plotOptions.ppo,plotOptions.priceenvelopes,plotOptions.psar,plotOptions.pyramid,plotOptions.pyramid3d,plotOptions.roc,plotOptions.rsi,plotOptions.sankey,plotOptions.scatter,plotOptions.scatter3d,plotOptions.sma,plotOptions.solidgauge,plotOptions.spline,plotOptions.stochastic,plotOptions.streamgraph,plotOptions.sunburst,plotOptions.supertrend,plotOptions.ema,plotOptions.tilemap,plotOptions.timeline,plotOptions.trendline,plotOptions.tema,plotOptions.variablepie,plotOptions.variwide,plotOptions.vbp,plotOptions.vector,plotOptions.venn,plotOptions.vwap,plotOptions.waterfall,plotOptions.williamsr,plotOptions.wma,plotOptions.wordcloud,plotOptions.xrange,plotOptions.zigzag"
      },
      "subtree": {
        "abands": {
          "meta": {
            "types": {},
            "name": "abands",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "An Acceleration bands indicator. If the [type](#series.abands.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.abands.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `abands` series are defined in\n   [plotOptions.abands](plotOptions.abands).\n3. Options for one single series are given in\n   [the series instance array](series.abands).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        abands: {\n            // shared options for all abands series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'abands'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.abands"
          },
          "subtree": {}
        },
        "ad": {
          "meta": {
            "types": {},
            "name": "ad",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `AD` series. If the [type](#series.ad.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.ad.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `ad` series are defined in\n   [plotOptions.ad](plotOptions.ad).\n3. Options for one single series are given in\n   [the series instance array](series.ad).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        ad: {\n            // shared options for all ad series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'ad'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.ad"
          },
          "subtree": {}
        },
        "ao": {
          "meta": {
            "types": {},
            "name": "ao",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "An `AO` series. If the [type](#series.ao.type)\noption is not specified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.ao.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `ao` series are defined in\n   [plotOptions.ao](plotOptions.ao).\n3. Options for one single series are given in\n   [the series instance array](series.ao).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        ao: {\n            // shared options for all ao series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'ao'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.ao"
          },
          "subtree": {}
        },
        "apo": {
          "meta": {
            "types": {},
            "name": "apo",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "An `Absolute Price Oscillator` series. If the [type](#series.apo.type) option\nis not specified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.apo.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `apo` series are defined in\n   [plotOptions.apo](plotOptions.apo).\n3. Options for one single series are given in\n   [the series instance array](series.apo).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        apo: {\n            // shared options for all apo series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'apo'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.apo"
          },
          "subtree": {}
        },
        "aroon": {
          "meta": {
            "types": {},
            "name": "aroon",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A Aroon indicator. If the [type](#series.aroon.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.aroon.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `aroon` series are defined in\n   [plotOptions.aroon](plotOptions.aroon).\n3. Options for one single series are given in\n   [the series instance array](series.aroon).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        aroon: {\n            // shared options for all aroon series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'aroon'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.aroon"
          },
          "subtree": {}
        },
        "aroonoscillator": {
          "meta": {
            "types": {},
            "name": "aroonoscillator",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "An `Aroon Oscillator` series. If the [type](#series.aroonoscillator.type)\noption is not specified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.aroonoscillator.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `aroonoscillator` series are defined in\n   [plotOptions.aroonoscillator](plotOptions.aroonoscillator).\n3. Options for one single series are given in\n   [the series instance array](series.aroonoscillator).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        aroonoscillator: {\n            // shared options for all aroonoscillator series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'aroonoscillator'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.aroonoscillator"
          },
          "subtree": {}
        },
        "atr": {
          "meta": {
            "types": {},
            "name": "atr",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `ATR` series. If the [type](#series.atr.type) option is not specified, it\nis inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.atr.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `atr` series are defined in\n   [plotOptions.atr](plotOptions.atr).\n3. Options for one single series are given in\n   [the series instance array](series.atr).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        atr: {\n            // shared options for all atr series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'atr'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.atr"
          },
          "subtree": {}
        },
        "bb": {
          "meta": {
            "types": {},
            "name": "bb",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A bollinger bands indicator. If the [type](#series.bb.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.bb.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `bb` series are defined in\n   [plotOptions.bb](plotOptions.bb).\n3. Options for one single series are given in\n   [the series instance array](series.bb).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        bb: {\n            // shared options for all bb series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'bb'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.bb"
          },
          "subtree": {}
        },
        "cci": {
          "meta": {
            "types": {},
            "name": "cci",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `CCI` series. If the [type](#series.cci.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.cci.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `cci` series are defined in\n   [plotOptions.cci](plotOptions.cci).\n3. Options for one single series are given in\n   [the series instance array](series.cci).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        cci: {\n            // shared options for all cci series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'cci'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.cci"
          },
          "subtree": {}
        },
        "chaikin": {
          "meta": {
            "types": {},
            "name": "chaikin",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `Chaikin Oscillator` series. If the [type](#series.chaikin.type)\noption is not specified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.chaikin.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `chaikin` series are defined in\n   [plotOptions.chaikin](plotOptions.chaikin).\n3. Options for one single series are given in\n   [the series instance array](series.chaikin).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        chaikin: {\n            // shared options for all chaikin series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'chaikin'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.chaikin"
          },
          "subtree": {}
        },
        "cmf": {
          "meta": {
            "types": {},
            "name": "cmf",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `CMF` series. If the [type](#series.cmf.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.cmf.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `cmf` series are defined in\n   [plotOptions.cmf](plotOptions.cmf).\n3. Options for one single series are given in\n   [the series instance array](series.cmf).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        cmf: {\n            // shared options for all cmf series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'cmf'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.cmf"
          },
          "subtree": {}
        },
        "dema": {
          "meta": {
            "types": {},
            "name": "dema",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `DEMA` series. If the [type](#series.ema.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.dema.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `dema` series are defined in\n   [plotOptions.dema](plotOptions.dema).\n3. Options for one single series are given in\n   [the series instance array](series.dema).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        dema: {\n            // shared options for all dema series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'dema'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.ema"
          },
          "subtree": {}
        },
        "dpo": {
          "meta": {
            "types": {},
            "name": "dpo",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A Detrended Price Oscillator. If the [type](#series.dpo.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.dpo.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `dpo` series are defined in\n   [plotOptions.dpo](plotOptions.dpo).\n3. Options for one single series are given in\n   [the series instance array](series.dpo).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        dpo: {\n            // shared options for all dpo series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'dpo'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.dpo"
          },
          "subtree": {}
        },
        "ema": {
          "meta": {
            "types": {},
            "name": "ema",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `EMA` series. If the [type](#series.ema.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.ema.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `ema` series are defined in\n   [plotOptions.ema](plotOptions.ema).\n3. Options for one single series are given in\n   [the series instance array](series.ema).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        ema: {\n            // shared options for all ema series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'ema'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.ema"
          },
          "subtree": {}
        },
        "id": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "id",
            "excludes": {},
            "description": "An id for the series. This can be used after render time to get a pointer\nto the series object through `chart.get()`."
          },
          "subtree": {}
        },
        "ikh": {
          "meta": {
            "types": {},
            "name": "ikh",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `IKH` series. If the [type](#series.ikh.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.ikh.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `ikh` series are defined in\n   [plotOptions.ikh](plotOptions.ikh).\n3. Options for one single series are given in\n   [the series instance array](series.ikh).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        ikh: {\n            // shared options for all ikh series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'ikh'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.ikh"
          },
          "subtree": {}
        },
        "index": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "index",
            "excludes": {},
            "description": "The index of the series in the chart, affecting the internal index in the\n`chart.series` array, the visible Z index as well as the order in the\nlegend."
          },
          "subtree": {}
        },
        "keltnerchannels": {
          "meta": {
            "types": {},
            "name": "keltnerchannels",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A Keltner Channels indicator. If the [type](#series.keltnerchannels.type)\noption is not specified, it is inherited from[chart.type](#chart.type).\n\nIn TypeScript the [type](series.keltnerchannels.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `keltnerchannels` series are defined in\n   [plotOptions.keltnerchannels](plotOptions.keltnerchannels).\n3. Options for one single series are given in\n   [the series instance array](series.keltnerchannels).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        keltnerchannels: {\n            // shared options for all keltnerchannels series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'keltnerchannels'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.keltnerchannels"
          },
          "subtree": {}
        },
        "legendIndex": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "legendIndex",
            "excludes": {},
            "description": "The sequential index of the series in the legend."
          },
          "subtree": {}
        },
        "linearregression": {
          "meta": {
            "types": {},
            "name": "linearregression",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A linear regression series. If the [type](#series.linearregression.type)\noption is not specified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.linearregression.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `linearregression` series are defined in\n   [plotOptions.linearregression](plotOptions.linearregression).\n3. Options for one single series are given in\n   [the series instance array](series.linearregression).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        linearregression: {\n            // shared options for all linearregression series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'linearregression'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.linearregression"
          },
          "subtree": {}
        },
        "linearregressionangle": {
          "meta": {
            "types": {},
            "name": "linearregressionangle",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A linear regression intercept series. If the\n[type](#series.linearregressionangle.type) option is not specified, it is\ninherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.linearregressionangle.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `linearregressionangle` series are defined in\n   [plotOptions.linearregressionangle](plotOptions.linearregressionangle).\n3. Options for one single series are given in\n   [the series instance array](series.linearregressionangle).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        linearregressionangle: {\n            // shared options for all linearregressionangle series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'linearregressionangle'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.linearregressionangle"
          },
          "subtree": {}
        },
        "linearregressionintercept": {
          "meta": {
            "types": {},
            "name": "linearregressionintercept",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A linear regression intercept series. If the\n[type](#series.linearregressionintercept.type) option is not specified, it is\ninherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.linearregressionintercept.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `linearregressionintercept` series are defined in\n   [plotOptions.linearregressionintercept](plotOptions.linearregressionintercept).\n3. Options for one single series are given in\n   [the series instance array](series.linearregressionintercept).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        linearregressionintercept: {\n            // shared options for all linearregressionintercept series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'linearregressionintercept'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.linearregressionintercept"
          },
          "subtree": {}
        },
        "linearregressionslope": {
          "meta": {
            "types": {},
            "name": "linearregressionslope",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A linear regression slope series. If the\n[type](#series.linearregressionslope.type) option is not specified, it is\ninherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.linearregressionslope.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `linearregressionslope` series are defined in\n   [plotOptions.linearregressionslope](plotOptions.linearregressionslope).\n3. Options for one single series are given in\n   [the series instance array](series.linearregressionslope).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        linearregressionslope: {\n            // shared options for all linearregressionslope series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'linearregressionslope'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.linearregressionslope"
          },
          "subtree": {}
        },
        "macd": {
          "meta": {
            "types": {},
            "name": "macd",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `MACD` series. If the [type](#series.macd.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.macd.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `macd` series are defined in\n   [plotOptions.macd](plotOptions.macd).\n3. Options for one single series are given in\n   [the series instance array](series.macd).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        macd: {\n            // shared options for all macd series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'macd'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.macd"
          },
          "subtree": {}
        },
        "mapData": {
          "meta": {
            "types": {
              "array": "Highcharts.SeriesMapDataOptions",
              "*": 1
            },
            "name": "mapData",
            "excludes": {},
            "products": {
              "highmaps": 1
            },
            "description": "A map data object containing a `path` definition and optionally additional\nproperties to join in the data as per the `joinBy` option."
          },
          "subtree": {}
        },
        "mfi": {
          "meta": {
            "types": {},
            "name": "mfi",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `MFI` series. If the [type](#series.mfi.type) option is not specified, it\nis inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.mfi.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `mfi` series are defined in\n   [plotOptions.mfi](plotOptions.mfi).\n3. Options for one single series are given in\n   [the series instance array](series.mfi).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        mfi: {\n            // shared options for all mfi series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'mfi'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.mfi"
          },
          "subtree": {}
        },
        "momentum": {
          "meta": {
            "types": {},
            "name": "momentum",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `Momentum` series. If the [type](#series.momentum.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.momentum.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `momentum` series are defined in\n   [plotOptions.momentum](plotOptions.momentum).\n3. Options for one single series are given in\n   [the series instance array](series.momentum).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        momentum: {\n            // shared options for all momentum series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'momentum'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.momentum"
          },
          "subtree": {}
        },
        "name": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "name",
            "excludes": {},
            "description": "The name of the series as shown in the legend, tooltip etc."
          },
          "subtree": {}
        },
        "natr": {
          "meta": {
            "types": {},
            "name": "natr",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `NATR` series. If the [type](#series.natr.type) option is not specified, it\nis inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.natr.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `natr` series are defined in\n   [plotOptions.natr](plotOptions.natr).\n3. Options for one single series are given in\n   [the series instance array](series.natr).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        natr: {\n            // shared options for all natr series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'natr'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.natr"
          },
          "subtree": {}
        },
        "pc": {
          "meta": {
            "types": {},
            "name": "pc",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A Price channel indicator. If the [type](#series.pc.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.pc.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `pc` series are defined in\n   [plotOptions.pc](plotOptions.pc).\n3. Options for one single series are given in\n   [the series instance array](series.pc).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        pc: {\n            // shared options for all pc series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'pc'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.pc"
          },
          "subtree": {}
        },
        "pivotpoints": {
          "meta": {
            "types": {},
            "name": "pivotpoints",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A pivot points indicator. If the [type](#series.pivotpoints.type) option is\nnot specified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.pivotpoints.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `pivotpoints` series are defined in\n   [plotOptions.pivotpoints](plotOptions.pivotpoints).\n3. Options for one single series are given in\n   [the series instance array](series.pivotpoints).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        pivotpoints: {\n            // shared options for all pivotpoints series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'pivotpoints'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.pivotpoints"
          },
          "subtree": {}
        },
        "ppo": {
          "meta": {
            "types": {},
            "name": "ppo",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `Percentage Price Oscillator` series. If the [type](#series.ppo.type)\noption is not specified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.ppo.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `ppo` series are defined in\n   [plotOptions.ppo](plotOptions.ppo).\n3. Options for one single series are given in\n   [the series instance array](series.ppo).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        ppo: {\n            // shared options for all ppo series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'ppo'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.ppo"
          },
          "subtree": {}
        },
        "priceenvelopes": {
          "meta": {
            "types": {},
            "name": "priceenvelopes",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A price envelopes indicator. If the [type](#series.priceenvelopes.type)\noption is not specified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.priceenvelopes.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `priceenvelopes` series are defined in\n   [plotOptions.priceenvelopes](plotOptions.priceenvelopes).\n3. Options for one single series are given in\n   [the series instance array](series.priceenvelopes).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        priceenvelopes: {\n            // shared options for all priceenvelopes series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'priceenvelopes'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.priceenvelopes"
          },
          "subtree": {}
        },
        "psar": {
          "meta": {
            "types": {},
            "name": "psar",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `PSAR` series. If the [type](#series.psar.type) option is not specified, it\nis inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.psar.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `psar` series are defined in\n   [plotOptions.psar](plotOptions.psar).\n3. Options for one single series are given in\n   [the series instance array](series.psar).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        psar: {\n            // shared options for all psar series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'psar'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.psar"
          },
          "subtree": {}
        },
        "roc": {
          "meta": {
            "types": {},
            "name": "roc",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `ROC` series. If the [type](#series.wma.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nRate of change indicator (ROC). The indicator value for each point\nis defined as:\n\n`(C - Cn) / Cn * 100`\n\nwhere: `C` is the close value of the point of the same x in the\nlinked series and `Cn` is the close value of the point `n` periods\nago. `n` is set through [period](#series.roc.params.period).\n\nThis series requires `linkedTo` option to be set.\n\nIn TypeScript the [type](series.roc.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `roc` series are defined in\n   [plotOptions.roc](plotOptions.roc).\n3. Options for one single series are given in\n   [the series instance array](series.roc).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        roc: {\n            // shared options for all roc series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'roc'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.roc"
          },
          "subtree": {}
        },
        "rsi": {
          "meta": {
            "types": {},
            "name": "rsi",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `RSI` series. If the [type](#series.rsi.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.rsi.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `rsi` series are defined in\n   [plotOptions.rsi](plotOptions.rsi).\n3. Options for one single series are given in\n   [the series instance array](series.rsi).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        rsi: {\n            // shared options for all rsi series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'rsi'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.rsi"
          },
          "subtree": {}
        },
        "sma": {
          "meta": {
            "types": {},
            "name": "sma",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `SMA` series. If the [type](#series.sma.type) option is not specified, it\nis inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.sma.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `sma` series are defined in\n   [plotOptions.sma](plotOptions.sma).\n3. Options for one single series are given in\n   [the series instance array](series.sma).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        sma: {\n            // shared options for all sma series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'sma'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.sma"
          },
          "subtree": {}
        },
        "stack": {
          "meta": {
            "types": {
              "number": 1,
              "string": 1
            },
            "name": "stack",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "This option allows grouping series in a stacked chart. The stack option\ncan be a string or anything else, as long as the grouped series' stack\noptions match each other after conversion into a string."
          },
          "subtree": {}
        },
        "stochastic": {
          "meta": {
            "types": {},
            "name": "stochastic",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A Stochastic indicator. If the [type](#series.stochastic.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.stochastic.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `stochastic` series are defined in\n   [plotOptions.stochastic](plotOptions.stochastic).\n3. Options for one single series are given in\n   [the series instance array](series.stochastic).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        stochastic: {\n            // shared options for all stochastic series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'stochastic'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.stochastic"
          },
          "subtree": {}
        },
        "supertrend": {
          "meta": {
            "types": {},
            "name": "supertrend",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `Supertrend indicator` series. If the [type](#series.supertrend.type)\noption is not specified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.supertrend.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `supertrend` series are defined in\n   [plotOptions.supertrend](plotOptions.supertrend).\n3. Options for one single series are given in\n   [the series instance array](series.supertrend).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        supertrend: {\n            // shared options for all supertrend series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'supertrend'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.supertrend"
          },
          "subtree": {}
        },
        "tema": {
          "meta": {
            "types": {},
            "name": "tema",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `TEMA` series. If the [type](#series.ema.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.tema.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `tema` series are defined in\n   [plotOptions.tema](plotOptions.tema).\n3. Options for one single series are given in\n   [the series instance array](series.tema).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        tema: {\n            // shared options for all tema series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'tema'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.ema"
          },
          "subtree": {}
        },
        "trendline": {
          "meta": {
            "types": {},
            "name": "trendline",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `TrendLine` series. If the [type](#series.trendline.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.trendline.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `trendline` series are defined in\n   [plotOptions.trendline](plotOptions.trendline).\n3. Options for one single series are given in\n   [the series instance array](series.trendline).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        trendline: {\n            // shared options for all trendline series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'trendline'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.trendline"
          },
          "subtree": {}
        },
        "trix": {
          "meta": {
            "types": {},
            "name": "trix",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `TRIX` series. If the [type](#series.tema.type) option is not specified, it\nis inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.trix.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `trix` series are defined in\n   [plotOptions.trix](plotOptions.trix).\n3. Options for one single series are given in\n   [the series instance array](series.trix).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        trix: {\n            // shared options for all trix series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'trix'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.tema"
          },
          "subtree": {}
        },
        "type": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "type",
            "excludes": {},
            "description": "The type of series, for example `line` or `column`. By default, the\nseries type is inherited from [chart.type](#chart.type), so unless the\nchart is a combination of series types, there is no need to set it on the\nseries level."
          },
          "subtree": {}
        },
        "vbp": {
          "meta": {
            "types": {},
            "name": "vbp",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `Volume By Price (VBP)` series. If the [type](#series.vbp.type) option is\nnot specified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.vbp.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `vbp` series are defined in\n   [plotOptions.vbp](plotOptions.vbp).\n3. Options for one single series are given in\n   [the series instance array](series.vbp).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        vbp: {\n            // shared options for all vbp series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'vbp'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.vbp"
          },
          "subtree": {}
        },
        "vwap": {
          "meta": {
            "types": {},
            "name": "vwap",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `Volume Weighted Average Price (VWAP)` series. If the\n[type](#series.vwap.type) option is not specified, it is inherited from\n[chart.type](#chart.type).\n\nIn TypeScript the [type](series.vwap.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `vwap` series are defined in\n   [plotOptions.vwap](plotOptions.vwap).\n3. Options for one single series are given in\n   [the series instance array](series.vwap).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        vwap: {\n            // shared options for all vwap series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'vwap'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.vwap"
          },
          "subtree": {}
        },
        "williamsr": {
          "meta": {
            "types": {},
            "name": "williamsr",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `Williams %R Oscillator` series. If the [type](#series.williamsr.type)\noption is not specified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.williamsr.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `williamsr` series are defined in\n   [plotOptions.williamsr](plotOptions.williamsr).\n3. Options for one single series are given in\n   [the series instance array](series.williamsr).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        williamsr: {\n            // shared options for all williamsr series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'williamsr'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.williamsr"
          },
          "subtree": {}
        },
        "wma": {
          "meta": {
            "types": {},
            "name": "wma",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `WMA` series. If the [type](#series.wma.type) option is not specified, it\nis inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.wma.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `wma` series are defined in\n   [plotOptions.wma](plotOptions.wma).\n3. Options for one single series are given in\n   [the series instance array](series.wma).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        wma: {\n            // shared options for all wma series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'wma'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.wma"
          },
          "subtree": {}
        },
        "xAxis": {
          "meta": {
            "types": {
              "number": 1,
              "string": 1
            },
            "name": "xAxis",
            "excludes": {},
            "default": "0",
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "When using dual or multiple x axes, this number defines which xAxis the\nparticular series is connected to. It refers to either the\n{@link #xAxis.id|axis id}\nor the index of the axis in the xAxis array, with 0 being the first."
          },
          "subtree": {}
        },
        "yAxis": {
          "meta": {
            "types": {
              "number": 1,
              "string": 1
            },
            "name": "yAxis",
            "excludes": {},
            "default": "0",
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "When using dual or multiple y axes, this number defines which yAxis the\nparticular series is connected to. It refers to either the\n{@link #yAxis.id|axis id}\nor the index of the axis in the yAxis array, with 0 being the first."
          },
          "subtree": {}
        },
        "zIndex": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "zIndex",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "Define the visual z index of the series."
          },
          "subtree": {}
        },
        "zigzag": {
          "meta": {
            "types": {},
            "name": "zigzag",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "A `Zig Zag` series. If the [type](#series.zigzag.type) option is not\nspecified, it is inherited from [chart.type](#chart.type).\n\nIn TypeScript the [type](series.zigzag.type) option must always be set.\n\nConfiguration options for the series are given in three levels:\n1. Options for all series in a chart are defined in the\n   [plotOptions.series](plotOptions.series) object.\n2. Options for all `zigzag` series are defined in\n   [plotOptions.zigzag](plotOptions.zigzag).\n3. Options for one single series are given in\n   [the series instance array](series.zigzag).\n\n```\nHighcharts.chart('container', {\n    plotOptions: {\n        series: {\n            // general options for all series\n        },\n        zigzag: {\n            // shared options for all zigzag series\n        }\n    },\n    series: [{\n        // specific options for this series instance\n        type: 'zigzag'\n    }]\n});\n```\n            ",
            "extends": "series,plotOptions.zigzag"
          },
          "subtree": {}
        },
        "states": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "states",
            "excludes": {},
            "validFor": {
              "bar": true,
              "bullet": true,
              "column": true,
              "columnpyramid": true,
              "columnrange": true,
              "venn": true
            }
          },
          "subtree": {
            "hover": {
              "meta": {
                "types": {},
                "name": "hover",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                }
              },
              "subtree": {}
            },
            "select": {
              "meta": {
                "types": {},
                "name": "select",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                }
              },
              "subtree": {}
            }
          }
        },
        "baseSeries": {
          "meta": {
            "types": {
              "number": 1,
              "string": 1
            },
            "name": "baseSeries",
            "excludes": {},
            "validFor": {
              "bellcurve": true,
              "histogram": true,
              "pareto": true
            },
            "description": "An integer identifying the index to use for the base series, or a string\nrepresenting the id of the series."
          },
          "subtree": {}
        },
        "marker": {
          "meta": {
            "types": {},
            "name": "marker",
            "excludes": {},
            "validFor": {
              "bubble": true,
              "mapbubble": true,
              "packedbubble": true
            }
          },
          "subtree": {}
        },
        "nodes": {
          "meta": {
            "types": {
              "array": "*"
            },
            "name": "nodes",
            "excludes": {},
            "validFor": {
              "dependencywheel": true,
              "networkgraph": true,
              "organization": true,
              "sankey": true
            },
            "products": {
              "highcharts": 1
            },
            "description": "A collection of options for the individual nodes. The nodes in a dependency\ndiagram are auto-generated instances of `Highcharts.Point`, but options can\nbe applied here and linked by the `id`.",
            "extends": "series.sankey.nodes"
          },
          "subtree": {}
        },
        "events": {
          "meta": {
            "types": {},
            "name": "events",
            "excludes": {},
            "validFor": {
              "gantt": true,
              "pie": true
            }
          },
          "subtree": {}
        }
      }
    },
    "stockTools": {
      "meta": {
        "types": {
          "object": 1
        },
        "name": "stockTools",
        "excludes": {},
        "products": {
          "highstock": 1
        },
        "description": "Configure the stockTools gui strings in the chart. Requires the\n[stockTools module]() to be loaded. For a description of the module\nand information on its features, see [Highcharts StockTools]()."
      },
      "subtree": {
        "gui": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "gui",
            "excludes": {},
            "description": "Definitions of buttons in Stock Tools GUI."
          },
          "subtree": {
            "buttons": {
              "meta": {
                "types": {
                  "array": "object"
                },
                "name": "buttons",
                "excludes": {},
                "default": "[\n 'indicators',\n  'separator',\n  'simpleShapes',\n  'lines',\n  'crookedLines',\n  'measure',\n  'advanced',\n  'toggleAnnotations',\n  'separator',\n  'verticalLabels',\n  'flags',\n  'separator',\n  'zoomChange',\n  'fullScreen',\n  'typeChange',\n  'separator',\n  'currentPriceIndicator',\n  'saveChart'\n ]",
                "description": "A collection of strings pointing to config options for the\ntoolbar items. Each name refers to unique key from definitions\nobject."
              },
              "subtree": {}
            },
            "className": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "className",
                "excludes": {},
                "default": "highcharts-bindings-wrapper",
                "description": "A CSS class name to apply to the stocktools' div,\nallowing unique CSS styling for each chart."
              },
              "subtree": {}
            },
            "definitions": {
              "meta": {
                "types": {
                  "object": 1
                },
                "name": "definitions",
                "excludes": {},
                "description": "An options object of the buttons definitions. Each name refers to\nunique key from buttons array."
              },
              "subtree": {
                "advanced": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "advanced",
                    "excludes": {}
                  },
                  "subtree": {
                    "fibonacci": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "fibonacci",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "fibonacci.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "items": {
                      "meta": {
                        "types": {
                          "array": "object"
                        },
                        "name": "items",
                        "excludes": {},
                        "default": "[\n  'fibonacci',\n  'pitchfork',\n  'parallelChannel'\n]",
                        "description": "A collection of strings pointing to config options for\nthe items."
                      },
                      "subtree": {}
                    },
                    "parallelChannel": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "parallelChannel",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "parallel-channel.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "pitchfork": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "pitchfork",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "pitchfork.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                },
                "crookedLines": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "crookedLines",
                    "excludes": {}
                  },
                  "subtree": {
                    "crooked3": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "crooked3",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "crooked-3.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "crooked5": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "crooked5",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "crooked-5.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "elliott3": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "elliott3",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "elliott-3.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "elliott5": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "elliott5",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "elliott-5.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "items": {
                      "meta": {
                        "types": {
                          "array": "object"
                        },
                        "name": "items",
                        "excludes": {},
                        "default": "[\n  'elliott3',\n  'elliott5',\n  'crooked3',\n  'crooked5'\n]",
                        "description": "A collection of strings pointing to config options for\nthe items."
                      },
                      "subtree": {}
                    }
                  }
                },
                "currentPriceIndicator": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "currentPriceIndicator",
                    "excludes": {}
                  },
                  "subtree": {
                    "symbol": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "symbol",
                        "excludes": {},
                        "default": "current-price-show.svg",
                        "description": "A predefined background symbol for the button."
                      },
                      "subtree": {}
                    }
                  }
                },
                "flags": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "flags",
                    "excludes": {}
                  },
                  "subtree": {
                    "flagCirclepin": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "flagCirclepin",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "flag-elipse.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "flagDiamondpin": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "flagDiamondpin",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "flag-diamond.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "flagSimplepin": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "flagSimplepin",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "flag-basic.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "flagSquarepin": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "flagSquarepin",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "flag-trapeze.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "items": {
                      "meta": {
                        "types": {
                          "array": "object"
                        },
                        "name": "items",
                        "excludes": {},
                        "default": "[\n  'flagCirclepin',\n  'flagDiamondpin',\n  'flagSquarepin',\n  'flagSimplepin'\n]",
                        "description": "A collection of strings pointing to config options for\nthe items."
                      },
                      "subtree": {}
                    }
                  }
                },
                "fullScreen": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "fullScreen",
                    "excludes": {}
                  },
                  "subtree": {
                    "symbol": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "symbol",
                        "excludes": {},
                        "default": "fullscreen.svg",
                        "description": "A predefined background symbol for the button."
                      },
                      "subtree": {}
                    }
                  }
                },
                "indicators": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "indicators",
                    "excludes": {}
                  },
                  "subtree": {
                    "symbol": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "symbol",
                        "excludes": {},
                        "default": "indicators.svg",
                        "description": "A predefined background symbol for the button."
                      },
                      "subtree": {}
                    }
                  }
                },
                "lines": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "lines",
                    "excludes": {}
                  },
                  "subtree": {
                    "arrowLine": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "arrowLine",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "arrow-line.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "arrowRay": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "arrowRay",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "arrow-ray.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "arrowSegment": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "arrowSegment",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "arrow-segment.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "horizontalLine": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "horizontalLine",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "horizontal-line.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "items": {
                      "meta": {
                        "types": {
                          "array": "object"
                        },
                        "name": "items",
                        "excludes": {},
                        "default": "[\n  'segment',\n  'arrowSegment',\n  'ray',\n  'arrowRay',\n  'line',\n  'arrowLine',\n  'horizontalLine',\n  'verticalLine'\n]",
                        "description": "A collection of strings pointing to config options for\nthe items."
                      },
                      "subtree": {}
                    },
                    "line": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "line",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "line.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "ray": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "ray",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "ray.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "segment": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "segment",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "segment.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "verticalLine": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "verticalLine",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "vertical-line.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                },
                "measure": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "measure",
                    "excludes": {}
                  },
                  "subtree": {
                    "items": {
                      "meta": {
                        "types": {
                          "array": "object"
                        },
                        "name": "items",
                        "excludes": {},
                        "default": "[\n  'measureXY',\n  'measureX',\n  'measureY'\n]",
                        "description": "A collection of strings pointing to config options for\nthe items."
                      },
                      "subtree": {}
                    },
                    "measureX": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "measureX",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "measure-x.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "measureXY": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "measureXY",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "measure-xy.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "measureY": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "measureY",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "measure-y.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                },
                "saveChart": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "saveChart",
                    "excludes": {}
                  },
                  "subtree": {
                    "symbol": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "symbol",
                        "excludes": {},
                        "default": "save-chart.svg",
                        "description": "A predefined background symbol for the button."
                      },
                      "subtree": {}
                    }
                  }
                },
                "separator": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "separator",
                    "excludes": {}
                  },
                  "subtree": {
                    "symbol": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "symbol",
                        "excludes": {},
                        "default": "separator.svg",
                        "description": "A predefined background symbol for the button."
                      },
                      "subtree": {}
                    }
                  }
                },
                "simpleShapes": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "simpleShapes",
                    "excludes": {}
                  },
                  "subtree": {
                    "circle": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "circle",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "circle.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "items": {
                      "meta": {
                        "types": {
                          "array": "object"
                        },
                        "name": "items",
                        "excludes": {},
                        "default": "[\n  'label',\n  'circle',\n  'rectangle'\n]",
                        "description": "A collection of strings pointing to config options for\nthe items."
                      },
                      "subtree": {}
                    },
                    "label": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "label",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "label.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "rectangle": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "rectangle",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "rectangle.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                },
                "toggleAnnotations": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "toggleAnnotations",
                    "excludes": {}
                  },
                  "subtree": {
                    "symbol": {
                      "meta": {
                        "types": {
                          "string": 1
                        },
                        "name": "symbol",
                        "excludes": {},
                        "default": "annotations-visible.svg",
                        "description": "A predefined background symbol for the button."
                      },
                      "subtree": {}
                    }
                  }
                },
                "typeChange": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "typeChange",
                    "excludes": {}
                  },
                  "subtree": {
                    "items": {
                      "meta": {
                        "types": {
                          "array": "object"
                        },
                        "name": "items",
                        "excludes": {},
                        "default": "[\n  'typeOHLC',\n  'typeLine',\n  'typeCandlestick'\n]",
                        "description": "A collection of strings pointing to config options for\nthe items."
                      },
                      "subtree": {}
                    },
                    "typeCandlestick": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "typeCandlestick",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "series-candlestick.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "typeLine": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "typeLine",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "series-line.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "typeOHLC": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "typeOHLC",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "series-ohlc.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                },
                "verticalLabels": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "verticalLabels",
                    "excludes": {}
                  },
                  "subtree": {
                    "items": {
                      "meta": {
                        "types": {
                          "array": "object"
                        },
                        "name": "items",
                        "excludes": {},
                        "default": "[\n  'verticalCounter',\n  'verticalLabel',\n  'verticalArrow'\n]",
                        "description": "A collection of strings pointing to config options for\nthe items."
                      },
                      "subtree": {}
                    },
                    "verticalArrow": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "verticalArrow",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "vertical-arrow.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "verticalCounter": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "verticalCounter",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "vertical-counter.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "verticalLabel": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "verticalLabel",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "vertical-label.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                },
                "zoomChange": {
                  "meta": {
                    "types": {
                      "*": 1
                    },
                    "name": "zoomChange",
                    "excludes": {}
                  },
                  "subtree": {
                    "items": {
                      "meta": {
                        "types": {
                          "array": "object"
                        },
                        "name": "items",
                        "excludes": {},
                        "default": "[\n  'zoomX',\n  'zoomY',\n  'zoomXY'\n]",
                        "description": "A collection of strings pointing to config options for\nthe items."
                      },
                      "subtree": {}
                    },
                    "zoomX": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "zoomX",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "zoom-x.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "zoomXY": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "zoomXY",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "zoom-xy.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    },
                    "zoomY": {
                      "meta": {
                        "types": {
                          "*": 1
                        },
                        "name": "zoomY",
                        "excludes": {}
                      },
                      "subtree": {
                        "symbol": {
                          "meta": {
                            "types": {
                              "string": 1
                            },
                            "name": "symbol",
                            "excludes": {},
                            "default": "zoom-y.svg",
                            "description": "A predefined background symbol for the button."
                          },
                          "subtree": {}
                        }
                      }
                    }
                  }
                }
              }
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": "true",
                "description": "Enable or disable the stockTools gui."
              },
              "subtree": {}
            },
            "iconsURL": {
              "meta": {
                "types": {},
                "name": "iconsURL",
                "excludes": {},
                "description": "Path where Highcharts will look for icons. Change this to use\nicons from a different server.\n\nSince 7.1.3 use [iconsURL](#navigation.iconsURL) for popup and\nstock tools."
              },
              "subtree": {}
            },
            "toolbarClassName": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "toolbarClassName",
                "excludes": {},
                "default": "'stocktools-toolbar'",
                "description": "A CSS class name to apply to the container of buttons,\nallowing unique CSS styling for each chart."
              },
              "subtree": {}
            }
          }
        }
      }
    },
    "subtitle": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "subtitle",
        "excludes": {},
        "description": "The chart's subtitle. This can be used both to display a subtitle below\nthe main title, and to display random text anywhere in the chart. The\nsubtitle can be updated after chart initialization through the\n`Chart.setTitle` method."
      },
      "subtree": {
        "align": {
          "meta": {
            "types": {
              "highcharts.alignvalue": 1
            },
            "name": "align",
            "excludes": {},
            "default": "center",
            "description": "The horizontal alignment of the subtitle. Can be one of \"left\",\n \"center\" and \"right\"."
          },
          "subtree": {}
        },
        "floating": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "floating",
            "excludes": {},
            "default": "false",
            "description": "When the subtitle is floating, the plot area will not move to make\nspace for it."
          },
          "subtree": {}
        },
        "style": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "style",
            "excludes": {},
            "default": "{\"color\": \"#666666\"}",
            "description": "CSS styles for the title.\n\nIn styled mode, the subtitle style is given in the\n`.highcharts-subtitle` class."
          },
          "subtree": {}
        },
        "text": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "text",
            "excludes": {},
            "default": "",
            "description": "The subtitle of the chart."
          },
          "subtree": {}
        },
        "useHTML": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "useHTML",
            "excludes": {},
            "default": "false",
            "description": "Whether to\n[use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\nto render the text."
          },
          "subtree": {}
        },
        "verticalAlign": {
          "meta": {
            "types": {
              "highcharts.verticalalignvalue": 1
            },
            "name": "verticalAlign",
            "excludes": {},
            "description": "The vertical alignment of the title. Can be one of `\"top\"`,\n`\"middle\"` and `\"bottom\"`. When middle, the subtitle behaves as\nfloating."
          },
          "subtree": {}
        },
        "widthAdjust": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "widthAdjust",
            "excludes": {},
            "default": -44,
            "description": "Adjustment made to the subtitle width, normally to reserve space\nfor the exporting burger menu."
          },
          "subtree": {}
        },
        "x": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "x",
            "excludes": {},
            "default": "0",
            "description": "The x position of the subtitle relative to the alignment within\n`chart.spacingLeft` and `chart.spacingRight`."
          },
          "subtree": {}
        },
        "y": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "y",
            "excludes": {},
            "description": "The y position of the subtitle relative to the alignment within\n`chart.spacingTop` and `chart.spacingBottom`. By default the subtitle\nis laid out below the title unless the title is floating."
          },
          "subtree": {}
        }
      }
    },
    "time": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "time",
        "excludes": {},
        "description": "Time options that can apply globally or to individual charts. These\nsettings affect how `datetime` axes are laid out, how tooltips are\nformatted, how series\n[pointIntervalUnit](#plotOptions.series.pointIntervalUnit) works and how\nthe Highstock range selector handles time.\n\nThe common use case is that all charts in the same Highcharts object\nshare the same time settings, in which case the global settings are set\nusing `setOptions`.\n\n```js\n// Apply time settings globally\nHighcharts.setOptions({\n    time: {\n        timezone: 'Europe/London'\n    }\n});\n// Apply time settings by instance\nvar chart = Highcharts.chart('container', {\n    time: {\n        timezone: 'America/New_York'\n    },\n    series: [{\n        data: [1, 4, 3, 5]\n    }]\n});\n\n// Use the Time object\nconsole.log(\n       'Current time in New York',\n       chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n);\n```\n\nSince v6.0.5, the time options were moved from the `global` obect to the\n`time` object, and time options can be set on each individual chart."
      },
      "subtree": {
        "Date": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "Date",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "A custom `Date` class for advanced date handling. For example,\n[JDate](https://github.com/tahajahangir/jdate) can be hooked in to\nhandle Jalali dates."
          },
          "subtree": {}
        },
        "getTimezoneOffset": {
          "meta": {
            "types": {},
            "name": "getTimezoneOffset",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "A callback to return the time zone offset for a given datetime. It\ntakes the timestamp in terms of milliseconds since January 1 1970,\nand returns the timezone offset in minutes. This provides a hook\nfor drawing time based charts in specific time zones using their\nlocal DST crossover dates, with the help of external libraries."
          },
          "subtree": {}
        },
        "timezone": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "timezone",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Requires [moment.js](http://momentjs.com/). If the timezone option\nis specified, it creates a default\n[getTimezoneOffset](#time.getTimezoneOffset) function that looks\nup the specified timezone in moment.js. If moment.js is not included,\nthis throws a Highcharts error in the console, but does not crash the\nchart."
          },
          "subtree": {}
        },
        "timezoneOffset": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "timezoneOffset",
            "excludes": {},
            "default": 0,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "The timezone offset in minutes. Positive values are west, negative\nvalues are east of UTC, as in the ECMAScript\n[getTimezoneOffset](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)\nmethod. Use this to display UTC based data in a predefined time zone."
          },
          "subtree": {}
        },
        "useUTC": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "useUTC",
            "excludes": {},
            "default": true,
            "description": "Whether to use UTC time for axis scaling, tickmark placement and\ntime display in `Highcharts.dateFormat`. Advantages of using UTC\nis that the time displays equally regardless of the user agent's\ntime zone settings. Local time can be used when the data is loaded\nin real time or when correct Daylight Saving Time transitions are\nrequired."
          },
          "subtree": {}
        }
      }
    },
    "title": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "title",
        "excludes": {},
        "description": "The chart's main title."
      },
      "subtree": {
        "align": {
          "meta": {
            "types": {
              "highcharts.alignvalue": 1
            },
            "name": "align",
            "excludes": {},
            "default": "center",
            "description": "The horizontal alignment of the title. Can be one of \"left\", \"center\"\nand \"right\"."
          },
          "subtree": {}
        },
        "floating": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "floating",
            "excludes": {},
            "default": "false",
            "description": "When the title is floating, the plot area will not move to make space\nfor it."
          },
          "subtree": {}
        },
        "margin": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "margin",
            "excludes": {},
            "default": 15,
            "description": "The margin between the title and the plot area, or if a subtitle\nis present, the margin between the subtitle and the plot area."
          },
          "subtree": {}
        },
        "style": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "style",
            "excludes": {},
            "description": "CSS styles for the title. Use this for font styling, but use `align`,\n`x` and `y` for text alignment.\n\nIn styled mode, the title style is given in the `.highcharts-title`\nclass."
          },
          "subtree": {}
        },
        "text": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "text",
            "excludes": {},
            "default": "Chart title",
            "description": "The title of the chart. To disable the title, set the `text` to\n`undefined`."
          },
          "subtree": {}
        },
        "useHTML": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "useHTML",
            "excludes": {},
            "default": "false",
            "description": "Whether to\n[use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\nto render the text."
          },
          "subtree": {}
        },
        "verticalAlign": {
          "meta": {
            "types": {
              "highcharts.verticalalignvalue": 1
            },
            "name": "verticalAlign",
            "excludes": {},
            "description": "The vertical alignment of the title. Can be one of `\"top\"`,\n`\"middle\"` and `\"bottom\"`. When a value is given, the title behaves\nas if [floating](#title.floating) were `true`."
          },
          "subtree": {}
        },
        "widthAdjust": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "widthAdjust",
            "excludes": {},
            "default": -44,
            "description": "Adjustment made to the title width, normally to reserve space for\nthe exporting burger menu."
          },
          "subtree": {}
        },
        "x": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "x",
            "excludes": {},
            "default": "0",
            "description": "The x position of the title relative to the alignment within\n`chart.spacingLeft` and `chart.spacingRight`."
          },
          "subtree": {}
        },
        "y": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "y",
            "excludes": {},
            "description": "The y position of the title relative to the alignment within\n[chart.spacingTop](#chart.spacingTop) and [chart.spacingBottom](#chart.spacingBottom). By default it depends on the font size."
          },
          "subtree": {}
        }
      }
    },
    "tooltip": {
      "meta": {
        "types": {
          "*": 1
        },
        "name": "tooltip",
        "excludes": {},
        "description": "Options for the tooltip that appears when the user hovers over a\nseries or point."
      },
      "subtree": {
        "animation": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "animation",
            "excludes": {},
            "default": "true",
            "description": "Enable or disable animation of the tooltip."
          },
          "subtree": {}
        },
        "backgroundColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "backgroundColor",
            "excludes": {},
            "description": "The background color or gradient for the tooltip.\n\nIn styled mode, the stroke width is set in the\n`.highcharts-tooltip-box` class."
          },
          "subtree": {}
        },
        "borderColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "borderColor",
            "excludes": {},
            "description": "The color of the tooltip border. When `undefined`, the border takes\nthe color of the corresponding series or point."
          },
          "subtree": {}
        },
        "borderRadius": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "borderRadius",
            "excludes": {},
            "default": 3,
            "description": "The radius of the rounded border corners."
          },
          "subtree": {}
        },
        "borderWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "borderWidth",
            "excludes": {},
            "default": 1,
            "description": "The pixel width of the tooltip border.\n\nIn styled mode, the stroke width is set in the\n`.highcharts-tooltip-box` class."
          },
          "subtree": {}
        },
        "changeDecimals": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "changeDecimals",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "How many decimals to show for the `point.change` value when the\n`series.compare` option is set. This is overridable in each series'\ntooltip options object. The default is to preserve all decimals."
          },
          "subtree": {}
        },
        "className": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "className",
            "excludes": {},
            "description": "A CSS class name to apply to the tooltip's container div,\nallowing unique CSS styling for each chart."
          },
          "subtree": {}
        },
        "crosshairs": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "crosshairs",
            "excludes": {},
            "default": "true",
            "description": "Since 4.1, the crosshair definitions are moved to the Axis object\nin order for a better separation from the tooltip. See\n[xAxis.crosshair](#xAxis.crosshair)<a>.</a>"
          },
          "subtree": {}
        },
        "dateTimeLabelFormats": {
          "meta": {
            "types": {
              "highcharts.dictionary.<string>": 1
            },
            "name": "dateTimeLabelFormats",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "For series on a datetime axes, the date format in the tooltip's\nheader will by default be guessed based on the closest data points.\nThis member gives the default string representations used for\neach unit. For an overview of the replacement codes, see\n[dateFormat](/class-reference/Highcharts#dateFormat)."
          },
          "subtree": {
            "day": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "day",
                "excludes": {},
                "default": "%A, %b %e, %Y"
              },
              "subtree": {}
            },
            "hour": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "hour",
                "excludes": {},
                "default": "%A, %b %e, %H:%M"
              },
              "subtree": {}
            },
            "millisecond": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "millisecond",
                "excludes": {},
                "default": "%A, %b %e, %H:%M:%S.%L"
              },
              "subtree": {}
            },
            "minute": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "minute",
                "excludes": {},
                "default": "%A, %b %e, %H:%M"
              },
              "subtree": {}
            },
            "month": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "month",
                "excludes": {},
                "default": "%B %Y"
              },
              "subtree": {}
            },
            "second": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "second",
                "excludes": {},
                "default": "%A, %b %e, %H:%M:%S"
              },
              "subtree": {}
            },
            "week": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "week",
                "excludes": {},
                "default": "Week from %A, %b %e, %Y"
              },
              "subtree": {}
            },
            "year": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "year",
                "excludes": {},
                "default": "%Y"
              },
              "subtree": {}
            }
          }
        },
        "distance": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "distance",
            "excludes": {},
            "default": "16",
            "description": "Distance from point to tooltip in pixels."
          },
          "subtree": {}
        },
        "enabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "enabled",
            "excludes": {},
            "default": true,
            "description": "Enable or disable the tooltip."
          },
          "subtree": {}
        },
        "followPointer": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "followPointer",
            "excludes": {},
            "description": "Whether the tooltip should follow the mouse as it moves across\ncolumns, pie slices and other point types with an extent.\nBy default it behaves this way for pie, polygon, map, sankey\nand wordcloud series by override in the `plotOptions`\nfor those series types.\n\nFor touch moves to behave the same way, [followTouchMove](#tooltip.followTouchMove) must be `true` also."
          },
          "subtree": {}
        },
        "followTouchMove": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "followTouchMove",
            "excludes": {},
            "description": "Whether the tooltip should update as the finger moves on a touch\ndevice. If this is `true` and [chart.panning](#chart.panning) is\nset,`followTouchMove` will take over one-finger touches, so the user\nneeds to use two fingers for zooming and panning.\n\nNote the difference to [followPointer](#tooltip.followPointer) that\nonly defines the _position_ of the tooltip. If `followPointer` is\nfalse in for example a column series, the tooltip will show above or\nbelow the column, but as `followTouchMove` is true, the tooltip will\njump from column to column as the user swipes across the plot area."
          },
          "subtree": {}
        },
        "footerFormat": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "footerFormat",
            "excludes": {},
            "default": "",
            "description": "A string to append to the tooltip format."
          },
          "subtree": {}
        },
        "formatter": {
          "meta": {
            "types": {
              "highcharts.tooltipformattercallbackfunction": 1
            },
            "name": "formatter",
            "excludes": {},
            "description": "Callback function to format the text of the tooltip from scratch. In\ncase of single or [shared](#tooltip.shared) tooltips, a string should\nbe returned. In case of [split](#tooltip.split) tooltips, it should\nreturn an array where the first item is the header, and subsequent\nitems are mapped to the points. Return `false` to disable tooltip for\na specific point on series.\n\nA subset of HTML is supported. Unless `useHTML` is true, the HTML of\nthe tooltip is parsed and converted to SVG, therefore this isn't a\ncomplete HTML renderer. The following tags are supported: `<b>`,\n`<strong>`, `<i>`, `<em>`, `<br/>`, `<span>`. Spans can be styled\nwith a `style` attribute, but only text-related CSS that is shared\nwith SVG is handled.\n\nThe available data in the formatter differ a bit depending on whether\nthe tooltip is shared or split, or belongs to a single point. In a\nshared/split tooltip, all properties except `x`, which is common for\nall points, are kept in an array, `this.points`.\n\nAvailable data are:\n\n<dl>\n\n<dt>this.percentage (not shared) / this.points[i].percentage (shared)\n</dt>\n\n<dd>Stacked series and pies only. The point's percentage of the\ntotal.\n</dd>\n\n<dt>this.point (not shared) / this.points[i].point (shared)</dt>\n\n<dd>The point object. The point name, if defined, is available\nthrough `this.point.name`.</dd>\n\n<dt>this.points</dt>\n\n<dd>In a shared tooltip, this is an array containing all other\nproperties for each point.</dd>\n\n<dt>this.series (not shared) / this.points[i].series (shared)</dt>\n\n<dd>The series object. The series name is available through\n`this.series.name`.</dd>\n\n<dt>this.total (not shared) / this.points[i].total (shared)</dt>\n\n<dd>Stacked series only. The total value at this point's x value.\n</dd>\n\n<dt>this.x</dt>\n\n<dd>The x value. This property is the same regardless of the tooltip\nbeing shared or not.</dd>\n\n<dt>this.y (not shared) / this.points[i].y (shared)</dt>\n\n<dd>The y value.</dd>\n\n</dl>"
          },
          "subtree": {}
        },
        "headerFormat": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "headerFormat",
            "excludes": {},
            "default": "<span style=\"font-size: 10px\">{point.key}</span><br/>",
            "description": "The HTML of the tooltip header line. Variables are enclosed by\ncurly brackets. Available variables are `point.key`, `series.name`,\n`series.color` and other members from the `point` and `series`\nobjects. The `point.key` variable contains the category name, x\nvalue or datetime string depending on the type of axis. For datetime\naxes, the `point.key` date format can be set using\n`tooltip.xDateFormat`."
          },
          "subtree": {}
        },
        "headerShape": {
          "meta": {
            "types": {
              "highcharts.tooltipshapevalue": 1
            },
            "name": "headerShape",
            "excludes": {},
            "default": "callout",
            "description": "The name of a symbol to use for the border around the tooltip\nheader. Applies only when [tooltip.split](#tooltip.split) is\nenabled.\n\nCustom callbacks for symbol path generation can also be added to\n`Highcharts.SVGRenderer.prototype.symbols` the same way as for\n[series.marker.symbol](plotOptions.line.marker.symbol)."
          },
          "subtree": {}
        },
        "hideDelay": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "hideDelay",
            "excludes": {},
            "default": "500",
            "description": "The number of milliseconds to wait until the tooltip is hidden when\nmouse out from a point or chart."
          },
          "subtree": {}
        },
        "nullFormat": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "nullFormat",
            "excludes": {},
            "description": "The HTML of the null point's line in the tooltip. Works analogously\nto [pointFormat](#tooltip.pointFormat)."
          },
          "subtree": {}
        },
        "nullFormatter": {
          "meta": {
            "types": {
              "highcharts.tooltipformattercallbackfunction": 1
            },
            "name": "nullFormatter",
            "excludes": {},
            "description": "Callback function to format the text of the tooltip for\nvisible null points.\nWorks analogously to [formatter](#tooltip.formatter)."
          },
          "subtree": {}
        },
        "outside": {
          "meta": {
            "types": {
              "boolean": 1,
              "undefined": 1
            },
            "name": "outside",
            "excludes": {},
            "default": "undefined",
            "description": "Whether to allow the tooltip to render outside the chart's SVG\nelement box. By default (`false`), the tooltip is rendered within the\nchart's SVG element, which results in the tooltip being aligned\ninside the chart area. For small charts, this may result in clipping\nor overlapping. When `true`, a separate SVG element is created and\noverlaid on the page, allowing the tooltip to be aligned inside the\npage itself.\n\nDefaults to `true` if `chart.scrollablePlotArea` is activated,\notherwise `false`."
          },
          "subtree": {}
        },
        "padding": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "padding",
            "excludes": {},
            "default": 8,
            "description": "Padding inside the tooltip, in pixels."
          },
          "subtree": {}
        },
        "pointFormat": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "pointFormat",
            "excludes": {},
            "default": "<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>",
            "description": "The HTML of the point's line in the tooltip. Variables are enclosed\nby curly brackets. Available variables are point.x, point.y, series.\nname and series.color and other properties on the same form.\nFurthermore, `point.y` can be extended by the `tooltip.valuePrefix`\nand `tooltip.valueSuffix` variables. This can also be overridden for\neach series, which makes it a good hook for displaying units.\n\nIn styled mode, the dot is colored by a class name rather\nthan the point color."
          },
          "subtree": {}
        },
        "pointFormatter": {
          "meta": {
            "types": {
              "highcharts.formattercallbackfunction.<highcharts.point>": 1
            },
            "name": "pointFormatter",
            "excludes": {},
            "description": "A callback function for formatting the HTML output for a single point\nin the tooltip. Like the `pointFormat` string, but with more\nflexibility."
          },
          "subtree": {}
        },
        "positioner": {
          "meta": {
            "types": {
              "highcharts.tooltippositionercallbackfunction": 1
            },
            "name": "positioner",
            "excludes": {},
            "description": "A callback function to place the tooltip in a default position. The\ncallback receives three parameters: `labelWidth`, `labelHeight` and\n`point`, where point contains values for `plotX` and `plotY` telling\nwhere the reference point is in the plot area. Add `chart.plotLeft`\nand `chart.plotTop` to get the full coordinates.\n\nSince v7, when [tooltip.split](#tooltip.split) option is enabled,\npositioner is called for each of the boxes separately, including\nxAxis header. xAxis header is not a point, instead `point` argument\ncontains info:\n`{ plotX: Number, plotY: Number, isHeader: Boolean }`\n\n\nThe return should be an object containing x and y values, for example\n`{ x: 100, y: 100 }`."
          },
          "subtree": {}
        },
        "shadow": {
          "meta": {
            "types": {
              "boolean": 1,
              "highcharts.shadowoptionsobject": 1
            },
            "name": "shadow",
            "excludes": {},
            "default": true,
            "description": "Whether to apply a drop shadow to the tooltip."
          },
          "subtree": {}
        },
        "shape": {
          "meta": {
            "types": {
              "highcharts.tooltipshapevalue": 1
            },
            "name": "shape",
            "excludes": {},
            "default": "callout",
            "description": "The name of a symbol to use for the border around the tooltip. Can\nbe one of: `\"callout\"`, `\"circle\"`, or `\"square\"`. When\n[tooltip.split](#tooltip.split)\noption is enabled, shape is applied to all boxes except header, which\nis controlled by\n[tooltip.headerShape](#tooltip.headerShape).\n\nCustom callbacks for symbol path generation can also be added to\n`Highcharts.SVGRenderer.prototype.symbols` the same way as for\n[series.marker.symbol](plotOptions.line.marker.symbol)."
          },
          "subtree": {}
        },
        "shared": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "shared",
            "excludes": {},
            "default": "false",
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "When the tooltip is shared, the entire plot area will capture mouse\nmovement or touch events. Tooltip texts for series types with ordered\ndata (not pie, scatter, flags etc) will be shown in a single bubble.\nThis is recommended for single series charts and for tablet/mobile\noptimized charts.\n\nSee also [tooltip.split](#tooltip.split), that is better suited for\ncharts with many series, especially line-type series. The\n`tooltip.split` option takes precedence over `tooltip.shared`."
          },
          "subtree": {}
        },
        "snap": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "snap",
            "excludes": {},
            "default": "10/25",
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "Proximity snap for graphs or single points. It defaults to 10 for\nmouse-powered devices and 25 for touch devices.\n\nNote that in most cases the whole plot area captures the mouse\nmovement, and in these cases `tooltip.snap` doesn't make sense. This\napplies when [stickyTracking](#plotOptions.series.stickyTracking)\nis `true` (default) and when the tooltip is [shared](#tooltip.shared)\nor [split](#tooltip.split)."
          },
          "subtree": {}
        },
        "split": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "split",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "Split the tooltip into one label per series, with the header close\nto the axis. This is recommended over [shared](#tooltip.shared)\ntooltips for charts with multiple line series, generally making them\neasier to read. This option takes precedence over `tooltip.shared`."
          },
          "subtree": {}
        },
        "style": {
          "meta": {
            "types": {
              "highcharts.cssobject": 1
            },
            "name": "style",
            "excludes": {},
            "default": "{\"color\": \"#333333\", \"cursor\": \"default\", \"fontSize\": \"12px\", \"pointerEvents\": \"none\", \"whiteSpace\": \"nowrap\"}",
            "description": "CSS styles for the tooltip. The tooltip can also be styled through\nthe CSS class `.highcharts-tooltip`.\n\nNote that the default `pointerEvents` style makes the tooltip ignore\nmouse events, so in order to use clickable tooltips, this value must\nbe set to `auto`."
          },
          "subtree": {}
        },
        "useHTML": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "useHTML",
            "excludes": {},
            "default": "false",
            "description": "Use HTML to render the contents of the tooltip instead of SVG. Using\nHTML allows advanced formatting like tables and images in the\ntooltip. It is also recommended for rtl languages as it works around\nrtl bugs in early Firefox."
          },
          "subtree": {}
        },
        "valueDecimals": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "valueDecimals",
            "excludes": {},
            "description": "How many decimals to show in each series' y value. This is\noverridable in each series' tooltip options object. The default is to\npreserve all decimals."
          },
          "subtree": {}
        },
        "valuePrefix": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "valuePrefix",
            "excludes": {},
            "description": "A string to prepend to each series' y value. Overridable in each\nseries' tooltip options object."
          },
          "subtree": {}
        },
        "valueSuffix": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "valueSuffix",
            "excludes": {},
            "description": "A string to append to each series' y value. Overridable in each\nseries' tooltip options object."
          },
          "subtree": {}
        },
        "xDateFormat": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "xDateFormat",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "The format for the date in the tooltip header if the X axis is a\ndatetime axis. The default is a best guess based on the smallest\ndistance between points in the chart."
          },
          "subtree": {}
        }
      }
    },
    "xAxis": {
      "meta": {
        "types": {
          "array": "xAxis"
        },
        "name": "xAxis",
        "excludes": {},
        "description": "The X axis or category axis. Normally this is the horizontal axis,\nthough if the chart is inverted this is the vertical axis. In case of\nmultiple axes, the xAxis node is an array of configuration objects.\n\nSee the [Axis class](/class-reference/Highcharts.Axis) for programmatic\naccess to the axis."
      },
      "subtree": {
        "accessibility": {
          "meta": {
            "types": {
              "object": 1
            },
            "name": "accessibility",
            "excludes": {},
            "description": "Accessibility options for an axis. Requires the accessibility module."
          },
          "subtree": {
            "description": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "description",
                "excludes": {},
                "default": "undefined",
                "description": "Description for an axis to expose to screen reader users."
              },
              "subtree": {}
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": "undefined",
                "description": "Enable axis accessibility features, including axis information in the\nscreen reader information region. If this is disabled on the xAxis, the\nx values are not exposed to screen readers for the individual data points\nby default."
              },
              "subtree": {}
            },
            "rangeDescription": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "rangeDescription",
                "excludes": {},
                "default": "undefined",
                "description": "Range description for an axis. Overrides the default range description.\nSet to empty to disable range description for this axis."
              },
              "subtree": {}
            }
          }
        },
        "alignTicks": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "alignTicks",
            "excludes": {},
            "default": "true",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "When using multiple axis, the ticks of two or more opposite axes\nwill automatically be aligned by adding ticks to the axis or axes\nwith the least ticks, as if `tickAmount` were specified.\n\nThis can be prevented by setting `alignTicks` to false. If the grid\nlines look messy, it's a good idea to hide them for the secondary\naxis by setting `gridLineWidth` to 0.\n\nIf `startOnTick` or `endOnTick` in an Axis options are set to false,\nthen the `alignTicks ` will be disabled for the Axis.\n\nDisabled for logarithmic axes."
          },
          "subtree": {}
        },
        "allowDecimals": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "allowDecimals",
            "excludes": {},
            "default": "true",
            "description": "Whether to allow decimals in this axis' ticks. When counting\nintegers, like persons or hits on a web page, decimals should\nbe avoided in the labels."
          },
          "subtree": {}
        },
        "alternateGridColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "alternateGridColor",
            "excludes": {},
            "description": "When using an alternate grid color, a band is painted across the\nplot area between every other grid line."
          },
          "subtree": {}
        },
        "breaks": {
          "meta": {
            "types": {
              "array": "*"
            },
            "name": "breaks",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "An array defining breaks in the axis, the sections defined will be\nleft out and all the points shifted closer to each other."
          },
          "subtree": {
            "breakSize": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "breakSize",
                "excludes": {},
                "default": "0",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "A number indicating how much space should be left between the start\nand the end of the break. The break size is given in axis units,\nso for instance on a `datetime` axis, a break size of 3600000 would\nindicate the equivalent of an hour."
              },
              "subtree": {}
            },
            "from": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "from",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "The point where the break starts."
              },
              "subtree": {}
            },
            "repeat": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "repeat",
                "excludes": {},
                "default": "0",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "Defines an interval after which the break appears again. By default\nthe breaks do not repeat."
              },
              "subtree": {}
            },
            "to": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "to",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "The point where the break ends."
              },
              "subtree": {}
            }
          }
        },
        "categories": {
          "meta": {
            "types": {
              "array": "string"
            },
            "name": "categories",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "gantt": 1
            },
            "description": "If categories are present for the xAxis, names are used instead of\nnumbers for that axis. Since Highcharts 3.0, categories can also\nbe extracted by giving each point a [name](#series.data) and setting\naxis [type](#xAxis.type) to `category`. However, if you have multiple\nseries, best practice remains defining the `categories` array.\n\nExample:\n\n<pre>categories: ['Apples', 'Bananas', 'Oranges']</pre>"
          },
          "subtree": {}
        },
        "ceiling": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "ceiling",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "The highest allowed value for automatically computed axis extremes."
          },
          "subtree": {}
        },
        "className": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "className",
            "excludes": {},
            "description": "A class name that opens for styling the axis by CSS, especially in\nHighcharts styled mode. The class name is applied to group elements\nfor the grid, axis elements and labels."
          },
          "subtree": {}
        },
        "crosshair": {
          "meta": {
            "types": {
              "boolean": 1,
              "*": 1
            },
            "name": "crosshair",
            "excludes": {},
            "default": "false",
            "description": "Configure a crosshair that follows either the mouse pointer or the\nhovered point.\n\nIn styled mode, the crosshairs are styled in the\n`.highcharts-crosshair`, `.highcharts-crosshair-thin` or\n`.highcharts-xaxis-category` classes."
          },
          "subtree": {
            "className": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "className",
                "excludes": {},
                "description": "A class name for the crosshair, especially as a hook for styling."
              },
              "subtree": {}
            },
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "color",
                "excludes": {},
                "default": "#cccccc",
                "description": "The color of the crosshair. Defaults to `#cccccc` for numeric and\ndatetime axes, and `rgba(204,214,235,0.25)` for category axes, where\nthe crosshair by default highlights the whole category."
              },
              "subtree": {}
            },
            "dashStyle": {
              "meta": {
                "types": {
                  "highcharts.dashstylevalue": 1
                },
                "name": "dashStyle",
                "excludes": {},
                "default": "Solid",
                "description": "The dash style for the crosshair. See\n[plotOptions.series.dashStyle](#plotOptions.series.dashStyle)\nfor possible values."
              },
              "subtree": {}
            },
            "label": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "label",
                "excludes": {},
                "products": {
                  "highstock": 1
                },
                "description": "A label on the axis next to the crosshair.\n\nIn styled mode, the label is styled with the\n`.highcharts-crosshair-label` class."
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "highcharts.alignvalue": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "products": {
                      "highstock": 1
                    },
                    "description": "Alignment of the label compared to the axis. Defaults to `\"left\"` for\nright-side axes, `\"right\"` for left-side axes and `\"center\"` for\nhorizontal axes."
                  },
                  "subtree": {}
                },
                "backgroundColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "backgroundColor",
                    "excludes": {},
                    "products": {
                      "highstock": 1
                    },
                    "description": "The background color for the label. Defaults to the related series\ncolor, or `#666666` if that is not available."
                  },
                  "subtree": {}
                },
                "borderColor": {
                  "meta": {
                    "types": {
                      "highcharts.colorstring": 1,
                      "highcharts.gradientcolorobject": 1,
                      "highcharts.patternobject": 1
                    },
                    "name": "borderColor",
                    "excludes": {},
                    "products": {
                      "highstock": 1
                    },
                    "description": "The border color for the crosshair label"
                  },
                  "subtree": {}
                },
                "borderRadius": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderRadius",
                    "excludes": {},
                    "default": "3",
                    "products": {
                      "highstock": 1
                    },
                    "description": "The border corner radius of the crosshair label."
                  },
                  "subtree": {}
                },
                "borderWidth": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "borderWidth",
                    "excludes": {},
                    "default": "0",
                    "products": {
                      "highstock": 1
                    },
                    "description": "The border width for the crosshair label."
                  },
                  "subtree": {}
                },
                "enabled": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "enabled",
                    "excludes": {},
                    "default": "false",
                    "products": {
                      "highstock": 1
                    },
                    "description": "Flag to enable crosshair's label."
                  },
                  "subtree": {}
                },
                "format": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "format",
                    "excludes": {},
                    "products": {
                      "highstock": 1
                    },
                    "description": "A format string for the crosshair label. Defaults to `{value}` for\nnumeric axes and `{value:%b %d, %Y}` for datetime axes."
                  },
                  "subtree": {}
                },
                "formatter": {
                  "meta": {
                    "types": {
                      "highcharts.xaxiscrosshairlabelformattercallbackfunction": 1
                    },
                    "name": "formatter",
                    "excludes": {},
                    "products": {
                      "highstock": 1
                    },
                    "description": "Formatter function for the label text."
                  },
                  "subtree": {}
                },
                "padding": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "padding",
                    "excludes": {},
                    "default": "8",
                    "products": {
                      "highstock": 1
                    },
                    "description": "Padding inside the crosshair label."
                  },
                  "subtree": {}
                },
                "shape": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "shape",
                    "excludes": {},
                    "default": "callout",
                    "products": {
                      "highstock": 1
                    },
                    "description": "The shape to use for the label box."
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "highcharts.cssobject": 1
                    },
                    "name": "style",
                    "excludes": {},
                    "default": "{\"color\": \"white\", \"fontWeight\": \"normal\", \"fontSize\": \"11px\", \"textAlign\": \"center\"}",
                    "products": {
                      "highstock": 1
                    },
                    "description": "Text styles for the crosshair label."
                  },
                  "subtree": {}
                }
              }
            },
            "snap": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "snap",
                "excludes": {},
                "default": "true",
                "description": "Whether the crosshair should snap to the point or follow the pointer\nindependent of points."
              },
              "subtree": {}
            },
            "width": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "width",
                "excludes": {},
                "default": "1",
                "description": "The pixel width of the crosshair. Defaults to 1 for numeric or\ndatetime axes, and for one category width for category axes."
              },
              "subtree": {}
            },
            "zIndex": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zIndex",
                "excludes": {},
                "default": "2",
                "description": "The Z index of the crosshair. Higher Z indices allow drawing the\ncrosshair on top of the series or behind the grid lines."
              },
              "subtree": {}
            }
          }
        },
        "currentDateIndicator": {
          "meta": {
            "types": {
              "boolean": 1,
              "*": 1
            },
            "name": "currentDateIndicator",
            "excludes": {},
            "default": "true",
            "products": {
              "gantt": 1
            },
            "description": "Show an indicator on the axis for the current date and time. Can be a\nboolean or a configuration object similar to\n[xAxis.plotLines](#xAxis.plotLines).",
            "extends": "xAxis.plotLines"
          },
          "subtree": {
            "label": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "label",
                "excludes": {}
              },
              "subtree": {
                "format": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "format",
                    "excludes": {},
                    "default": "'%a, %b %d %Y, %H:%M'",
                    "products": {
                      "gantt": 1
                    },
                    "description": "Format of the label. This options is passed as the fist argument to\n[dateFormat](/class-reference/Highcharts#dateFormat) function."
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "dateTimeLabelFormats": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "dateTimeLabelFormats",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "For a datetime axis, the scale will automatically adjust to the\nappropriate unit. This member gives the default string\nrepresentations used for each unit. For intermediate values,\ndifferent units may be used, for example the `day` unit can be used\non midnight and `hour` unit be used for intermediate values on the\nsame axis. For an overview of the replacement codes, see\n[dateFormat](/class-reference/Highcharts#dateFormat). Defaults to:\n\n<pre>{\n    millisecond: '%H:%M:%S.%L',\n    second: '%H:%M:%S',\n    minute: '%H:%M',\n    hour: '%H:%M',\n    day: '%e. %b',\n    week: '%e. %b',\n    month: '%b \\'%y',\n    year: '%Y'\n}</pre>"
          },
          "subtree": {
            "day": {
              "meta": {
                "types": {
                  "string": 1,
                  "*": 1
                },
                "name": "day",
                "excludes": {}
              },
              "subtree": {
                "main": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "main",
                    "excludes": {},
                    "default": "%e. %b"
                  },
                  "subtree": {}
                }
              }
            },
            "hour": {
              "meta": {
                "types": {
                  "string": 1,
                  "*": 1
                },
                "name": "hour",
                "excludes": {}
              },
              "subtree": {
                "main": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "main",
                    "excludes": {},
                    "default": "%H:%M"
                  },
                  "subtree": {}
                },
                "range": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "range",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "millisecond": {
              "meta": {
                "types": {
                  "string": 1,
                  "*": 1
                },
                "name": "millisecond",
                "excludes": {}
              },
              "subtree": {
                "main": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "main",
                    "excludes": {},
                    "default": "%H:%M:%S.%L"
                  },
                  "subtree": {}
                },
                "range": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "range",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "minute": {
              "meta": {
                "types": {
                  "string": 1,
                  "*": 1
                },
                "name": "minute",
                "excludes": {}
              },
              "subtree": {
                "main": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "main",
                    "excludes": {},
                    "default": "%H:%M"
                  },
                  "subtree": {}
                },
                "range": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "range",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "month": {
              "meta": {
                "types": {
                  "string": 1,
                  "*": 1
                },
                "name": "month",
                "excludes": {}
              },
              "subtree": {
                "main": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "main",
                    "excludes": {},
                    "default": "%b '%y"
                  },
                  "subtree": {}
                }
              }
            },
            "second": {
              "meta": {
                "types": {
                  "string": 1,
                  "*": 1
                },
                "name": "second",
                "excludes": {}
              },
              "subtree": {
                "main": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "main",
                    "excludes": {},
                    "default": "%H:%M:%S"
                  },
                  "subtree": {}
                },
                "range": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "range",
                    "excludes": {},
                    "default": false
                  },
                  "subtree": {}
                }
              }
            },
            "week": {
              "meta": {
                "types": {
                  "string": 1,
                  "*": 1
                },
                "name": "week",
                "excludes": {}
              },
              "subtree": {
                "main": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "main",
                    "excludes": {},
                    "default": "%e. %b"
                  },
                  "subtree": {}
                }
              }
            },
            "year": {
              "meta": {
                "types": {
                  "string": 1,
                  "*": 1
                },
                "name": "year",
                "excludes": {}
              },
              "subtree": {
                "main": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "main",
                    "excludes": {},
                    "default": "%Y"
                  },
                  "subtree": {}
                }
              }
            }
          }
        },
        "endOnTick": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "endOnTick",
            "excludes": {},
            "default": false,
            "description": "Whether to force the axis to end on a tick. Use this option with\nthe `maxPadding` option to control the axis end."
          },
          "subtree": {}
        },
        "events": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "events",
            "excludes": {},
            "description": "Event handlers for the axis."
          },
          "subtree": {
            "afterBreaks": {
              "meta": {
                "types": {
                  "highcharts.axiseventcallbackfunction": 1
                },
                "name": "afterBreaks",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "gantt": 1
                },
                "description": "An event fired after the breaks have rendered."
              },
              "subtree": {}
            },
            "afterSetExtremes": {
              "meta": {
                "types": {
                  "highcharts.axissetextremeseventcallbackfunction": 1
                },
                "name": "afterSetExtremes",
                "excludes": {},
                "description": "As opposed to the `setExtremes` event, this event fires after the\nfinal min and max values are computed and corrected for `minRange`.\n\nFires when the minimum and maximum is set for the axis, either by\ncalling the `.setExtremes()` method or by selecting an area in the\nchart. One parameter, `event`, is passed to the function, containing\ncommon event information.\n\nThe new user set minimum and maximum values can be found by\n`event.min` and `event.max`. These reflect the axis minimum and\nmaximum in axis values. The actual data extremes are found in\n`event.dataMin` and `event.dataMax`."
              },
              "subtree": {}
            },
            "pointBreak": {
              "meta": {
                "types": {
                  "highcharts.axispointbreakeventcallbackfunction": 1
                },
                "name": "pointBreak",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "gantt": 1
                },
                "description": "An event fired when a break from this axis occurs on a point."
              },
              "subtree": {}
            },
            "pointInBreak": {
              "meta": {
                "types": {
                  "highcharts.axispointbreakeventcallbackfunction": 1
                },
                "name": "pointInBreak",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "An event fired when a point falls inside a break from this axis."
              },
              "subtree": {}
            },
            "setExtremes": {
              "meta": {
                "types": {
                  "highcharts.axissetextremeseventcallbackfunction": 1
                },
                "name": "setExtremes",
                "excludes": {},
                "description": "Fires when the minimum and maximum is set for the axis, either by\ncalling the `.setExtremes()` method or by selecting an area in the\nchart. One parameter, `event`, is passed to the function,\ncontaining common event information.\n\nThe new user set minimum and maximum values can be found by\n`event.min` and `event.max`. These reflect the axis minimum and\nmaximum in data values. When an axis is zoomed all the way out from\nthe \"Reset zoom\" button, `event.min` and `event.max` are null, and\nthe new extremes are set based on `this.dataMin` and `this.dataMax`."
              },
              "subtree": {}
            }
          }
        },
        "floor": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "floor",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "The lowest allowed value for automatically computed axis extremes."
          },
          "subtree": {}
        },
        "grid": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "grid",
            "excludes": {},
            "products": {
              "gantt": 1
            },
            "description": "Set grid options for the axis labels. Requires Highcharts Gantt."
          },
          "subtree": {
            "borderColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "borderColor",
                "excludes": {},
                "description": "Set border color for the label grid lines."
              },
              "subtree": {}
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": "1",
                "description": "Set border width of the label grid lines."
              },
              "subtree": {}
            },
            "cellHeight": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "cellHeight",
                "excludes": {},
                "description": "Set cell height for grid axis labels. By default this is calculated from font\nsize."
              },
              "subtree": {}
            },
            "columns": {
              "meta": {
                "types": {
                  "array": "Highcharts.XAxisOptions"
                },
                "name": "columns",
                "excludes": {},
                "description": "Set specific options for each column (or row for horizontal axes) in the\ngrid. Each extra column/row is its own axis, and the axis options can be set\nhere."
              },
              "subtree": {}
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": "true",
                "products": {
                  "gantt": 1
                },
                "description": "Enable grid on the axis labels. Defaults to true for Gantt charts."
              },
              "subtree": {}
            }
          }
        },
        "gridLineColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "gridLineColor",
            "excludes": {},
            "default": "#e6e6e6",
            "description": "Color of the grid lines extending the ticks across the plot area.\n\nIn styled mode, the stroke is given in the `.highcharts-grid-line`\nclass."
          },
          "subtree": {}
        },
        "gridLineDashStyle": {
          "meta": {
            "types": {
              "highcharts.dashstylevalue": 1
            },
            "name": "gridLineDashStyle",
            "excludes": {},
            "default": "Solid",
            "description": "The dash or dot style of the grid lines. For possible values, see\n[this demonstration](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/)."
          },
          "subtree": {}
        },
        "gridLineWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "gridLineWidth",
            "excludes": {},
            "default": "0",
            "description": "The width of the grid lines extending the ticks across the plot area.\n\nIn styled mode, the stroke width is given in the\n`.highcharts-grid-line` class."
          },
          "subtree": {}
        },
        "gridZIndex": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "gridZIndex",
            "excludes": {},
            "default": "1",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "The Z index of the grid lines."
          },
          "subtree": {}
        },
        "id": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "id",
            "excludes": {},
            "description": "An id for the axis. This can be used after render time to get\na pointer to the axis object through `chart.get()`."
          },
          "subtree": {}
        },
        "labels": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "labels",
            "excludes": {},
            "description": "The axis labels show the number or category for each tick."
          },
          "subtree": {
            "align": {
              "meta": {
                "types": {
                  "highcharts.alignvalue": 1
                },
                "name": "align",
                "excludes": {},
                "description": "What part of the string the given position is anchored to.\nIf `left`, the left side of the string is at the axis position.\nCan be one of `\"left\"`, `\"center\"` or `\"right\"`. Defaults to\nan intelligent guess based on which side of the chart the axis\nis on and the rotation of the label."
              },
              "subtree": {}
            },
            "autoRotation": {
              "meta": {
                "types": {
                  "array": "number",
                  "false": 1
                },
                "name": "autoRotation",
                "excludes": {},
                "default": "[-45]",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "For horizontal axes, the allowed degrees of label rotation\nto prevent overlapping labels. If there is enough space,\nlabels are not rotated. As the chart gets narrower, it\nwill start rotating the labels -45 degrees, then remove\nevery second label and try again with rotations 0 and -45 etc.\nSet it to `false` to disable rotation, which will\ncause the labels to word-wrap if possible."
              },
              "subtree": {}
            },
            "autoRotationLimit": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "autoRotationLimit",
                "excludes": {},
                "default": "80",
                "products": {
                  "highcharts": 1,
                  "gantt": 1
                },
                "description": "When each category width is more than this many pixels, we don't\napply auto rotation. Instead, we lay out the axis label with word\nwrap. A lower limit makes sense when the label contains multiple\nshort words that don't extend the available horizontal space for\neach label."
              },
              "subtree": {}
            },
            "distance": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "distance",
                "excludes": {},
                "default": "15",
                "products": {
                  "highcharts": 1,
                  "gantt": 1
                },
                "description": "Polar charts only. The label's pixel distance from the perimeter\nof the plot area."
              },
              "subtree": {}
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": true,
                "description": "Enable or disable the axis labels."
              },
              "subtree": {}
            },
            "format": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "format",
                "excludes": {},
                "default": "{value}",
                "description": "A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\nfor the axis label."
              },
              "subtree": {}
            },
            "formatter": {
              "meta": {
                "types": {
                  "highcharts.formattercallbackfunction.<highcharts.axislabelsformattercontextobject>": 1
                },
                "name": "formatter",
                "excludes": {},
                "description": "Callback JavaScript function to format the label. The value\nis given by `this.value`. Additional properties for `this` are\n`axis`, `chart`, `isFirst` and `isLast`. The value of the default\nlabel formatter can be retrieved by calling\n`this.axis.defaultLabelFormatter.call(this)` within the function.\n\nDefaults to:\n\n<pre>function() {\n    return this.value;\n}</pre>"
              },
              "subtree": {}
            },
            "indentation": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "indentation",
                "excludes": {},
                "default": 10,
                "products": {
                  "gantt": 1
                },
                "description": "The number of pixels to indent the labels per level in a treegrid\naxis."
              },
              "subtree": {}
            },
            "maxStaggerLines": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "maxStaggerLines",
                "excludes": {},
                "default": "5",
                "description": "Horizontal axis only. When `staggerLines` is not set,\n`maxStaggerLines` defines how many lines the axis is allowed to\nadd to automatically avoid overlapping X labels. Set to `1` to\ndisable overlap detection."
              },
              "subtree": {}
            },
            "overflow": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "overflow",
                "excludes": {},
                "default": "justify",
                "description": "How to handle overflowing labels on horizontal axis. If set to\n`\"allow\"`, it will not be aligned at all. By default it\n`\"justify\"` labels inside the chart area. If there is room to\nmove it, it will be aligned to the edge, else it will be removed."
              },
              "subtree": {}
            },
            "padding": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "padding",
                "excludes": {},
                "default": "5",
                "products": {
                  "highcharts": 1,
                  "gantt": 1
                },
                "description": "The pixel padding for axis labels, to ensure white space between\nthem."
              },
              "subtree": {}
            },
            "position3d": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "position3d",
                "excludes": {},
                "default": "offset",
                "products": {
                  "highcharts": 1
                },
                "description": "Defines how the labels are be repositioned according to the 3D chart\norientation.\n\n- `'offset'`: Maintain a fixed horizontal/vertical distance from the\n  tick marks, despite the chart orientation. This is the backwards\n  compatible behavior, and causes skewing of X and Z axes.\n\n- `'chart'`: Preserve 3D position relative to the chart.\n  This looks nice, but hard to read if the text isn't\n  forward-facing.\n\n- `'flap'`: Rotated text along the axis to compensate for the chart\n  orientation. This tries to maintain text as legible as possible\n  on all orientations.\n\n- `'ortho'`: Rotated text along the axis direction so that the labels\n  are orthogonal to the axis. This is very similar to `'flap'`,\n  but prevents skewing the labels (X and Y scaling are still\n  present)."
              },
              "subtree": {}
            },
            "reserveSpace": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "reserveSpace",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "gantt": 1
                },
                "description": "Whether to reserve space for the labels. By default, space is\nreserved for the labels in these cases:\n\n* On all horizontal axes.\n* On vertical axes if `label.align` is `right` on a left-side\naxis or `left` on a right-side axis.\n* On vertical axes if `label.align` is `center`.\n\nThis can be turned off when for example the labels are rendered\ninside the plot area instead of outside."
              },
              "subtree": {}
            },
            "rotation": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "rotation",
                "excludes": {},
                "default": "0",
                "description": "Rotation of the labels in degrees."
              },
              "subtree": {}
            },
            "skew3d": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "skew3d",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1
                },
                "description": "If enabled, the axis labels will skewed to follow the perspective.\n\nThis will fix overlapping labels and titles, but texts become less\nlegible due to the distortion.\n\nThe final appearance depends heavily on `labels.position3d`."
              },
              "subtree": {}
            },
            "staggerLines": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "staggerLines",
                "excludes": {},
                "description": "Horizontal axes only. The number of lines to spread the labels\nover to make room or tighter labels."
              },
              "subtree": {}
            },
            "step": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "step",
                "excludes": {},
                "description": "To show only every _n_'th label on the axis, set the step to _n_.\nSetting the step to 2 shows every other label.\n\nBy default, the step is calculated automatically to avoid\noverlap. To prevent this, set it to 1\\. This usually only\nhappens on a category axis, and is often a sign that you have\nchosen the wrong axis type.\n\nRead more at\n[Axis docs](https://www.highcharts.com/docs/chart-concepts/axes)\n=> What axis should I use?"
              },
              "subtree": {}
            },
            "style": {
              "meta": {
                "types": {
                  "highcharts.cssobject": 1
                },
                "name": "style",
                "excludes": {},
                "description": "CSS styles for the label. Use `whiteSpace: 'nowrap'` to prevent\nwrapping of category labels. Use `textOverflow: 'none'` to\nprevent ellipsis (dots).\n\nIn styled mode, the labels are styled with the\n`.highcharts-axis-labels` class."
              },
              "subtree": {
                "color": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "default": "#666666"
                  },
                  "subtree": {}
                },
                "cursor": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "cursor",
                    "excludes": {},
                    "default": "default"
                  },
                  "subtree": {}
                },
                "fontSize": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "fontSize",
                    "excludes": {},
                    "default": "11px"
                  },
                  "subtree": {}
                }
              }
            },
            "useHTML": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "useHTML",
                "excludes": {},
                "default": "false",
                "description": "Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\nto render the labels."
              },
              "subtree": {}
            },
            "x": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "x",
                "excludes": {},
                "default": 0,
                "description": "The x position offset of the label relative to the tick position\non the axis."
              },
              "subtree": {}
            },
            "y": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "y",
                "excludes": {},
                "description": "The y position offset of the label relative to the tick position\non the axis. The default makes it adapt to the font size on\nbottom axis."
              },
              "subtree": {}
            },
            "zIndex": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zIndex",
                "excludes": {},
                "default": "7",
                "description": "The Z index for the axis labels."
              },
              "subtree": {}
            }
          }
        },
        "lineColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "lineColor",
            "excludes": {},
            "default": "#ccd6eb",
            "description": "The color of the line marking the axis itself.\n\nIn styled mode, the line stroke is given in the\n`.highcharts-axis-line` or `.highcharts-xaxis-line` class."
          },
          "subtree": {}
        },
        "lineWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "lineWidth",
            "excludes": {},
            "default": 1,
            "description": "The width of the line marking the axis itself.\n\nIn styled mode, the stroke width is given in the\n`.highcharts-axis-line` or `.highcharts-xaxis-line` class."
          },
          "subtree": {}
        },
        "linkedTo": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "linkedTo",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Index of another axis that this axis is linked to. When an axis is\nlinked to a master axis, it will take the same extremes as\nthe master, but as assigned by min or max or by setExtremes.\nIt can be used to show additional info, or to ease reading the\nchart by duplicating the scales."
          },
          "subtree": {}
        },
        "margin": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "margin",
            "excludes": {},
            "description": "If there are multiple axes on the same side of the chart, the pixel\nmargin between the axes. Defaults to 0 on vertical axes, 15 on\nhorizontal axes."
          },
          "subtree": {}
        },
        "max": {
          "meta": {
            "types": {
              "number": 1,
              "null": 1
            },
            "name": "max",
            "excludes": {},
            "description": "The maximum value of the axis. If `null`, the max value is\nautomatically calculated.\n\nIf the [endOnTick](#yAxis.endOnTick) option is true, the `max` value\nmight be rounded up.\n\nIf a [tickAmount](#yAxis.tickAmount) is set, the axis may be extended\nbeyond the set max in order to reach the given number of ticks. The\nsame may happen in a chart with multiple axes, determined by [chart.\nalignTicks](#chart), where a `tickAmount` is applied internally."
          },
          "subtree": {}
        },
        "maxPadding": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "maxPadding",
            "excludes": {},
            "default": 0.01,
            "description": "Padding of the max value relative to the length of the axis. A\npadding of 0.05 will make a 100px axis 5px longer. This is useful\nwhen you don't want the highest data value to appear on the edge\nof the plot area. When the axis' `max` option is set or a max extreme\nis set using `axis.setExtremes()`, the maxPadding will be ignored."
          },
          "subtree": {}
        },
        "maxRange": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "maxRange",
            "excludes": {},
            "products": {
              "highstock": 1,
              "gantt": 1
            },
            "description": "Maximum range which can be set using the navigator's handles.\nOpposite of [xAxis.minRange](#xAxis.minRange)."
          },
          "subtree": {}
        },
        "maxZoom": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "maxZoom",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "Deprecated. Use `minRange` instead."
          },
          "subtree": {}
        },
        "min": {
          "meta": {
            "types": {
              "number": 1,
              "null": 1
            },
            "name": "min",
            "excludes": {},
            "description": "The minimum value of the axis. If `null` the min value is\nautomatically calculated.\n\nIf the [startOnTick](#yAxis.startOnTick) option is true (default),\nthe `min` value might be rounded down.\n\nThe automatically calculated minimum value is also affected by\n[floor](#yAxis.floor), [softMin](#yAxis.softMin),\n[minPadding](#yAxis.minPadding), [minRange](#yAxis.minRange)\nas well as [series.threshold](#plotOptions.series.threshold)\nand [series.softThreshold](#plotOptions.series.softThreshold)."
          },
          "subtree": {}
        },
        "minPadding": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "minPadding",
            "excludes": {},
            "default": 0.01,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Padding of the min value relative to the length of the axis. A\npadding of 0.05 will make a 100px axis 5px longer. This is useful\nwhen you don't want the lowest data value to appear on the edge\nof the plot area. When the axis' `min` option is set or a min extreme\nis set using `axis.setExtremes()`, the minPadding will be ignored."
          },
          "subtree": {}
        },
        "minRange": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "minRange",
            "excludes": {},
            "description": "The minimum range to display on this axis. The entire axis will not\nbe allowed to span over a smaller interval than this. For example,\nfor a datetime axis the main unit is milliseconds. If minRange is\nset to 3600000, you can't zoom in more than to one hour.\n\nThe default minRange for the x axis is five times the smallest\ninterval between any of the data points.\n\nOn a logarithmic axis, the unit for the minimum range is the power.\nSo a minRange of 1 means that the axis can be zoomed to 10-100,\n100-1000, 1000-10000 etc.\n\nNote that the `minPadding`, `maxPadding`, `startOnTick` and\n`endOnTick` settings also affect how the extremes of the axis\nare computed."
          },
          "subtree": {}
        },
        "minTickInterval": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "minTickInterval",
            "excludes": {},
            "description": "The minimum tick interval allowed in axis values. For example on\nzooming in on an axis with daily data, this can be used to prevent\nthe axis from showing hours. Defaults to the closest distance between\ntwo points on the axis."
          },
          "subtree": {}
        },
        "minorGridLineColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "minorGridLineColor",
            "excludes": {},
            "default": "#f2f2f2",
            "description": "Color of the minor, secondary grid lines.\n\nIn styled mode, the stroke width is given in the\n`.highcharts-minor-grid-line` class."
          },
          "subtree": {}
        },
        "minorGridLineDashStyle": {
          "meta": {
            "types": {
              "highcharts.dashstylevalue": 1
            },
            "name": "minorGridLineDashStyle",
            "excludes": {},
            "default": "Solid",
            "description": "The dash or dot style of the minor grid lines. For possible values,\nsee [this demonstration](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/)."
          },
          "subtree": {}
        },
        "minorGridLineWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "minorGridLineWidth",
            "excludes": {},
            "default": 1,
            "description": "Width of the minor, secondary grid lines.\n\nIn styled mode, the stroke width is given in the\n`.highcharts-grid-line` class."
          },
          "subtree": {}
        },
        "minorTickColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "minorTickColor",
            "excludes": {},
            "default": "#999999",
            "description": "Color for the minor tick marks."
          },
          "subtree": {}
        },
        "minorTickInterval": {
          "meta": {
            "types": {
              "number": 1,
              "string": 1,
              "null": 1
            },
            "name": "minorTickInterval",
            "excludes": {},
            "description": "Specific tick interval in axis units for the minor ticks. On a linear\naxis, if `\"auto\"`, the minor tick interval is calculated as a fifth\nof the tickInterval. If `null` or `undefined`, minor ticks are not\nshown.\n\nOn logarithmic axes, the unit is the power of the value. For example,\nsetting the minorTickInterval to 1 puts one tick on each of 0.1, 1,\n10, 100 etc. Setting the minorTickInterval to 0.1 produces 9 ticks\nbetween 1 and 10, 10 and 100 etc.\n\nIf user settings dictate minor ticks to become too dense, they don't\nmake sense, and will be ignored to prevent performance problems."
          },
          "subtree": {}
        },
        "minorTickLength": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "minorTickLength",
            "excludes": {},
            "default": 2,
            "description": "The pixel length of the minor tick marks."
          },
          "subtree": {}
        },
        "minorTickPosition": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "minorTickPosition",
            "excludes": {},
            "default": "outside",
            "description": "The position of the minor tick marks relative to the axis line.\n Can be one of `inside` and `outside`."
          },
          "subtree": {}
        },
        "minorTickWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "minorTickWidth",
            "excludes": {},
            "default": "0",
            "description": "The pixel width of the minor tick mark."
          },
          "subtree": {}
        },
        "minorTicks": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "minorTicks",
            "excludes": {},
            "default": "false",
            "description": "Enable or disable minor ticks. Unless\n[minorTickInterval](#xAxis.minorTickInterval) is set, the tick\ninterval is calculated as a fifth of the `tickInterval`.\n\nOn a logarithmic axis, minor ticks are laid out based on a best\nguess, attempting to enter approximately 5 minor ticks between\neach major tick.\n\nPrior to v6.0.0, ticks were unabled in auto layout by setting\n`minorTickInterval` to `\"auto\"`."
          },
          "subtree": {}
        },
        "offset": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "offset",
            "excludes": {},
            "default": "0",
            "description": "The distance in pixels from the plot area to the axis line.\nA positive offset moves the axis with it's line, labels and ticks\naway from the plot area. This is typically used when two or more\naxes are displayed on the same side of the plot. With multiple\naxes the offset is dynamically adjusted to avoid collision, this\ncan be overridden by setting offset explicitly."
          },
          "subtree": {}
        },
        "opposite": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "opposite",
            "excludes": {},
            "default": "false",
            "description": "Whether to display the axis on the opposite side of the normal. The\nnormal is on the left side for vertical axes and bottom for\nhorizontal, so the opposite sides will be right and top respectively.\nThis is typically used with dual or multiple axes."
          },
          "subtree": {}
        },
        "ordinal": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "ordinal",
            "excludes": {},
            "default": "true",
            "products": {
              "highstock": 1
            },
            "description": "In an ordinal axis, the points are equally spaced in the chart\nregardless of the actual time or x distance between them. This means\nthat missing data periods (e.g. nights or weekends for a stock chart)\nwill not take up space in the chart.\nHaving `ordinal: false` will show any gaps created by the `gapSize`\nsetting proportionate to their duration.\n\nIn stock charts the X axis is ordinal by default, unless\nthe boost module is used and at least one of the series' data length\nexceeds the [boostThreshold](#series.line.boostThreshold)."
          },
          "subtree": {}
        },
        "overscroll": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "overscroll",
            "excludes": {},
            "default": "0",
            "products": {
              "highstock": 1
            },
            "description": "Additional range on the right side of the xAxis. Works similar to\n`xAxis.maxPadding`, but value is set in milliseconds. Can be set for\nboth main `xAxis` and the navigator's `xAxis`."
          },
          "subtree": {}
        },
        "pane": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "pane",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "Refers to the index in the [panes](#panes) array. Used for circular\ngauges and polar charts. When the option is not set then first pane\nwill be used."
          },
          "subtree": {}
        },
        "plotBands": {
          "meta": {
            "types": {
              "array": "*"
            },
            "name": "plotBands",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "An array of colored bands stretching across the plot area marking an\ninterval on the axis.\n\nIn styled mode, the plot bands are styled by the `.highcharts-plot-band`\nclass in addition to the `className` option."
          },
          "subtree": {
            "acrossPanes": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "acrossPanes",
                "excludes": {},
                "default": "true",
                "products": {
                  "highstock": 1
                },
                "description": "Flag to decide if plotBand should be rendered across all panes."
              },
              "subtree": {}
            },
            "borderColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "borderColor",
                "excludes": {},
                "description": "Border color for the plot band. Also requires `borderWidth` to be set."
              },
              "subtree": {}
            },
            "borderWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "borderWidth",
                "excludes": {},
                "default": "0",
                "description": "Border width for the plot band. Also requires `borderColor` to be set."
              },
              "subtree": {}
            },
            "className": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "className",
                "excludes": {},
                "description": "A custom class name, in addition to the default `highcharts-plot-band`,\nto apply to each individual band."
              },
              "subtree": {}
            },
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1,
                  "highcharts.gradientcolorobject": 1,
                  "highcharts.patternobject": 1
                },
                "name": "color",
                "excludes": {},
                "default": "#e6ebf5",
                "description": "The color of the plot band."
              },
              "subtree": {}
            },
            "events": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "events",
                "excludes": {},
                "description": "An object defining mouse events for the plot band. Supported properties\nare `click`, `mouseover`, `mouseout`, `mousemove`."
              },
              "subtree": {
                "click": {
                  "meta": {
                    "types": {
                      "highcharts.eventcallbackfunction.<highcharts.plotlineorband>": 1
                    },
                    "name": "click",
                    "excludes": {},
                    "description": "Click event on a plot band."
                  },
                  "subtree": {}
                },
                "mousemove": {
                  "meta": {
                    "types": {
                      "highcharts.eventcallbackfunction.<highcharts.plotlineorband>": 1
                    },
                    "name": "mousemove",
                    "excludes": {},
                    "description": "Mouse move event on a plot band."
                  },
                  "subtree": {}
                },
                "mouseout": {
                  "meta": {
                    "types": {
                      "highcharts.eventcallbackfunction.<highcharts.plotlineorband>": 1
                    },
                    "name": "mouseout",
                    "excludes": {},
                    "description": "Mouse out event on the corner of a plot band."
                  },
                  "subtree": {}
                },
                "mouseover": {
                  "meta": {
                    "types": {
                      "highcharts.eventcallbackfunction.<highcharts.plotlineorband>": 1
                    },
                    "name": "mouseover",
                    "excludes": {},
                    "description": "Mouse over event on a plot band."
                  },
                  "subtree": {}
                }
              }
            },
            "from": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "from",
                "excludes": {},
                "description": "The start position of the plot band in axis units."
              },
              "subtree": {}
            },
            "id": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "id",
                "excludes": {},
                "description": "An id used for identifying the plot band in Axis.removePlotBand."
              },
              "subtree": {}
            },
            "label": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "label",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "Text labels for the plot bands"
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "highcharts.alignvalue": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "default": "center",
                    "description": "Horizontal alignment of the label. Can be one of \"left\", \"center\" or\n\"right\"."
                  },
                  "subtree": {}
                },
                "rotation": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "rotation",
                    "excludes": {},
                    "default": "0",
                    "description": "Rotation of the text label in degrees ."
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "highcharts.cssobject": 1
                    },
                    "name": "style",
                    "excludes": {},
                    "description": "CSS styles for the text label.\n\nIn styled mode, the labels are styled by the\n`.highcharts-plot-band-label` class."
                  },
                  "subtree": {}
                },
                "text": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "text",
                    "excludes": {},
                    "description": "The string text itself. A subset of HTML is supported."
                  },
                  "subtree": {}
                },
                "textAlign": {
                  "meta": {
                    "types": {
                      "highcharts.alignvalue": 1
                    },
                    "name": "textAlign",
                    "excludes": {},
                    "description": "The text alignment for the label. While `align` determines where the\ntexts anchor point is placed within the plot band, `textAlign` determines\nhow the text is aligned against its anchor point. Possible values are\n\"left\", \"center\" and \"right\". Defaults to the same as the `align` option."
                  },
                  "subtree": {}
                },
                "useHTML": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "useHTML",
                    "excludes": {},
                    "default": "false",
                    "description": "Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\nto render the labels."
                  },
                  "subtree": {}
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "highcharts.verticalalignvalue": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "default": "top",
                    "description": "Vertical alignment of the label relative to the plot band. Can be one of\n\"top\", \"middle\" or \"bottom\"."
                  },
                  "subtree": {}
                },
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "description": "Horizontal position relative the alignment. Default varies by\norientation."
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "description": "Vertical position of the text baseline relative to the alignment. Default\nvaries by orientation."
                  },
                  "subtree": {}
                }
              }
            },
            "to": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "to",
                "excludes": {},
                "description": "The end position of the plot band in axis units."
              },
              "subtree": {}
            },
            "zIndex": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zIndex",
                "excludes": {},
                "description": "The z index of the plot band within the chart, relative to other\nelements. Using the same z index as another element may give\nunpredictable results, as the last rendered element will be on top.\nValues from 0 to 20 make sense."
              },
              "subtree": {}
            }
          }
        },
        "plotLines": {
          "meta": {
            "types": {
              "array": "*"
            },
            "name": "plotLines",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "An array of lines stretching across the plot area, marking a specific\nvalue on one of the axes.\n\nIn styled mode, the plot lines are styled by the\n`.highcharts-plot-line` class in addition to the `className` option."
          },
          "subtree": {
            "acrossPanes": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "acrossPanes",
                "excludes": {},
                "default": "true",
                "products": {
                  "highstock": 1
                },
                "description": "Flag to decide if plotLine should be rendered across all panes."
              },
              "subtree": {}
            },
            "className": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "className",
                "excludes": {},
                "description": "A custom class name, in addition to the default `highcharts-plot-line`,\nto apply to each individual line."
              },
              "subtree": {}
            },
            "color": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "color",
                "excludes": {},
                "default": "#999999",
                "description": "The color of the line."
              },
              "subtree": {}
            },
            "dashStyle": {
              "meta": {
                "types": {
                  "highcharts.dashstylevalue": 1
                },
                "name": "dashStyle",
                "excludes": {},
                "default": "Solid",
                "description": "The dashing or dot style for the plot line. For possible values see\n[this overview](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/)."
              },
              "subtree": {}
            },
            "events": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "events",
                "excludes": {},
                "description": "An object defining mouse events for the plot line. Supported\nproperties are `click`, `mouseover`, `mouseout`, `mousemove`."
              },
              "subtree": {
                "click": {
                  "meta": {
                    "types": {
                      "highcharts.eventcallbackfunction.<highcharts.plotlineorband>": 1
                    },
                    "name": "click",
                    "excludes": {},
                    "description": "Click event on a plot band."
                  },
                  "subtree": {}
                },
                "mousemove": {
                  "meta": {
                    "types": {
                      "highcharts.eventcallbackfunction.<highcharts.plotlineorband>": 1
                    },
                    "name": "mousemove",
                    "excludes": {},
                    "description": "Mouse move event on a plot band."
                  },
                  "subtree": {}
                },
                "mouseout": {
                  "meta": {
                    "types": {
                      "highcharts.eventcallbackfunction.<highcharts.plotlineorband>": 1
                    },
                    "name": "mouseout",
                    "excludes": {},
                    "description": "Mouse out event on the corner of a plot band."
                  },
                  "subtree": {}
                },
                "mouseover": {
                  "meta": {
                    "types": {
                      "highcharts.eventcallbackfunction.<highcharts.plotlineorband>": 1
                    },
                    "name": "mouseover",
                    "excludes": {},
                    "description": "Mouse over event on a plot band."
                  },
                  "subtree": {}
                }
              }
            },
            "id": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "id",
                "excludes": {},
                "description": "An id used for identifying the plot line in Axis.removePlotLine."
              },
              "subtree": {}
            },
            "label": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "label",
                "excludes": {},
                "description": "Text labels for the plot bands"
              },
              "subtree": {
                "align": {
                  "meta": {
                    "types": {
                      "highcharts.alignvalue": 1
                    },
                    "name": "align",
                    "excludes": {},
                    "default": "left",
                    "description": "Horizontal alignment of the label. Can be one of \"left\", \"center\" or\n\"right\"."
                  },
                  "subtree": {}
                },
                "formatter": {
                  "meta": {
                    "types": {
                      "highcharts.formattercallbackfunction.<highcharts.plotlineorband>": 1
                    },
                    "name": "formatter",
                    "excludes": {},
                    "description": "Callback JavaScript function to format the label. Useful properties like\nthe value of plot line or the range of plot band (`from` & `to`\nproperties) can be found in `this.options` object."
                  },
                  "subtree": {}
                },
                "rotation": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "rotation",
                    "excludes": {},
                    "description": "Rotation of the text label in degrees. Defaults to 0 for horizontal plot\nlines and 90 for vertical lines."
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "highcharts.cssobject": 1
                    },
                    "name": "style",
                    "excludes": {},
                    "description": "CSS styles for the text label.\n\nIn styled mode, the labels are styled by the\n`.highcharts-plot-line-label` class."
                  },
                  "subtree": {}
                },
                "text": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "text",
                    "excludes": {},
                    "description": "The text itself. A subset of HTML is supported."
                  },
                  "subtree": {}
                },
                "textAlign": {
                  "meta": {
                    "types": {
                      "highcharts.alignvalue": 1
                    },
                    "name": "textAlign",
                    "excludes": {},
                    "description": "The text alignment for the label. While `align` determines where the\ntexts anchor point is placed within the plot band, `textAlign` determines\nhow the text is aligned against its anchor point. Possible values are\n\"left\", \"center\" and \"right\". Defaults to the same as the `align` option."
                  },
                  "subtree": {}
                },
                "useHTML": {
                  "meta": {
                    "types": {
                      "boolean": 1
                    },
                    "name": "useHTML",
                    "excludes": {},
                    "default": "false",
                    "description": "Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\nto render the labels."
                  },
                  "subtree": {}
                },
                "verticalAlign": {
                  "meta": {
                    "types": {
                      "highcharts.verticalalignvalue": 1
                    },
                    "name": "verticalAlign",
                    "excludes": {},
                    "description": "Vertical alignment of the label relative to the plot line. Can be\none of \"top\", \"middle\" or \"bottom\"."
                  },
                  "subtree": {}
                },
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "description": "Horizontal position relative the alignment. Default varies by\norientation."
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "description": "Vertical position of the text baseline relative to the alignment. Default\nvaries by orientation."
                  },
                  "subtree": {}
                }
              }
            },
            "value": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "value",
                "excludes": {},
                "description": "The position of the line in axis units."
              },
              "subtree": {}
            },
            "width": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "width",
                "excludes": {},
                "default": "2",
                "description": "The width or thickness of the plot line."
              },
              "subtree": {}
            },
            "zIndex": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zIndex",
                "excludes": {},
                "description": "The z index of the plot line within the chart."
              },
              "subtree": {}
            }
          }
        },
        "range": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "range",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "The zoomed range to display when only defining one or none of `min`\nor `max`. For example, to show the latest month, a range of one month\ncan be set."
          },
          "subtree": {}
        },
        "reversed": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "reversed",
            "excludes": {},
            "default": "false",
            "description": "Whether to reverse the axis so that the highest number is closest\nto the origin. If the chart is inverted, the x axis is reversed by\ndefault."
          },
          "subtree": {}
        },
        "reversedStacks": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "reversedStacks",
            "excludes": {},
            "default": "false",
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "This option determines how stacks should be ordered within a group.\nFor example reversed xAxis also reverses stacks, so first series\ncomes last in a group. To keep order like for non-reversed xAxis\nenable this option."
          },
          "subtree": {}
        },
        "scrollbar": {
          "meta": {
            "types": {},
            "name": "scrollbar",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "An optional scrollbar to display on the X axis in response to\nlimiting the minimum and maximum of the axis values.\n\nIn styled mode, all the presentational options for the scrollbar are\nreplaced by the classes `.highcharts-scrollbar-thumb`,\n`.highcharts-scrollbar-arrow`, `.highcharts-scrollbar-button`,\n`.highcharts-scrollbar-rifles` and `.highcharts-scrollbar-track`.",
            "extends": "scrollbar"
          },
          "subtree": {}
        },
        "showEmpty": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "showEmpty",
            "excludes": {},
            "default": true,
            "description": "Whether to show the axis line and title when the axis has no data."
          },
          "subtree": {}
        },
        "showFirstLabel": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "showFirstLabel",
            "excludes": {},
            "default": "true",
            "description": "Whether to show the first tick label."
          },
          "subtree": {}
        },
        "showLastLabel": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "showLastLabel",
            "excludes": {},
            "default": "true",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Whether to show the last tick label. Defaults to `true` on cartesian\ncharts, and `false` on polar charts."
          },
          "subtree": {}
        },
        "softMax": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "softMax",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "A soft maximum for the axis. If the series data maximum is less than\nthis, the axis will stay at this maximum, but if the series data\nmaximum is higher, the axis will flex to show all data."
          },
          "subtree": {}
        },
        "softMin": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "softMin",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "A soft minimum for the axis. If the series data minimum is greater\nthan this, the axis will stay at this minimum, but if the series\ndata minimum is lower, the axis will flex to show all data."
          },
          "subtree": {}
        },
        "startOfWeek": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "startOfWeek",
            "excludes": {},
            "default": 1,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "For datetime axes, this decides where to put the tick between weeks.\n 0 = Sunday, 1 = Monday."
          },
          "subtree": {}
        },
        "startOnTick": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "startOnTick",
            "excludes": {},
            "default": false,
            "description": "Whether to force the axis to start on a tick. Use this option with\nthe `minPadding` option to control the axis start."
          },
          "subtree": {}
        },
        "tickAmount": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "tickAmount",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "The amount of ticks to draw on the axis. This opens up for aligning\nthe ticks of multiple charts or panes within a chart. This option\noverrides the `tickPixelInterval` option.\n\nThis option only has an effect on linear axes. Datetime, logarithmic\nor category axes are not affected."
          },
          "subtree": {}
        },
        "tickColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "tickColor",
            "excludes": {},
            "default": "#ccd6eb",
            "description": "Color for the main tick marks.\n\nIn styled mode, the stroke is given in the `.highcharts-tick`\nclass."
          },
          "subtree": {}
        },
        "tickInterval": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "tickInterval",
            "excludes": {},
            "description": "The interval of the tick marks in axis units. When `undefined`, the\ntick interval is computed to approximately follow the\n[tickPixelInterval](#xAxis.tickPixelInterval) on linear and datetime\naxes. On categorized axes, a `undefined` tickInterval will default to\n1, one category. Note that datetime axes are based on milliseconds,\nso for example an interval of one day is expressed as\n`24 * 3600 * 1000`.\n\nOn logarithmic axes, the tickInterval is based on powers, so a\ntickInterval of 1 means one tick on each of 0.1, 1, 10, 100 etc. A\ntickInterval of 2 means a tick of 0.1, 10, 1000 etc. A tickInterval\nof 0.2 puts a tick on 0.1, 0.2, 0.4, 0.6, 0.8, 1, 2, 4, 6, 8, 10, 20,\n40 etc.\n\n\nIf the tickInterval is too dense for labels to be drawn, Highcharts\nmay remove ticks.\n\nIf the chart has multiple axes, the [alignTicks](#chart.alignTicks)\noption may interfere with the `tickInterval` setting."
          },
          "subtree": {}
        },
        "tickLength": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "tickLength",
            "excludes": {},
            "default": 10,
            "description": "The pixel length of the main tick marks."
          },
          "subtree": {}
        },
        "tickPixelInterval": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "tickPixelInterval",
            "excludes": {},
            "default": 100,
            "description": "If tickInterval is `null` this option sets the approximate pixel\ninterval of the tick marks. Not applicable to categorized axis.\n\nThe tick interval is also influenced by the [minTickInterval](#xAxis.minTickInterval) option, that, by default prevents ticks from\nbeing denser than the data points."
          },
          "subtree": {}
        },
        "tickPosition": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "tickPosition",
            "excludes": {},
            "default": "outside",
            "description": "The position of the major tick marks relative to the axis line.\nCan be one of `inside` and `outside`."
          },
          "subtree": {}
        },
        "tickPositioner": {
          "meta": {
            "types": {
              "highcharts.axistickpositionercallbackfunction": 1
            },
            "name": "tickPositioner",
            "excludes": {},
            "description": "A callback function returning array defining where the ticks are\nlaid out on the axis. This overrides the default behaviour of\n[tickPixelInterval](#xAxis.tickPixelInterval) and [tickInterval](#xAxis.tickInterval). The automatic tick positions are accessible\nthrough `this.tickPositions` and can be modified by the callback."
          },
          "subtree": {}
        },
        "tickPositions": {
          "meta": {
            "types": {
              "array": "number"
            },
            "name": "tickPositions",
            "excludes": {},
            "description": "An array defining where the ticks are laid out on the axis. This\noverrides the default behaviour of [tickPixelInterval](#xAxis.tickPixelInterval) and [tickInterval](#xAxis.tickInterval)."
          },
          "subtree": {}
        },
        "tickWidth": {
          "meta": {
            "types": {
              "undefined": 1,
              "number": 1
            },
            "name": "tickWidth",
            "excludes": {},
            "description": "The pixel width of the major tick marks. Defaults to 0 on category\naxes, otherwise 1.\n\nIn styled mode, the stroke width is given in the `.highcharts-tick`\nclass, but in order for the element to be generated on category axes,\nthe option must be explicitly set to 1."
          },
          "subtree": {}
        },
        "tickmarkPlacement": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "tickmarkPlacement",
            "excludes": {},
            "default": "between",
            "products": {
              "highcharts": 1,
              "gantt": 1
            },
            "description": "For categorized axes only. If `on` the tick mark is placed in the\ncenter of the category, if `between` the tick mark is placed between\ncategories. The default is `between` if the `tickInterval` is 1, else\n`on`."
          },
          "subtree": {}
        },
        "title": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "title",
            "excludes": {},
            "description": "The axis title, showing next to the axis line."
          },
          "subtree": {
            "align": {
              "meta": {
                "types": {
                  "highcharts.axistitlealignvalue": 1
                },
                "name": "align",
                "excludes": {},
                "default": "middle",
                "description": "Alignment of the title relative to the axis values. Possible\nvalues are \"low\", \"middle\" or \"high\"."
              },
              "subtree": {}
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "Deprecated. Set the `text` to `null` to disable the title."
              },
              "subtree": {}
            },
            "margin": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "margin",
                "excludes": {},
                "description": "The pixel distance between the axis labels or line and the title.\nDefaults to 0 for horizontal axes, 10 for vertical"
              },
              "subtree": {}
            },
            "offset": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "offset",
                "excludes": {},
                "description": "The distance of the axis title from the axis line. By default,\nthis distance is computed from the offset width of the labels,\nthe labels' distance from the axis and the title's margin.\nHowever when the offset option is set, it overrides all this."
              },
              "subtree": {}
            },
            "position3d": {
              "meta": {
                "types": {
                  "\"offset\"": 1,
                  "\"chart\"": 1,
                  "\"flap\"": 1,
                  "\"ortho\"": 1,
                  "null": 1
                },
                "name": "position3d",
                "excludes": {},
                "default": null,
                "products": {
                  "highcharts": 1
                },
                "description": "Defines how the title is repositioned according to the 3D chart\norientation.\n\n- `'offset'`: Maintain a fixed horizontal/vertical distance from the\n  tick marks, despite the chart orientation. This is the backwards\n  compatible behavior, and causes skewing of X and Z axes.\n\n- `'chart'`: Preserve 3D position relative to the chart.\n  This looks nice, but hard to read if the text isn't\n  forward-facing.\n\n- `'flap'`: Rotated text along the axis to compensate for the chart\n  orientation. This tries to maintain text as legible as possible on\n  all orientations.\n\n- `'ortho'`: Rotated text along the axis direction so that the labels\n  are orthogonal to the axis. This is very similar to `'flap'`, but\n  prevents skewing the labels (X and Y scaling are still present).\n\n- `undefined`: Will use the config from `labels.position3d`"
              },
              "subtree": {}
            },
            "reserveSpace": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "reserveSpace",
                "excludes": {},
                "default": "true",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "Whether to reserve space for the title when laying out the axis."
              },
              "subtree": {}
            },
            "rotation": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "rotation",
                "excludes": {},
                "default": "0",
                "description": "The rotation of the text in degrees. 0 is horizontal, 270 is\nvertical reading from bottom to top."
              },
              "subtree": {}
            },
            "skew3d": {
              "meta": {
                "types": {
                  "boolean": 1,
                  "null": 1
                },
                "name": "skew3d",
                "excludes": {},
                "default": null,
                "products": {
                  "highcharts": 1
                },
                "description": "If enabled, the axis title will skewed to follow the perspective.\n\nThis will fix overlapping labels and titles, but texts become less\nlegible due to the distortion.\n\nThe final appearance depends heavily on `title.position3d`.\n\nA `null` value will use the config from `labels.skew3d`."
              },
              "subtree": {}
            },
            "style": {
              "meta": {
                "types": {
                  "highcharts.cssobject": 1
                },
                "name": "style",
                "excludes": {},
                "default": "{\"color\": \"#666666\"}",
                "description": "CSS styles for the title. If the title text is longer than the\naxis length, it will wrap to multiple lines by default. This can\nbe customized by setting `textOverflow: 'ellipsis'`, by\nsetting a specific `width` or by setting `whiteSpace: 'nowrap'`.\n\nIn styled mode, the stroke width is given in the\n`.highcharts-axis-title` class."
              },
              "subtree": {}
            },
            "text": {
              "meta": {
                "types": {
                  "string": 1,
                  "null": 1
                },
                "name": "text",
                "excludes": {},
                "description": "The actual text of the axis title. It can contain basic HTML text\nmarkup like <b>, <i> and spans with style."
              },
              "subtree": {}
            },
            "textAlign": {
              "meta": {
                "types": {
                  "highcharts.alignvalue": 1
                },
                "name": "textAlign",
                "excludes": {},
                "description": "Alignment of the text, can be `\"left\"`, `\"right\"` or `\"center\"`.\nDefault alignment depends on the\n[title.align](xAxis.title.align):\n\nHorizontal axes:\n- for `align` = `\"low\"`, `textAlign` is set to `left`\n- for `align` = `\"middle\"`, `textAlign` is set to `center`\n- for `align` = `\"high\"`, `textAlign` is set to `right`\n\nVertical axes:\n- for `align` = `\"low\"` and `opposite` = `true`, `textAlign` is\n  set to `right`\n- for `align` = `\"low\"` and `opposite` = `false`, `textAlign` is\n  set to `left`\n- for `align` = `\"middle\"`, `textAlign` is set to `center`\n- for `align` = `\"high\"` and `opposite` = `true` `textAlign` is\n  set to `left`\n- for `align` = `\"high\"` and `opposite` = `false` `textAlign` is\n  set to `right`"
              },
              "subtree": {}
            },
            "useHTML": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "useHTML",
                "excludes": {},
                "default": "false",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\nto render the axis title."
              },
              "subtree": {}
            },
            "x": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "x",
                "excludes": {},
                "default": "0",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "Horizontal pixel offset of the title position."
              },
              "subtree": {}
            },
            "y": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "y",
                "excludes": {},
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "Vertical pixel offset of the title position."
              },
              "subtree": {}
            }
          }
        },
        "type": {
          "meta": {
            "types": {
              "highcharts.axistypevalue": 1
            },
            "name": "type",
            "excludes": {},
            "default": "linear",
            "products": {
              "highcharts": 1,
              "gantt": 1
            },
            "description": "The type of axis. Can be one of `linear`, `logarithmic`, `datetime`\nor `category`. In a datetime axis, the numbers are given in\nmilliseconds, and tick marks are placed on appropriate values like\nfull hours or days. In a category axis, the\n[point names](#series.line.data.name) of the chart's series are used\nfor categories, if not a [categories](#xAxis.categories) array is\ndefined."
          },
          "subtree": {}
        },
        "uniqueNames": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "uniqueNames",
            "excludes": {},
            "default": "true",
            "products": {
              "highcharts": 1,
              "gantt": 1
            },
            "description": "Applies only when the axis `type` is `category`. When `uniqueNames`\nis true, points are placed on the X axis according to their names.\nIf the same point name is repeated in the same or another series,\nthe point is placed on the same X position as other points of the\nsame name. When `uniqueNames` is false, the points are laid out in\nincreasing X positions regardless of their names, and the X axis\ncategory will take the name of the last point in each position."
          },
          "subtree": {}
        },
        "units": {
          "meta": {
            "types": {
              "array": "Array.<string, (Array.<number"
            },
            "name": "units",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Datetime axis only. An array determining what time intervals the\nticks are allowed to fall on. Each array item is an array where the\nfirst value is the time unit and the second value another array of\nallowed multiples. Defaults to:\n\n<pre>units: [[\n    'millisecond', // unit name\n    [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n], [\n    'second',\n    [1, 2, 5, 10, 15, 30]\n], [\n    'minute',\n    [1, 2, 5, 10, 15, 30]\n], [\n    'hour',\n    [1, 2, 3, 4, 6, 8, 12]\n], [\n    'day',\n    [1]\n], [\n    'week',\n    [1]\n], [\n    'month',\n    [1, 3, 6]\n], [\n    'year',\n    null\n]]</pre>"
          },
          "subtree": {}
        },
        "visible": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "visible",
            "excludes": {},
            "default": "true",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Whether axis, including axis title, line, ticks and labels, should\nbe visible."
          },
          "subtree": {}
        },
        "zoomEnabled": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "zoomEnabled",
            "excludes": {},
            "default": "enabled",
            "description": "Whether to zoom axis. If `chart.zoomType` is set, the option allows\nto disable zooming on an individual axis."
          },
          "subtree": {}
        }
      }
    },
    "yAxis": {
      "meta": {
        "types": {
          "array": "yAxis"
        },
        "name": "yAxis",
        "excludes": {},
        "description": "The Y axis or value axis. Normally this is the vertical axis,\nthough if the chart is inverted this is the horizontal axis.\nIn case of multiple axes, the yAxis node is an array of\nconfiguration objects.\n\nSee [the Axis object](/class-reference/Highcharts.Axis) for programmatic\naccess to the axis.",
        "extends": "xAxis"
      },
      "subtree": {
        "angle": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "angle",
            "excludes": {},
            "default": "0",
            "products": {
              "highcharts": 1
            },
            "description": "In a polar chart, this is the angle of the Y axis in degrees, where\n0 is up and 90 is right. The angle determines the position of the\naxis line and the labels, though the coordinate system is unaffected."
          },
          "subtree": {}
        },
        "endOnTick": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "endOnTick",
            "excludes": {},
            "default": true
          },
          "subtree": {}
        },
        "gridLineInterpolation": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "gridLineInterpolation",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "Polar charts only. Whether the grid lines should draw as a polygon\nwith straight lines between categories, or as circles. Can be either\n`circle` or `polygon`."
          },
          "subtree": {}
        },
        "gridLineWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "gridLineWidth",
            "excludes": {},
            "default": 1
          },
          "subtree": {}
        },
        "height": {
          "meta": {
            "types": {
              "number": 1,
              "string": 1
            },
            "name": "height",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "The height of the Y axis. If it's a number, it is interpreted as\npixels.\n\nSince Highstock 2: If it's a percentage string, it is interpreted\nas percentages of the total plot height."
          },
          "subtree": {}
        },
        "labels": {
          "meta": {
            "types": {},
            "name": "labels",
            "excludes": {},
            "extends": "xAxis.labels"
          },
          "subtree": {
            "align": {
              "meta": {
                "types": {
                  "highcharts.alignvalue": 1
                },
                "name": "align",
                "excludes": {},
                "description": "What part of the string the given position is anchored to. Can\nbe one of `\"left\"`, `\"center\"` or `\"right\"`. The exact position\nalso depends on the `labels.x` setting.\n\nAngular gauges and solid gauges defaults to `\"center\"`.\nSolid gauges with two labels have additional option `\"auto\"`\nfor automatic horizontal and vertical alignment."
              },
              "subtree": {}
            },
            "distance": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "distance",
                "excludes": {},
                "default": "-25",
                "products": {
                  "highcharts": 1
                },
                "description": "Angular gauges and solid gauges only.\nThe label's pixel distance from the perimeter of the plot area.\n\nSince v7.1.2: If it's a percentage string, it is interpreted the\nsame as [series.radius](#plotOptions.gauge.radius), so label can be\naligned under the gauge's shape."
              },
              "subtree": {}
            },
            "levels": {
              "meta": {
                "types": {
                  "array": "*"
                },
                "name": "levels",
                "excludes": {},
                "products": {
                  "gantt": 1
                },
                "description": "Set options on specific levels in a tree grid axis. Takes\nprecedence over labels options."
              },
              "subtree": {
                "level": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "level",
                    "excludes": {},
                    "products": {
                      "gantt": 1
                    },
                    "description": "Specify the level which the options within this object\napplies to."
                  },
                  "subtree": {}
                },
                "style": {
                  "meta": {
                    "types": {
                      "highcharts.cssobject": 1
                    },
                    "name": "style",
                    "excludes": {},
                    "products": {
                      "gantt": 1
                    }
                  },
                  "subtree": {}
                }
              }
            },
            "symbol": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "symbol",
                "excludes": {},
                "products": {
                  "gantt": 1
                },
                "description": "The symbol for the collapse and expand icon in a\ntreegrid."
              },
              "subtree": {
                "height": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "height",
                    "excludes": {},
                    "default": 10
                  },
                  "subtree": {}
                },
                "padding": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "padding",
                    "excludes": {},
                    "default": 5
                  },
                  "subtree": {}
                },
                "type": {
                  "meta": {
                    "types": {
                      "highcharts.symbolkeyvalue": 1
                    },
                    "name": "type",
                    "excludes": {},
                    "default": "triangle",
                    "description": "The symbol type. Points to a definition function in\nthe `Highcharts.Renderer.symbols` collection."
                  },
                  "subtree": {}
                },
                "width": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "width",
                    "excludes": {},
                    "default": 10
                  },
                  "subtree": {}
                },
                "x": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "x",
                    "excludes": {},
                    "default": -5
                  },
                  "subtree": {}
                },
                "y": {
                  "meta": {
                    "types": {
                      "number": 1
                    },
                    "name": "y",
                    "excludes": {},
                    "default": -5
                  },
                  "subtree": {}
                }
              }
            },
            "x": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "x",
                "excludes": {},
                "default": -8,
                "description": "The x position offset of the label relative to the tick position\non the axis. Defaults to -15 for left axis, 15 for right axis."
              },
              "subtree": {}
            },
            "y": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "y",
                "excludes": {},
                "description": "The y position offset of the label relative to the tick position\non the axis."
              },
              "subtree": {}
            }
          }
        },
        "lineColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "lineColor",
            "excludes": {}
          },
          "subtree": {}
        },
        "lineWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "lineWidth",
            "excludes": {},
            "default": 0
          },
          "subtree": {}
        },
        "max": {
          "meta": {
            "types": {},
            "name": "max",
            "excludes": {}
          },
          "subtree": {}
        },
        "maxColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "maxColor",
            "excludes": {},
            "default": "#003399",
            "products": {
              "highcharts": 1
            },
            "description": "Solid gauge only. Unless [stops](#yAxis.stops) are set, the color\nto represent the maximum value of the Y axis."
          },
          "subtree": {}
        },
        "maxLength": {
          "meta": {
            "types": {
              "number": 1,
              "string": 1
            },
            "name": "maxLength",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Maximal size of a resizable axis. Could be set as a percent\nof plot area or pixel size."
          },
          "subtree": {}
        },
        "maxPadding": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "maxPadding",
            "excludes": {},
            "default": 0.05,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Padding of the max value relative to the length of the axis. A\npadding of 0.05 will make a 100px axis 5px longer. This is useful\nwhen you don't want the highest data value to appear on the edge\nof the plot area. When the axis' `max` option is set or a max extreme\nis set using `axis.setExtremes()`, the maxPadding will be ignored.\n\nAlso the `softThreshold` option takes precedence over `maxPadding`,\nso if the data is tangent to the threshold, `maxPadding` may not\napply unless `softThreshold` is set to false."
          },
          "subtree": {}
        },
        "min": {
          "meta": {
            "types": {},
            "name": "min",
            "excludes": {}
          },
          "subtree": {}
        },
        "minColor": {
          "meta": {
            "types": {
              "highcharts.colorstring": 1,
              "highcharts.gradientcolorobject": 1,
              "highcharts.patternobject": 1
            },
            "name": "minColor",
            "excludes": {},
            "default": "#e6ebf5",
            "products": {
              "highcharts": 1
            },
            "description": "Solid gauge only. Unless [stops](#yAxis.stops) are set, the color\nto represent the minimum value of the Y axis."
          },
          "subtree": {}
        },
        "minLength": {
          "meta": {
            "types": {
              "number": 1,
              "string": 1
            },
            "name": "minLength",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Minimal size of a resizable axis. Could be set as a percent\nof plot area or pixel size."
          },
          "subtree": {}
        },
        "minPadding": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "minPadding",
            "excludes": {},
            "default": 0.05,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Padding of the min value relative to the length of the axis. A\npadding of 0.05 will make a 100px axis 5px longer. This is useful\nwhen you don't want the lowest data value to appear on the edge\nof the plot area. When the axis' `min` option is set or a max extreme\nis set using `axis.setExtremes()`, the maxPadding will be ignored.\n\nAlso the `softThreshold` option takes precedence over `minPadding`,\nso if the data is tangent to the threshold, `minPadding` may not\napply unless `softThreshold` is set to false."
          },
          "subtree": {}
        },
        "opposite": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "opposite",
            "excludes": {},
            "products": {
              "highstock": 1,
              "highcharts": 1,
              "gantt": 1
            }
          },
          "subtree": {}
        },
        "plotBands": {
          "meta": {
            "types": {
              "array": "*"
            },
            "name": "plotBands",
            "excludes": {},
            "description": "An array of objects defining plot bands on the Y axis.",
            "extends": "xAxis.plotBands"
          },
          "subtree": {
            "innerRadius": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "innerRadius",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "In a gauge chart, this option determines the inner radius of the\nplot band that stretches along the perimeter. It can be given as\na percentage string, like `\"100%\"`, or as a pixel number, like `100`.\nBy default, the inner radius is controlled by the [thickness](#yAxis.plotBands.thickness) option."
              },
              "subtree": {}
            },
            "outerRadius": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "outerRadius",
                "excludes": {},
                "default": "100%",
                "products": {
                  "highcharts": 1
                },
                "description": "In a gauge chart, this option determines the outer radius of the\nplot band that stretches along the perimeter. It can be given as\na percentage string, like `\"100%\"`, or as a pixel number, like `100`."
              },
              "subtree": {}
            },
            "thickness": {
              "meta": {
                "types": {
                  "number": 1,
                  "string": 1
                },
                "name": "thickness",
                "excludes": {},
                "default": "10",
                "products": {
                  "highcharts": 1
                },
                "description": "In a gauge chart, this option sets the width of the plot band\nstretching along the perimeter. It can be given as a percentage\nstring, like `\"10%\"`, or as a pixel number, like `10`. The default\nvalue 10 is the same as the default [tickLength](#yAxis.tickLength),\nthus making the plot band act as a background for the tick markers."
              },
              "subtree": {}
            }
          }
        },
        "plotLines": {
          "meta": {
            "types": {
              "array": "*"
            },
            "name": "plotLines",
            "excludes": {},
            "description": "An array of objects representing plot lines on the X axis",
            "extends": "xAxis.plotLines"
          },
          "subtree": {}
        },
        "resize": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "resize",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "Options for axis resizing. It adds a thick line between panes which\nthe user can drag in order to resize the panes."
          },
          "subtree": {
            "controlledAxis": {
              "meta": {
                "types": {
                  "*": 1
                },
                "name": "controlledAxis",
                "excludes": {},
                "description": "Contains two arrays of axes that are controlled by control line\nof the axis."
              },
              "subtree": {
                "next": {
                  "meta": {
                    "types": {
                      "array": "(number|string)"
                    },
                    "name": "next",
                    "excludes": {},
                    "default": "[]",
                    "description": "Array of axes that should move out of the way of resizing\nbeing done for the current axis. If not set, the next axis\nwill be used."
                  },
                  "subtree": {}
                },
                "prev": {
                  "meta": {
                    "types": {
                      "array": "(number|string)"
                    },
                    "name": "prev",
                    "excludes": {},
                    "default": "[]",
                    "description": "Array of axes that should move with the current axis\nwhile resizing."
                  },
                  "subtree": {}
                }
              }
            },
            "cursor": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "cursor",
                "excludes": {},
                "default": "ns-resize",
                "description": "Cursor style for the control line.\n\nIn styled mode use class `highcharts-axis-resizer` instead."
              },
              "subtree": {}
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": false,
                "description": "Enable or disable resize by drag for the axis."
              },
              "subtree": {}
            },
            "lineColor": {
              "meta": {
                "types": {
                  "highcharts.colorstring": 1
                },
                "name": "lineColor",
                "excludes": {},
                "default": "#cccccc",
                "description": "Color of the control line.\n\nIn styled mode use class `highcharts-axis-resizer` instead."
              },
              "subtree": {}
            },
            "lineDashStyle": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "lineDashStyle",
                "excludes": {},
                "default": "Solid",
                "description": "Dash style of the control line.\n\nIn styled mode use class `highcharts-axis-resizer` instead."
              },
              "subtree": {}
            },
            "lineWidth": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "lineWidth",
                "excludes": {},
                "default": 4,
                "description": "Width of the control line.\n\nIn styled mode use class `highcharts-axis-resizer` instead."
              },
              "subtree": {}
            },
            "x": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "x",
                "excludes": {},
                "default": 0,
                "description": "Horizontal offset of the control line."
              },
              "subtree": {}
            },
            "y": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "y",
                "excludes": {},
                "default": 0,
                "description": "Vertical offset of the control line."
              },
              "subtree": {}
            }
          }
        },
        "reversed": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "reversed",
            "excludes": {},
            "description": "Whether to reverse the axis so that the highest number is closest\nto the origin."
          },
          "subtree": {}
        },
        "reversedStacks": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "reversedStacks",
            "excludes": {},
            "default": "true",
            "products": {
              "highcharts": 1,
              "highstock": 1
            },
            "description": "If `true`, the first series in a stack will be drawn on top in a\npositive, non-reversed Y axis. If `false`, the first series is in\nthe base of the stack."
          },
          "subtree": {}
        },
        "scrollbar": {
          "meta": {
            "types": {},
            "name": "scrollbar",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "An optional scrollbar to display on the Y axis in response to\nlimiting the minimum an maximum of the axis values.\n\nIn styled mode, all the presentational options for the scrollbar\nare replaced by the classes `.highcharts-scrollbar-thumb`,\n`.highcharts-scrollbar-arrow`, `.highcharts-scrollbar-button`,\n`.highcharts-scrollbar-rifles` and `.highcharts-scrollbar-track`.",
            "extends": "scrollbar"
          },
          "subtree": {
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": "false",
                "products": {
                  "highstock": 1
                },
                "description": "Enable the scrollbar on the Y axis."
              },
              "subtree": {}
            },
            "margin": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "margin",
                "excludes": {},
                "default": "10",
                "products": {
                  "highstock": 1
                },
                "description": "Pixel margin between the scrollbar and the axis elements."
              },
              "subtree": {}
            },
            "showFull": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "showFull",
                "excludes": {},
                "default": "true",
                "products": {
                  "highstock": 1
                },
                "description": "Whether to show the scrollbar when it is fully zoomed out at max\nrange. Setting it to `false` on the Y axis makes the scrollbar stay\nhidden until the user zooms in, like common in browsers."
              },
              "subtree": {}
            },
            "size": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "size",
                "excludes": {},
                "default": "14",
                "products": {
                  "highstock": 1
                },
                "description": "The width of a vertical scrollbar or height of a horizontal\nscrollbar. Defaults to 20 on touch devices."
              },
              "subtree": {}
            },
            "zIndex": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "zIndex",
                "excludes": {},
                "default": "3",
                "products": {
                  "highstock": 1
                },
                "description": "Z index of the scrollbar elements."
              },
              "subtree": {}
            }
          }
        },
        "showLastLabel": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "showLastLabel",
            "excludes": {},
            "default": true
          },
          "subtree": {}
        },
        "softMax": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "softMax",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "A soft maximum for the axis. If the series data maximum is less\nthan this, the axis will stay at this maximum, but if the series\ndata maximum is higher, the axis will flex to show all data.\n\n**Note**: The [series.softThreshold](#plotOptions.series.softThreshold) option takes precedence over this\noption."
          },
          "subtree": {}
        },
        "softMin": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "softMin",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "A soft minimum for the axis. If the series data minimum is greater\nthan this, the axis will stay at this minimum, but if the series\ndata minimum is lower, the axis will flex to show all data.\n\n**Note**: The [series.softThreshold](#plotOptions.series.softThreshold) option takes precedence over this\noption."
          },
          "subtree": {}
        },
        "stackLabels": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "stackLabels",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "The stack labels show the total value for each bar in a stacked\ncolumn or bar chart. The label will be placed on top of positive\ncolumns and below negative columns. In case of an inverted column\nchart or a bar chart the label is placed to the right of positive\nbars and to the left of negative bars."
          },
          "subtree": {
            "align": {
              "meta": {
                "types": {
                  "highcharts.alignvalue": 1
                },
                "name": "align",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "Defines the horizontal alignment of the stack total label. Can be one\nof `\"left\"`, `\"center\"` or `\"right\"`. The default value is calculated\nat runtime and depends on orientation and whether the stack is\npositive or negative."
              },
              "subtree": {}
            },
            "allowOverlap": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "allowOverlap",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1
                },
                "description": "Allow the stack labels to overlap."
              },
              "subtree": {}
            },
            "crop": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "crop",
                "excludes": {},
                "default": true,
                "description": "Whether to hide stack labels that are outside the plot area.\nBy default, the stack label is moved\ninside the plot area according to the\n[overflow](/highcharts/#yAxis/stackLabels/overflow)\noption."
              },
              "subtree": {}
            },
            "enabled": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "enabled",
                "excludes": {},
                "default": false,
                "products": {
                  "highcharts": 1
                },
                "description": "Enable or disable the stack total labels."
              },
              "subtree": {}
            },
            "format": {
              "meta": {
                "types": {
                  "string": 1
                },
                "name": "format",
                "excludes": {},
                "default": "{total}",
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "A [format string](http://docs.highcharts.com/#formatting) for the\ndata label. Available variables are the same as for `formatter`."
              },
              "subtree": {}
            },
            "formatter": {
              "meta": {
                "types": {
                  "highcharts.formattercallbackfunction.<highcharts.stackitemobject>": 1
                },
                "name": "formatter",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "Callback JavaScript function to format the label. The value is\ngiven by `this.total`."
              },
              "subtree": {}
            },
            "overflow": {
              "meta": {
                "types": {
                  "highcharts.datalabelsoverflowvalue": 1
                },
                "name": "overflow",
                "excludes": {},
                "default": "justify",
                "description": "How to handle stack total labels that flow outside the plot area.\nThe default is set to `\"justify\"`,\nwhich aligns them inside the plot area.\nFor columns and bars, this means it will be moved inside the bar.\nTo display stack labels outside the plot area,\nset `crop` to `false` and `overflow` to `\"allow\"`."
              },
              "subtree": {}
            },
            "rotation": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "rotation",
                "excludes": {},
                "default": "0",
                "products": {
                  "highcharts": 1
                },
                "description": "Rotation of the labels in degrees."
              },
              "subtree": {}
            },
            "style": {
              "meta": {
                "types": {
                  "highcharts.cssobject": 1
                },
                "name": "style",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "CSS styles for the label.\n\nIn styled mode, the styles are set in the\n`.highcharts-stack-label` class."
              },
              "subtree": {
                "color": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "color",
                    "excludes": {},
                    "default": "#000000"
                  },
                  "subtree": {}
                },
                "fontSize": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "fontSize",
                    "excludes": {},
                    "default": "11px"
                  },
                  "subtree": {}
                },
                "fontWeight": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "fontWeight",
                    "excludes": {},
                    "default": "bold"
                  },
                  "subtree": {}
                },
                "textOutline": {
                  "meta": {
                    "types": {
                      "string": 1
                    },
                    "name": "textOutline",
                    "excludes": {},
                    "default": "1px contrast"
                  },
                  "subtree": {}
                }
              }
            },
            "textAlign": {
              "meta": {
                "types": {
                  "highcharts.alignvalue": 1
                },
                "name": "textAlign",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "The text alignment for the label. While `align` determines where the\ntexts anchor point is placed with regards to the stack, `textAlign`\ndetermines how the text is aligned against its anchor point. Possible\nvalues are `\"left\"`, `\"center\"` and `\"right\"`. The default value is\ncalculated at runtime and depends on orientation and whether the\nstack is positive or negative."
              },
              "subtree": {}
            },
            "useHTML": {
              "meta": {
                "types": {
                  "boolean": 1
                },
                "name": "useHTML",
                "excludes": {},
                "default": "false",
                "products": {
                  "highcharts": 1,
                  "highstock": 1
                },
                "description": "Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\nto render the labels."
              },
              "subtree": {}
            },
            "verticalAlign": {
              "meta": {
                "types": {
                  "highcharts.verticalalignvalue": 1
                },
                "name": "verticalAlign",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "Defines the vertical alignment of the stack total label. Can be one\nof `\"top\"`, `\"middle\"` or `\"bottom\"`. The default value is calculated\nat runtime and depends on orientation and whether the stack is\npositive or negative."
              },
              "subtree": {}
            },
            "x": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "x",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "The x position offset of the label relative to the left of the\nstacked bar. The default value is calculated at runtime and depends\non orientation and whether the stack is positive or negative."
              },
              "subtree": {}
            },
            "y": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "y",
                "excludes": {},
                "products": {
                  "highcharts": 1
                },
                "description": "The y position offset of the label relative to the tick position\non the axis. The default value is calculated at runtime and depends\non orientation and whether the stack is positive or negative."
              },
              "subtree": {}
            }
          }
        },
        "startOnTick": {
          "meta": {
            "types": {
              "boolean": 1
            },
            "name": "startOnTick",
            "excludes": {},
            "default": true,
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "Whether to force the axis to start on a tick. Use this option with\nthe `maxPadding` option to control the axis start."
          },
          "subtree": {}
        },
        "staticScale": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "staticScale",
            "excludes": {},
            "default": "50",
            "products": {
              "gantt": 1
            },
            "description": "For vertical axes only. Setting the static scale ensures that each tick unit\nis translated into a fixed pixel height. For example, setting the static\nscale to 24 results in each Y axis category taking up 24 pixels, and the\nheight of the chart adjusts. Adding or removing items will make the chart\nresize."
          },
          "subtree": {}
        },
        "stops": {
          "meta": {
            "types": {
              "array": "Highcharts.GradientColorStopObject"
            },
            "name": "stops",
            "excludes": {},
            "products": {
              "highcharts": 1
            },
            "description": "Solid gauge series only. Color stops for the solid gauge. Use this\nin cases where a linear gradient between a `minColor` and `maxColor`\nis not sufficient. The stops is an array of tuples, where the first\nitem is a float between 0 and 1 assigning the relative position in\nthe gradient, and the second item is the color.\n\nFor solid gauges, the Y axis also inherits the concept of\n[data classes](http://api.highcharts.com/highmaps#colorAxis.dataClasses)\nfrom the Highmaps color axis."
          },
          "subtree": {}
        },
        "tickPixelInterval": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "tickPixelInterval",
            "excludes": {},
            "default": 72
          },
          "subtree": {}
        },
        "tickWidth": {
          "meta": {
            "types": {
              "number": 1
            },
            "name": "tickWidth",
            "excludes": {},
            "default": "0",
            "products": {
              "highcharts": 1,
              "highstock": 1,
              "gantt": 1
            },
            "description": "The pixel width of the major tick marks."
          },
          "subtree": {}
        },
        "title": {
          "meta": {
            "types": {
              "*": 1
            },
            "name": "title",
            "excludes": {}
          },
          "subtree": {
            "margin": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "margin",
                "excludes": {},
                "default": "40",
                "description": "The pixel distance between the axis labels and the title.\nPositive values are outside the axis line, negative are inside."
              },
              "subtree": {}
            },
            "rotation": {
              "meta": {
                "types": {
                  "number": 1
                },
                "name": "rotation",
                "excludes": {},
                "default": 270,
                "description": "The rotation of the text in degrees. 0 is horizontal, 270 is\nvertical reading from bottom to top."
              },
              "subtree": {}
            },
            "text": {
              "meta": {
                "types": {
                  "string": 1,
                  "null": 1
                },
                "name": "text",
                "excludes": {},
                "default": "Values",
                "products": {
                  "highcharts": 1,
                  "highstock": 1,
                  "gantt": 1
                },
                "description": "The actual text of the axis title. Horizontal texts can contain\nHTML, but rotated texts are painted using vector techniques and\nmust be clean text. The Y axis title is disabled by setting the\n`text` option to `undefined`."
              },
              "subtree": {}
            }
          }
        },
        "tooltipValueFormat": {
          "meta": {
            "types": {
              "string": 1
            },
            "name": "tooltipValueFormat",
            "excludes": {},
            "default": "undefined",
            "products": {
              "highcharts": 1
            },
            "description": "Parallel coordinates only. Format that will be used for point.y\nand available in [tooltip.pointFormat](#tooltip.pointFormat) as\n`{point.formattedValue}`. If not set, `{point.formattedValue}`\nwill use other options, in this order:\n\n1. [yAxis.labels.format](#yAxis.labels.format) will be used if\n   set\n\n2. If yAxis is a category, then category name will be displayed\n\n3. If yAxis is a datetime, then value will use the same format as\n   yAxis labels\n\n4. If yAxis is linear/logarithmic type, then simple value will be\n   used"
          },
          "subtree": {}
        },
        "top": {
          "meta": {
            "types": {
              "number": 1,
              "string": 1
            },
            "name": "top",
            "excludes": {},
            "products": {
              "highstock": 1
            },
            "description": "The top position of the Y axis. If it's a number, it is interpreted\nas pixel position relative to the chart.\n\nSince Highstock 2: If it's a percentage string, it is interpreted\nas percentages of the plot height, offset from plot area top."
          },
          "subtree": {}
        },
        "type": {
          "meta": {
            "types": {
              "highcharts.axistypevalue": 1
            },
            "name": "type",
            "excludes": {},
            "products": {
              "highcharts": 1,
              "gantt": 1
            },
            "description": "The type of axis. Can be one of `linear`, `logarithmic`, `datetime`,\n`category` or `treegrid`. Defaults to `treegrid` for Gantt charts,\n`linear` for other chart types.\n\nIn a datetime axis, the numbers are given in milliseconds, and tick\nmarks are placed on appropriate values, like full hours or days. In a\ncategory or treegrid axis, the [point names](#series.line.data.name)\nof the chart's series are used for categories, if a\n[categories](#xAxis.categories) array is not defined."
          },
          "subtree": {}
        }
      }
    },
    "zAxis": {
      "meta": {
        "types": {
          "array": "zAxis"
        },
        "name": "zAxis",
        "excludes": {},
        "products": {
          "highcharts": 1
        },
        "description": "The Z axis or depth axis for 3D plots.\n\nSee the [Axis class](/class-reference/Highcharts.Axis) for programmatic\naccess to the axis.",
        "extends": "xAxis"
      },
      "subtree": {}
    }
  }
};
